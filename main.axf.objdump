
C:/intelFPGA_lite/18.1/Final2/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 a0 26 00 00 a4 26 00 00 a8 26 00 00     @....&...&...&..
      30:	ac 26 00 00 9c 26 00 00 b0 26 00 00 b4 26 00 00     .&...&...&...&..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000957 	bl	2638 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000279c 	.word	0x0000279c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002bd8 	.word	0x00002bd8

00000124 <__cs3_heap_start_ptr>:
     124:	00002c00 	.word	0x00002c00

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00002be0 	.word	0x00002be0
     170:	00002be3 	.word	0x00002be3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002be0 	.word	0x00002be0
     1bc:	00002be0 	.word	0x00002be0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002be0 	.word	0x00002be0
     200:	00000000 	.word	0x00000000
     204:	00002740 	.word	0x00002740

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00002740 	.word	0x00002740
     250:	00002be4 	.word	0x00002be4
     254:	000027a0 	.word	0x000027a0
     258:	00000000 	.word	0x00000000

0000025c <check_KEYs>:
/****************************************************************************************
* Subroutine to read KEYs
* Carry over from example code I never deleted
* Might come in useful later otherwise delete
****************************************************************************************/
void check_KEYs(int * KEY0, int * KEY1, int * counter) {
     25c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    volatile int * KEY_ptr = (int *)KEY_BASE;
    volatile int * audio_ptr = (int *)AUDIO_BASE;
    int KEY_value;
    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
     260:	e3a03000 	mov	r3, #0
     264:	e34f3f20 	movt	r3, #65312	; 0xff20
     268:	e5934050 	ldr	r4, [r3, #80]	; 0x50
    while (*KEY_ptr); // wait for pushbutton KEY release
     26c:	e3a0c000 	mov	r12, #0
     270:	e34fcf20 	movt	r12, #65312	; 0xff20
     274:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
     278:	e3530000 	cmp	r3, #0
     27c:	1afffffc 	bne	274 <check_KEYs+0x18>

    if (KEY_value == 0x1) {
     280:	e3540001 	cmp	r4, #1
     284:	1a000009 	bne	2b0 <check_KEYs+0x54>
        // reset counter to start recording
        *counter = 0;
     288:	e3a01000 	mov	r1, #0
     28c:	e5821000 	str	r1, [r2]
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
     290:	e3033fff 	movw	r3, #16383	; 0x3fff
     294:	e34f3f20 	movt	r3, #65312	; 0xff20
     298:	e3a02004 	mov	r2, #4
     29c:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
        *(audio_ptr) = 0x0;
     2a0:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
        *KEY0 = 1;
     2a4:	e3a03001 	mov	r3, #1
     2a8:	e5803000 	str	r3, [r0]
     2ac:	ea00000a 	b	2dc <check_KEYs+0x80>
    } 
    else if (KEY_value == 0x2) {
     2b0:	e3540002 	cmp	r4, #2
     2b4:	1a000008 	bne	2dc <check_KEYs+0x80>
        // reset counter to start playback
        *counter = 0;
     2b8:	e3a00000 	mov	r0, #0
     2bc:	e5820000 	str	r0, [r2]
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
     2c0:	e3033fff 	movw	r3, #16383	; 0x3fff
     2c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     2c8:	e3a02008 	mov	r2, #8
     2cc:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
        *(audio_ptr) = 0x0;
     2d0:	e5030fbf 	str	r0, [r3, #-4031]	; 0xfffff041
        *KEY1 = 1;
     2d4:	e3a03001 	mov	r3, #1
     2d8:	e5813000 	str	r3, [r1]
    }
}
     2dc:	e8bd0010 	ldmfd	sp!, {r4}
     2e0:	e12fff1e 	bx	lr

000002e4 <pow_me>:

//Goddammit I need to redefine pow too
double pow_me(double in, int power) {
     2e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     2e8:	e1a04000 	mov	r4, r0
     2ec:	e1a05001 	mov	r5, r1
    double out = in;

    if(power == 0) return 1;
     2f0:	e3520000 	cmp	r2, #0
     2f4:	0a00000a 	beq	324 <pow_me+0x40>

    for(int i = 0; i < (power - 1); i++) {
     2f8:	e2427001 	sub	r7, r2, #1
     2fc:	e3570000 	cmp	r7, #0
     300:	da00000b 	ble	334 <pow_me+0x50>
     304:	e3a06000 	mov	r6, #0
        out = out * in;
     308:	e1a02004 	mov	r2, r4
     30c:	e1a03005 	mov	r3, r5
     310:	eb000498 	bl	1578 <__aeabi_dmul>
double pow_me(double in, int power) {
    double out = in;

    if(power == 0) return 1;

    for(int i = 0; i < (power - 1); i++) {
     314:	e2866001 	add	r6, r6, #1
     318:	e1560007 	cmp	r6, r7
     31c:	1afffff9 	bne	308 <pow_me+0x24>
     320:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

//Goddammit I need to redefine pow too
double pow_me(double in, int power) {
    double out = in;

    if(power == 0) return 1;
     324:	e3a00000 	mov	r0, #0
     328:	e3a01000 	mov	r1, #0
     32c:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     330:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    for(int i = 0; i < (power - 1); i++) {
        out = out * in;
    }

    return out;
}
     334:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000338 <sin_me>:

// Just a 5th order taylor series approximation, if it's too slow there are faster algorithms out there
// It's accurate enough for visual use
// I hope to figure out the STD library
// Improvement: Use BKM or CORDIC algorithms
double sin_me(double in) {
     338:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     33c:	e1a08000 	mov	r8, r0
     340:	e1a09001 	mov	r9, r1
    //First reduce the input to be between 0 and pi/2
    double quotient = in;
    double quadrant = 0;
     344:	e3a04000 	mov	r4, #0
     348:	e3a05000 	mov	r5, #0

    while((quotient - PI/2) > 0) {
     34c:	e1a0a004 	mov	r10, r4
     350:	e1a0b005 	mov	r11, r5
     354:	ea000010 	b	39c <sin_me+0x64>
        quotient -= PI/2;
        quadrant += 1;
     358:	e1a00004 	mov	r0, r4
     35c:	e1a01005 	mov	r1, r5
     360:	e3a02000 	mov	r2, #0
     364:	e3a03000 	mov	r3, #0
     368:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     36c:	eb00037d 	bl	1168 <__adddf3>
     370:	e1a04000 	mov	r4, r0
     374:	e1a05001 	mov	r5, r1

        if(quadrant == 4) quadrant = 0;
     378:	e3a02000 	mov	r2, #0
     37c:	e3a03000 	mov	r3, #0
     380:	e3443010 	movt	r3, #16400	; 0x4010
     384:	eb0005d5 	bl	1ae0 <__aeabi_dcmpeq>
     388:	e3500000 	cmp	r0, #0
     38c:	11a0400a 	movne	r4, r10
     390:	11a0500b 	movne	r5, r11
     394:	e1a08006 	mov	r8, r6
     398:	e1a09007 	mov	r9, r7
double sin_me(double in) {
    //First reduce the input to be between 0 and pi/2
    double quotient = in;
    double quadrant = 0;

    while((quotient - PI/2) > 0) {
     39c:	e1a00008 	mov	r0, r8
     3a0:	e1a01009 	mov	r1, r9
     3a4:	e3042550 	movw	r2, #17744	; 0x4550
     3a8:	e3452452 	movt	r2, #21586	; 0x5452
     3ac:	e30231fb 	movw	r3, #8699	; 0x21fb
     3b0:	e3433ff9 	movt	r3, #16377	; 0x3ff9
     3b4:	eb00036a 	bl	1164 <__aeabi_dsub>
     3b8:	e1a06000 	mov	r6, r0
     3bc:	e1a07001 	mov	r7, r1
     3c0:	e1a0200a 	mov	r2, r10
     3c4:	e1a0300b 	mov	r3, r11
     3c8:	eb0005dc 	bl	1b40 <__aeabi_dcmpgt>
     3cc:	e3500000 	cmp	r0, #0
     3d0:	1affffe0 	bne	358 <sin_me+0x20>
        quadrant += 1;

        if(quadrant == 4) quadrant = 0;
    }

    if(quadrant == 0) {
     3d4:	e1a00004 	mov	r0, r4
     3d8:	e1a01005 	mov	r1, r5
     3dc:	e3a02000 	mov	r2, #0
     3e0:	e3a03000 	mov	r3, #0
     3e4:	eb0005bd 	bl	1ae0 <__aeabi_dcmpeq>
     3e8:	e3500000 	cmp	r0, #0
     3ec:	0a00001e 	beq	46c <sin_me+0x134>
        double taylor_value = quotient - (pow_me(quotient, 3) / 6) + (pow_me(quotient, 5) / 120);
     3f0:	e1a00008 	mov	r0, r8
     3f4:	e1a01009 	mov	r1, r9
     3f8:	e3a02003 	mov	r2, #3
     3fc:	ebffffb8 	bl	2e4 <pow_me>
     400:	e3a02000 	mov	r2, #0
     404:	e3a03000 	mov	r3, #0
     408:	e3443018 	movt	r3, #16408	; 0x4018
     40c:	eb0004fd 	bl	1808 <__aeabi_ddiv>
     410:	e1a02000 	mov	r2, r0
     414:	e1a03001 	mov	r3, r1
     418:	e1a00008 	mov	r0, r8
     41c:	e1a01009 	mov	r1, r9
     420:	eb00034f 	bl	1164 <__aeabi_dsub>
     424:	e1a04000 	mov	r4, r0
     428:	e1a05001 	mov	r5, r1
     42c:	e1a00008 	mov	r0, r8
     430:	e1a01009 	mov	r1, r9
     434:	e3a02005 	mov	r2, #5
     438:	ebffffa9 	bl	2e4 <pow_me>
     43c:	e3a02000 	mov	r2, #0
     440:	e3a03000 	mov	r3, #0
     444:	e344305e 	movt	r3, #16478	; 0x405e
     448:	eb0004ee 	bl	1808 <__aeabi_ddiv>
     44c:	e1a02000 	mov	r2, r0
     450:	e1a03001 	mov	r3, r1
     454:	e1a00004 	mov	r0, r4
     458:	e1a01005 	mov	r1, r5
     45c:	eb000341 	bl	1168 <__adddf3>
     460:	e1a03000 	mov	r3, r0
     464:	e1a02001 	mov	r2, r1
        return taylor_value;
     468:	ea000078 	b	650 <sin_me+0x318>
    } else if(quadrant == 1) {
     46c:	e1a00004 	mov	r0, r4
     470:	e1a01005 	mov	r1, r5
     474:	e3a02000 	mov	r2, #0
     478:	e3a03000 	mov	r3, #0
     47c:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     480:	eb000596 	bl	1ae0 <__aeabi_dcmpeq>
     484:	e3500000 	cmp	r0, #0
     488:	0a000025 	beq	524 <sin_me+0x1ec>
        double taylor_value = (PI/2 - quotient) - (pow_me(PI/2 - quotient, 3) / 6) + (pow_me(PI/2 - quotient, 5) / 120);
     48c:	e3040550 	movw	r0, #17744	; 0x4550
     490:	e3450452 	movt	r0, #21586	; 0x5452
     494:	e30211fb 	movw	r1, #8699	; 0x21fb
     498:	e3431ff9 	movt	r1, #16377	; 0x3ff9
     49c:	e1a02008 	mov	r2, r8
     4a0:	e1a03009 	mov	r3, r9
     4a4:	eb00032e 	bl	1164 <__aeabi_dsub>
     4a8:	e1a04000 	mov	r4, r0
     4ac:	e1a05001 	mov	r5, r1
     4b0:	e3a02003 	mov	r2, #3
     4b4:	ebffff8a 	bl	2e4 <pow_me>
     4b8:	e3a02000 	mov	r2, #0
     4bc:	e3a03000 	mov	r3, #0
     4c0:	e3443018 	movt	r3, #16408	; 0x4018
     4c4:	eb0004cf 	bl	1808 <__aeabi_ddiv>
     4c8:	e1a02000 	mov	r2, r0
     4cc:	e1a03001 	mov	r3, r1
     4d0:	e1a00004 	mov	r0, r4
     4d4:	e1a01005 	mov	r1, r5
     4d8:	eb000321 	bl	1164 <__aeabi_dsub>
     4dc:	e1a06000 	mov	r6, r0
     4e0:	e1a07001 	mov	r7, r1
     4e4:	e1a00004 	mov	r0, r4
     4e8:	e1a01005 	mov	r1, r5
     4ec:	e3a02005 	mov	r2, #5
     4f0:	ebffff7b 	bl	2e4 <pow_me>
     4f4:	e3a02000 	mov	r2, #0
     4f8:	e3a03000 	mov	r3, #0
     4fc:	e344305e 	movt	r3, #16478	; 0x405e
     500:	eb0004c0 	bl	1808 <__aeabi_ddiv>
     504:	e1a02000 	mov	r2, r0
     508:	e1a03001 	mov	r3, r1
     50c:	e1a00006 	mov	r0, r6
     510:	e1a01007 	mov	r1, r7
     514:	eb000313 	bl	1168 <__adddf3>
        return taylor_value;
     518:	e1a03000 	mov	r3, r0
     51c:	e1a02001 	mov	r2, r1
     520:	ea00004a 	b	650 <sin_me+0x318>
    }
    else if(quadrant == 2) {
     524:	e1a00004 	mov	r0, r4
     528:	e1a01005 	mov	r1, r5
     52c:	e3a02000 	mov	r2, #0
     530:	e3a03101 	mov	r3, #1073741824	; 0x40000000
     534:	eb000569 	bl	1ae0 <__aeabi_dcmpeq>
     538:	e3500000 	cmp	r0, #0
     53c:	0a00001e 	beq	5bc <sin_me+0x284>
        double taylor_value = (quotient) - (pow_me(quotient, 3) / 6) + (pow_me(quotient, 5) / 120);
     540:	e1a00008 	mov	r0, r8
     544:	e1a01009 	mov	r1, r9
     548:	e3a02003 	mov	r2, #3
     54c:	ebffff64 	bl	2e4 <pow_me>
     550:	e3a02000 	mov	r2, #0
     554:	e3a03000 	mov	r3, #0
     558:	e3443018 	movt	r3, #16408	; 0x4018
     55c:	eb0004a9 	bl	1808 <__aeabi_ddiv>
     560:	e1a02000 	mov	r2, r0
     564:	e1a03001 	mov	r3, r1
     568:	e1a00008 	mov	r0, r8
     56c:	e1a01009 	mov	r1, r9
     570:	eb0002fb 	bl	1164 <__aeabi_dsub>
     574:	e1a04000 	mov	r4, r0
     578:	e1a05001 	mov	r5, r1
     57c:	e1a00008 	mov	r0, r8
     580:	e1a01009 	mov	r1, r9
     584:	e3a02005 	mov	r2, #5
     588:	ebffff55 	bl	2e4 <pow_me>
     58c:	e3a02000 	mov	r2, #0
     590:	e3a03000 	mov	r3, #0
     594:	e344305e 	movt	r3, #16478	; 0x405e
     598:	eb00049a 	bl	1808 <__aeabi_ddiv>
     59c:	e1a02000 	mov	r2, r0
     5a0:	e1a03001 	mov	r3, r1
     5a4:	e1a00004 	mov	r0, r4
     5a8:	e1a01005 	mov	r1, r5
     5ac:	eb0002ed 	bl	1168 <__adddf3>
        return -taylor_value;
     5b0:	e1a03000 	mov	r3, r0
     5b4:	e2812102 	add	r2, r1, #-2147483648	; 0x80000000
     5b8:	ea000024 	b	650 <sin_me+0x318>
    }
    else {
        double taylor_value = (PI/2 - quotient) - (pow_me(PI/2 - quotient, 3) / 6) + (pow_me(PI/2 - quotient, 5) / 120);
     5bc:	e3040550 	movw	r0, #17744	; 0x4550
     5c0:	e3450452 	movt	r0, #21586	; 0x5452
     5c4:	e30211fb 	movw	r1, #8699	; 0x21fb
     5c8:	e3431ff9 	movt	r1, #16377	; 0x3ff9
     5cc:	e1a02008 	mov	r2, r8
     5d0:	e1a03009 	mov	r3, r9
     5d4:	eb0002e2 	bl	1164 <__aeabi_dsub>
     5d8:	e1a04000 	mov	r4, r0
     5dc:	e1a05001 	mov	r5, r1
     5e0:	e3a02003 	mov	r2, #3
     5e4:	ebffff3e 	bl	2e4 <pow_me>
     5e8:	e3a02000 	mov	r2, #0
     5ec:	e3a03000 	mov	r3, #0
     5f0:	e3443018 	movt	r3, #16408	; 0x4018
     5f4:	eb000483 	bl	1808 <__aeabi_ddiv>
     5f8:	e1a02000 	mov	r2, r0
     5fc:	e1a03001 	mov	r3, r1
     600:	e1a00004 	mov	r0, r4
     604:	e1a01005 	mov	r1, r5
     608:	eb0002d5 	bl	1164 <__aeabi_dsub>
     60c:	e1a06000 	mov	r6, r0
     610:	e1a07001 	mov	r7, r1
     614:	e1a00004 	mov	r0, r4
     618:	e1a01005 	mov	r1, r5
     61c:	e3a02005 	mov	r2, #5
     620:	ebffff2f 	bl	2e4 <pow_me>
     624:	e3a02000 	mov	r2, #0
     628:	e3a03000 	mov	r3, #0
     62c:	e344305e 	movt	r3, #16478	; 0x405e
     630:	eb000474 	bl	1808 <__aeabi_ddiv>
     634:	e1a02000 	mov	r2, r0
     638:	e1a03001 	mov	r3, r1
     63c:	e1a00006 	mov	r0, r6
     640:	e1a01007 	mov	r1, r7
     644:	eb0002c7 	bl	1168 <__adddf3>
        return -taylor_value;
     648:	e1a03000 	mov	r3, r0
     64c:	e2812102 	add	r2, r1, #-2147483648	; 0x80000000
    }
    
    return -1;
}
     650:	e1a00003 	mov	r0, r3
     654:	e1a01002 	mov	r1, r2
     658:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000065c <sqrt>:
/*
 * Copied from https://stackoverflow.com/questions/11644441/fast-inverse-square-root-on-x64/11644533
 * A inv square root function, derived from an video game implementation
 * Does some weird witchcraft
 */
double sqrt(double number) {
     65c:	e92d4038 	push	{r3, r4, r5, lr}
    double y = number;
    double x2 = y * 0.5;
    long long i = *(long long *) &y;
    // The magic number is for doubles is from https://cs.uwaterloo.ca/~m32rober/rsqrt.pdf
    i = 0x5fe6eb50c7b537a9 - (i >> 1);
     660:	e1b030c1 	asrs	r3, r1, #1
     664:	e1a02060 	rrx	r2, r0
    y = *(double *) &i;
     668:	e30347a9 	movw	r4, #14249	; 0x37a9
     66c:	e34c47b5 	movt	r4, #51125	; 0xc7b5
     670:	e30e5b50 	movw	r5, #60240	; 0xeb50
     674:	e3455fe6 	movt	r5, #24550	; 0x5fe6
     678:	e0544002 	subs	r4, r4, r2
     67c:	e0c55003 	sbc	r5, r5, r3
 * A inv square root function, derived from an video game implementation
 * Does some weird witchcraft
 */
double sqrt(double number) {
    double y = number;
    double x2 = y * 0.5;
     680:	e3a02000 	mov	r2, #0
     684:	e3a03000 	mov	r3, #0
     688:	e3433fe0 	movt	r3, #16352	; 0x3fe0
     68c:	eb0003b9 	bl	1578 <__aeabi_dmul>
    long long i = *(long long *) &y;
    // The magic number is for doubles is from https://cs.uwaterloo.ca/~m32rober/rsqrt.pdf
    i = 0x5fe6eb50c7b537a9 - (i >> 1);
    y = *(double *) &i;
    y = y * (1.5 - (x2 * y * y));   // 1st iteration
     690:	e1a02004 	mov	r2, r4
     694:	e1a03005 	mov	r3, r5
     698:	eb0003b6 	bl	1578 <__aeabi_dmul>
     69c:	e1a02000 	mov	r2, r0
     6a0:	e1a03001 	mov	r3, r1
     6a4:	e1a00004 	mov	r0, r4
     6a8:	e1a01005 	mov	r1, r5
     6ac:	eb0003b1 	bl	1578 <__aeabi_dmul>
     6b0:	e1a02000 	mov	r2, r0
     6b4:	e1a03001 	mov	r3, r1
     6b8:	e3a00000 	mov	r0, #0
     6bc:	e3a01000 	mov	r1, #0
     6c0:	e3431ff8 	movt	r1, #16376	; 0x3ff8
     6c4:	eb0002a6 	bl	1164 <__aeabi_dsub>
     6c8:	e1a02000 	mov	r2, r0
     6cc:	e1a03001 	mov	r3, r1
     6d0:	e1a00004 	mov	r0, r4
     6d4:	e1a01005 	mov	r1, r5
     6d8:	eb0003a6 	bl	1578 <__aeabi_dmul>
     6dc:	e1a02000 	mov	r2, r0
     6e0:	e1a03001 	mov	r3, r1
    //      y  = y * ( 1.5 - ( x2 * y * y ) );   // 2nd iteration, this can be removed
    return 1/y;
     6e4:	e3a00000 	mov	r0, #0
     6e8:	e3a01000 	mov	r1, #0
     6ec:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     6f0:	eb000444 	bl	1808 <__aeabi_ddiv>
}
     6f4:	e8bd8038 	pop	{r3, r4, r5, pc}

000006f8 <cos_me>:

double cos_me(double in) {
     6f8:	e92d4008 	push	{r3, lr}
    return sin_me(in + PI/2);
     6fc:	e3042550 	movw	r2, #17744	; 0x4550
     700:	e3452452 	movt	r2, #21586	; 0x5452
     704:	e30231fb 	movw	r3, #8699	; 0x21fb
     708:	e3433ff9 	movt	r3, #16377	; 0x3ff9
     70c:	eb000295 	bl	1168 <__adddf3>
     710:	ebffff08 	bl	338 <sin_me>
}
     714:	e8bd8008 	pop	{r3, pc}

00000718 <_fft>:
/*
 * Original code copied from https://rosettacode.org/wiki/Fast_Fourier_transform#C
 * Modified to work without complex library which isn't supported
 */

void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
     718:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     71c:	e24dd044 	sub	sp, sp, #68	; 0x44
     720:	e58d0020 	str	r0, [sp, #32]
     724:	e58d1024 	str	r1, [sp, #36]	; 0x24
     728:	e58d2028 	str	r2, [sp, #40]	; 0x28
     72c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
     730:	e59da068 	ldr	r10, [sp, #104]	; 0x68
     734:	e59d406c 	ldr	r4, [sp, #108]	; 0x6c
	if (step < n) {
     738:	e154000a 	cmp	r4, r10
     73c:	aa00008b 	bge	970 <_fft+0x258>
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
     740:	e1a02084 	lsl	r2, r4, #1
     744:	e58d2030 	str	r2, [sp, #48]	; 0x30
     748:	e58da000 	str	r10, [sp]
     74c:	e58d2004 	str	r2, [sp, #4]
     750:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
     754:	e1a01003 	mov	r1, r3
     758:	e59d2020 	ldr	r2, [sp, #32]
     75c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
     760:	ebffffec 	bl	718 <_fft>
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
     764:	e1a03184 	lsl	r3, r4, #3
     768:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
     76c:	e08cc003 	add	r12, r12, r3
     770:	e58dc034 	str	r12, [sp, #52]	; 0x34
     774:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
     778:	e0822003 	add	r2, r2, r3
     77c:	e58d2038 	str	r2, [sp, #56]	; 0x38
     780:	e58da000 	str	r10, [sp]
     784:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
     788:	e58dc004 	str	r12, [sp, #4]
     78c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
     790:	e1a01002 	mov	r1, r2
     794:	e59dc020 	ldr	r12, [sp, #32]
     798:	e08c2003 	add	r2, r12, r3
     79c:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
     7a0:	e08c3003 	add	r3, r12, r3
     7a4:	ebffffdb 	bl	718 <_fft>
 
		for (int i = 0; i < n; i += 2 * step) {
     7a8:	e35a0000 	cmp	r10, #0
     7ac:	da00006f 	ble	970 <_fft+0x258>
/*
 * Original code copied from https://rosettacode.org/wiki/Fast_Fourier_transform#C
 * Modified to work without complex library which isn't supported
 */

void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
     7b0:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
     7b4:	e1a02182 	lsl	r2, r2, #3
     7b8:	e58d203c 	str	r2, [sp, #60]	; 0x3c
     7bc:	e3a09000 	mov	r9, #0
	if (step < n) {
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
     7c0:	e1a08009 	mov	r8, r9
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
     7c4:	e1a0b00a 	mov	r11, r10
     7c8:	e1a00008 	mov	r0, r8
     7cc:	eb000332 	bl	149c <__aeabi_i2d>
     7d0:	e3042550 	movw	r2, #17744	; 0x4550
     7d4:	e3452452 	movt	r2, #21586	; 0x5452
     7d8:	e30231fb 	movw	r3, #8699	; 0x21fb
     7dc:	e34c3009 	movt	r3, #49161	; 0xc009
     7e0:	eb000364 	bl	1578 <__aeabi_dmul>
     7e4:	e1a04000 	mov	r4, r0
     7e8:	e1a05001 	mov	r5, r1
     7ec:	e1a0000b 	mov	r0, r11
     7f0:	eb000329 	bl	149c <__aeabi_i2d>
     7f4:	e1a02000 	mov	r2, r0
     7f8:	e1a03001 	mov	r3, r1
     7fc:	e1a00004 	mov	r0, r4
     800:	e1a01005 	mov	r1, r5
     804:	eb0003ff 	bl	1808 <__aeabi_ddiv>
     808:	e1a04000 	mov	r4, r0
     80c:	e1a05001 	mov	r5, r1
double cos_me(double in) {
    return sin_me(in + PI/2);
}

inline Re cexp_re(Re re_in) {
    return cos_me(re_in);
     810:	ebffffb8 	bl	6f8 <cos_me>
     814:	e1cd01f8 	strd	r0, [sp, #24]
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
     818:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
     81c:	e18320d9 	ldrd	r2, [r3, r9]
     820:	e1cd20f8 	strd	r2, [sp, #8]
     824:	e1a00002 	mov	r0, r2
     828:	e1a01003 	mov	r1, r3
     82c:	e1cd21d8 	ldrd	r2, [sp, #24]
     830:	eb000350 	bl	1578 <__aeabi_dmul>
     834:	e1a06000 	mov	r6, r0
     838:	e1a07001 	mov	r7, r1
inline Re cexp_re(Re re_in) {
    return cos_me(re_in);
}

inline Im cexp_im(Im im_in) {
    return sin_me(im_in);
     83c:	e1a00004 	mov	r0, r4
     840:	e1a01005 	mov	r1, r5
     844:	ebfffebb 	bl	338 <sin_me>
     848:	e1a04000 	mov	r4, r0
     84c:	e1a05001 	mov	r5, r1
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
     850:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
     854:	e18320d9 	ldrd	r2, [r3, r9]
     858:	e1cd21f0 	strd	r2, [sp, #16]
     85c:	e1a00002 	mov	r0, r2
     860:	e1a01003 	mov	r1, r3
     864:	e1a02004 	mov	r2, r4
     868:	e1a03005 	mov	r3, r5
     86c:	eb000341 	bl	1578 <__aeabi_dmul>
     870:	e1a02000 	mov	r2, r0
     874:	e1a03001 	mov	r3, r1
     878:	e1a00006 	mov	r0, r6
     87c:	e1a01007 	mov	r1, r7
     880:	eb000237 	bl	1164 <__aeabi_dsub>
     884:	e1a06000 	mov	r6, r0
     888:	e1a07001 	mov	r7, r1
            Im im_t = cexp_im(-PI * i / n) * out_re[i + step] + cexp_re(-PI * i / n) * out_im[i + step];
     88c:	e1cd00d8 	ldrd	r0, [sp, #8]
     890:	e1a02004 	mov	r2, r4
     894:	e1a03005 	mov	r3, r5
     898:	eb000336 	bl	1578 <__aeabi_dmul>
     89c:	e1a04000 	mov	r4, r0
     8a0:	e1a05001 	mov	r5, r1
     8a4:	e1cd01d0 	ldrd	r0, [sp, #16]
     8a8:	e1cd21d8 	ldrd	r2, [sp, #24]
     8ac:	eb000331 	bl	1578 <__aeabi_dmul>
     8b0:	e1a02000 	mov	r2, r0
     8b4:	e1a03001 	mov	r3, r1
     8b8:	e1a00004 	mov	r0, r4
     8bc:	e1a01005 	mov	r1, r5
     8c0:	eb000228 	bl	1168 <__adddf3>
     8c4:	e1a04000 	mov	r4, r0
     8c8:	e1a05001 	mov	r5, r1
			buf_re[i / 2]     = out_re[i] + re_t;
     8cc:	e088afa8 	add	r10, r8, r8, lsr #31
     8d0:	e1a0a0ca 	asr	r10, r10, #1
     8d4:	e1a0a18a 	lsl	r10, r10, #3
     8d8:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
     8dc:	e18c00d9 	ldrd	r0, [r12, r9]
     8e0:	e1a02006 	mov	r2, r6
     8e4:	e1a03007 	mov	r3, r7
     8e8:	eb00021e 	bl	1168 <__adddf3>
     8ec:	e59d2020 	ldr	r2, [sp, #32]
     8f0:	e18200fa 	strd	r0, [r2, r10]
            buf_im[i / 2]     = out_im[i] + im_t;
     8f4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     8f8:	e18300d9 	ldrd	r0, [r3, r9]
     8fc:	e1a02004 	mov	r2, r4
     900:	e1a03005 	mov	r3, r5
     904:	eb000217 	bl	1168 <__adddf3>
     908:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
     90c:	e18c00fa 	strd	r0, [r12, r10]
/*
 * Original code copied from https://rosettacode.org/wiki/Fast_Fourier_transform#C
 * Modified to work without complex library which isn't supported
 */

void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
     910:	e088a00b 	add	r10, r8, r11
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
            Im im_t = cexp_im(-PI * i / n) * out_re[i + step] + cexp_re(-PI * i / n) * out_im[i + step];
			buf_re[i / 2]     = out_re[i] + re_t;
            buf_im[i / 2]     = out_im[i] + im_t;
			buf_re[(i + n)/2] = out_re[i] - re_t;
     914:	e08aafaa 	add	r10, r10, r10, lsr #31
     918:	e1a0a0ca 	asr	r10, r10, #1
     91c:	e1a0a18a 	lsl	r10, r10, #3
     920:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
     924:	e18200d9 	ldrd	r0, [r2, r9]
     928:	e1a02006 	mov	r2, r6
     92c:	e1a03007 	mov	r3, r7
     930:	eb00020b 	bl	1164 <__aeabi_dsub>
     934:	e59d3020 	ldr	r3, [sp, #32]
     938:	e18300fa 	strd	r0, [r3, r10]
            buf_im[(i + n)/2] = out_im[i] - im_t;
     93c:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
     940:	e18c00d9 	ldrd	r0, [r12, r9]
     944:	e1a02004 	mov	r2, r4
     948:	e1a03005 	mov	r3, r5
     94c:	eb000204 	bl	1164 <__aeabi_dsub>
     950:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
     954:	e18200fa 	strd	r0, [r2, r10]
void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
	if (step < n) {
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
     958:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
     95c:	e0888003 	add	r8, r8, r3
     960:	e59dc03c 	ldr	r12, [sp, #60]	; 0x3c
     964:	e089900c 	add	r9, r9, r12
     968:	e15b0008 	cmp	r11, r8
     96c:	caffff95 	bgt	7c8 <_fft+0xb0>
            buf_im[i / 2]     = out_im[i] + im_t;
			buf_re[(i + n)/2] = out_re[i] - re_t;
            buf_im[(i + n)/2] = out_im[i] - im_t;
		}
	}
}
     970:	e28dd044 	add	sp, sp, #68	; 0x44
     974:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000978 <fft>:

/*
 *  Fast Fourier Transform function
 */
void fft(Re buf_re[], Im buf_im[], int n) {
     978:	e92d4870 	push	{r4, r5, r6, r11, lr}
     97c:	e28db010 	add	r11, sp, #16
     980:	e24dd00c 	sub	sp, sp, #12
     984:	e1a06002 	mov	r6, r2
	Re out_re[n];
     988:	e1a0e182 	lsl	lr, r2, #3
     98c:	e28e3008 	add	r3, lr, #8
     990:	e04dd003 	sub	sp, sp, r3
     994:	e28d2008 	add	r2, sp, #8
    Im out_im[n];
     998:	e04dd003 	sub	sp, sp, r3
     99c:	e28d3008 	add	r3, sp, #8
	for (int i = 0; i < n; i++) {
     9a0:	e3560000 	cmp	r6, #0
     9a4:	da000007 	ble	9c8 <fft+0x50>
     9a8:	e3a0c000 	mov	r12, #0
        out_re[i] = buf_re[i];
     9ac:	e18040dc 	ldrd	r4, [r0, r12]
     9b0:	e18240fc 	strd	r4, [r2, r12]
        out_im[i] = buf_im[i];
     9b4:	e18140dc 	ldrd	r4, [r1, r12]
     9b8:	e18340fc 	strd	r4, [r3, r12]
     9bc:	e28cc008 	add	r12, r12, #8
 *  Fast Fourier Transform function
 */
void fft(Re buf_re[], Im buf_im[], int n) {
	Re out_re[n];
    Im out_im[n];
	for (int i = 0; i < n; i++) {
     9c0:	e15e000c 	cmp	lr, r12
     9c4:	1afffff8 	bne	9ac <fft+0x34>
        out_re[i] = buf_re[i];
        out_im[i] = buf_im[i];
    }
 
	_fft(buf_re, buf_im, out_re, out_im, n, 1);
     9c8:	e58d6000 	str	r6, [sp]
     9cc:	e3a0c001 	mov	r12, #1
     9d0:	e58dc004 	str	r12, [sp, #4]
     9d4:	ebffff4f 	bl	718 <_fft>
 }
     9d8:	e24bd010 	sub	sp, r11, #16
     9dc:	e8bd8870 	pop	{r4, r5, r6, r11, pc}

000009e0 <plot_pixel>:
    }
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     9e0:	e3023bfc 	movw	r3, #11260	; 0x2bfc
     9e4:	e3403000 	movt	r3, #0
     9e8:	e5933000 	ldr	r3, [r3]
     9ec:	e1a00080 	lsl	r0, r0, #1
     9f0:	e0831501 	add	r1, r3, r1, lsl #10
     9f4:	e18120b0 	strh	r2, [r1, r0]
     9f8:	e12fff1e 	bx	lr

000009fc <draw_line>:
 
	_fft(buf_re, buf_im, out_re, out_im, n, 1);
 }

/*****************Helper Functions for Drawing*******************/
void draw_line(int x0, int y0, int x1, int y1, short int colour) {
     9fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a00:	e24dd01c 	sub	sp, sp, #28
     a04:	e58d0004 	str	r0, [sp, #4]
     a08:	e58d100c 	str	r1, [sp, #12]
     a0c:	e1a08002 	mov	r8, r2
     a10:	e58d3010 	str	r3, [sp, #16]
     a14:	e1ddb4f0 	ldrsh	r11, [sp, #64]	; 0x40
     a18:	e3a02005 	mov	r2, #5
     a1c:	e58d2014 	str	r2, [sp, #20]
	for(int i = 0; i < 5; i++) {
        int is_steep = abs(y1-y0) > abs(x1-x0);
     a20:	e59d3010 	ldr	r3, [sp, #16]
     a24:	e59d200c 	ldr	r2, [sp, #12]
     a28:	e062a003 	rsb	r10, r2, r3
     a2c:	e35a0000 	cmp	r10, #0
     a30:	b26aa000 	rsblt	r10, r10, #0
     a34:	e59d2004 	ldr	r2, [sp, #4]
     a38:	e0623008 	rsb	r3, r2, r8
     a3c:	e3530000 	cmp	r3, #0
     a40:	b2633000 	rsblt	r3, r3, #0
     a44:	e15a0003 	cmp	r10, r3
     a48:	d3a0a000 	movle	r10, #0
     a4c:	c3a0a001 	movgt	r10, #1

        if(is_steep != 0) {
     a50:	e35a0000 	cmp	r10, #0
     a54:	0a000006 	beq	a74 <draw_line+0x78>
     a58:	e1a03008 	mov	r3, r8
     a5c:	e59d8010 	ldr	r8, [sp, #16]
     a60:	e58d3010 	str	r3, [sp, #16]
     a64:	e1a03002 	mov	r3, r2
     a68:	e59d200c 	ldr	r2, [sp, #12]
     a6c:	e58d2004 	str	r2, [sp, #4]
     a70:	e58d300c 	str	r3, [sp, #12]
            temp = x1;
            x1 = y1;
            y1 = temp;
        } 
	
        if(x0 > x1) {
     a74:	e59d3004 	ldr	r3, [sp, #4]
     a78:	e1530008 	cmp	r3, r8
     a7c:	da000006 	ble	a9c <draw_line+0xa0>
     a80:	e59d300c 	ldr	r3, [sp, #12]
            int temp = x0;
            x0 = x1;
            x1 = temp;
		
            temp = y0;
            y0 = y1;
     a84:	e59d2010 	ldr	r2, [sp, #16]
     a88:	e58d200c 	str	r2, [sp, #12]
            y1 = temp;
     a8c:	e58d3010 	str	r3, [sp, #16]
            temp = x1;
            x1 = y1;
            y1 = temp;
        } 
	
        if(x0 > x1) {
     a90:	e59d3004 	ldr	r3, [sp, #4]
            int temp = x0;
            x0 = x1;
     a94:	e58d8004 	str	r8, [sp, #4]
            x1 = temp;
     a98:	e1a08003 	mov	r8, r3
            temp = y0;
            y0 = y1;
            y1 = temp;
        }
	
        int delta_x = x1 - x0;
     a9c:	e59d3004 	ldr	r3, [sp, #4]
     aa0:	e0639008 	rsb	r9, r3, r8
        int delta_y = abs(y1 - y0);
     aa4:	e59d2010 	ldr	r2, [sp, #16]
     aa8:	e59d300c 	ldr	r3, [sp, #12]
     aac:	e0637002 	rsb	r7, r3, r2
     ab0:	e3570000 	cmp	r7, #0
     ab4:	b2677000 	rsblt	r7, r7, #0
        int error = -(delta_x / 2);
     ab8:	e0894fa9 	add	r4, r9, r9, lsr #31
     abc:	e1a040c4 	asr	r4, r4, #1
     ac0:	e2644000 	rsb	r4, r4, #0
        int y = y0;

        int y_step = 1;
     ac4:	e1530002 	cmp	r3, r2
     ac8:	a3e02000 	mvnge	r2, #0
     acc:	b3a02001 	movlt	r2, #1
     ad0:	e58d2008 	str	r2, [sp, #8]
	
        if(y0 >= y1) y_step = -1;
	
        for(int x = x0; x < x1; x++) {
     ad4:	e59d3004 	ldr	r3, [sp, #4]
     ad8:	e1530008 	cmp	r3, r8
     adc:	aa00000f 	bge	b20 <draw_line+0x124>
     ae0:	e1a05003 	mov	r5, r3
        }
	
        int delta_x = x1 - x0;
        int delta_y = abs(y1 - y0);
        int error = -(delta_x / 2);
        int y = y0;
     ae4:	e59d600c 	ldr	r6, [sp, #12]
        int y_step = 1;
	
        if(y0 >= y1) y_step = -1;
	
        for(int x = x0; x < x1; x++) {
            if(is_steep){
     ae8:	e35a0000 	cmp	r10, #0
                plot_pixel(y, x, colour);	
     aec:	11a00006 	movne	r0, r6
     af0:	11a01005 	movne	r1, r5
            } else {
                plot_pixel(x, y, colour);
     af4:	01a00005 	moveq	r0, r5
     af8:	01a01006 	moveq	r1, r6
     afc:	e1a0200b 	mov	r2, r11
     b00:	ebffffb6 	bl	9e0 <plot_pixel>
            }
            error = error + delta_y;
            if(error >= 0) {
     b04:	e0944007 	adds	r4, r4, r7
                y = y + y_step;
     b08:	559d2008 	ldrpl	r2, [sp, #8]
     b0c:	50866002 	addpl	r6, r6, r2
                error = error - delta_x;
     b10:	50694004 	rsbpl	r4, r9, r4

        int y_step = 1;
	
        if(y0 >= y1) y_step = -1;
	
        for(int x = x0; x < x1; x++) {
     b14:	e2855001 	add	r5, r5, #1
     b18:	e1580005 	cmp	r8, r5
     b1c:	cafffff1 	bgt	ae8 <draw_line+0xec>
            if(error >= 0) {
                y = y + y_step;
                error = error - delta_x;
            }
        }
        x0 ++;
     b20:	e59d3004 	ldr	r3, [sp, #4]
     b24:	e2833001 	add	r3, r3, #1
     b28:	e58d3004 	str	r3, [sp, #4]
        x1 ++;
     b2c:	e2888001 	add	r8, r8, #1
	_fft(buf_re, buf_im, out_re, out_im, n, 1);
 }

/*****************Helper Functions for Drawing*******************/
void draw_line(int x0, int y0, int x1, int y1, short int colour) {
	for(int i = 0; i < 5; i++) {
     b30:	e59d2014 	ldr	r2, [sp, #20]
     b34:	e2522001 	subs	r2, r2, #1
     b38:	e58d2014 	str	r2, [sp, #20]
     b3c:	1affffb7 	bne	a20 <draw_line+0x24>
            }
        }
        x0 ++;
        x1 ++;
    }
}
     b40:	e28dd01c 	add	sp, sp, #28
     b44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000b48 <clear_screen>:
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
     b48:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     b4c:	e24dd00c 	sub	sp, sp, #12
	for(int x = 0; x < 320; x++){
     b50:	e3a05000 	mov	r5, #0
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
     b54:	e1a07005 	mov	r7, r5
	for(int x = 0; x < 320; x++){
		for(int y = 0; y < 240; y++){
			plot_pixel(x, y, 0xFFFF);	
     b58:	e3e06000 	mvn	r6, #0
     b5c:	ea000009 	b	b88 <clear_screen+0x40>
     b60:	e1a00005 	mov	r0, r5
     b64:	e1a01004 	mov	r1, r4
     b68:	e1a02006 	mov	r2, r6
     b6c:	ebffff9b 	bl	9e0 <plot_pixel>
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
	for(int x = 0; x < 320; x++){
		for(int y = 0; y < 240; y++){
     b70:	e2844001 	add	r4, r4, #1
     b74:	e35400f0 	cmp	r4, #240	; 0xf0
     b78:	1afffff8 	bne	b60 <clear_screen+0x18>
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
	for(int x = 0; x < 320; x++){
     b7c:	e2855001 	add	r5, r5, #1
     b80:	e3550d05 	cmp	r5, #320	; 0x140
     b84:	0a000001 	beq	b90 <clear_screen+0x48>
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
     b88:	e1a04007 	mov	r4, r7
     b8c:	eafffff3 	b	b60 <clear_screen+0x18>
		for(int y = 0; y < 240; y++){
			plot_pixel(x, y, 0xFFFF);	
		}
	}
	
	draw_line(20, 220, 320, 220, 0x0);
     b90:	e3a04000 	mov	r4, #0
     b94:	e58d4000 	str	r4, [sp]
     b98:	e3a00014 	mov	r0, #20
     b9c:	e3a010dc 	mov	r1, #220	; 0xdc
     ba0:	e3a02d05 	mov	r2, #320	; 0x140
     ba4:	e1a03001 	mov	r3, r1
     ba8:	ebffff93 	bl	9fc <draw_line>
	draw_line(20, 0, 20, 220, 0x0);
     bac:	e58d4000 	str	r4, [sp]
     bb0:	e3a00014 	mov	r0, #20
     bb4:	e1a01004 	mov	r1, r4
     bb8:	e1a02000 	mov	r2, r0
     bbc:	e3a030dc 	mov	r3, #220	; 0xdc
     bc0:	ebffff8d 	bl	9fc <draw_line>
}
     bc4:	e28dd00c 	add	sp, sp, #12
     bc8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00000bcc <wait_for_vsync>:

void wait_for_vsync(){
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	register int status;
	
	*pixel_ctrl_ptr = 1; //writes 1 into front buffer register (starts synchro process)
     bcc:	e3033fff 	movw	r3, #16383	; 0x3fff
     bd0:	e34f3f20 	movt	r3, #65312	; 0xff20
     bd4:	e3a02001 	mov	r2, #1
     bd8:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
     bdc:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	
	while((status & 0x01) != 0){
     be0:	e3130001 	tst	r3, #1
     be4:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
     be8:	e3032fff 	movw	r2, #16383	; 0x3fff
     bec:	e34f2f20 	movt	r2, #65312	; 0xff20
     bf0:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	
	*pixel_ctrl_ptr = 1; //writes 1 into front buffer register (starts synchro process)
	
	status = *(pixel_ctrl_ptr + 3);
	
	while((status & 0x01) != 0){
     bf4:	e3130001 	tst	r3, #1
     bf8:	1afffffc 	bne	bf0 <wait_for_vsync+0x24>
     bfc:	e12fff1e 	bx	lr

00000c00 <y_scale>:
// 	if(x > 320) x = 320;
	
// 	return (x);
// }

int y_scale(float y){	
     c00:	e92d4010 	push	{r4, lr}
     c04:	e1a04000 	mov	r4, r0
    if(y > 240) y = 0;                           
     c08:	e3a01000 	mov	r1, #0
     c0c:	e3441370 	movt	r1, #17264	; 0x4370
     c10:	eb0005a0 	bl	2298 <__aeabi_fcmpgt>
     c14:	e3500000 	cmp	r0, #0
     c18:	13a04000 	movne	r4, #0
 	return ((int)(240 - ((240/10)*(y/10))));
     c1c:	e1a00004 	mov	r0, r4
     c20:	e3a01000 	mov	r1, #0
     c24:	e3441120 	movt	r1, #16672	; 0x4120
     c28:	eb000503 	bl	203c <__aeabi_fdiv>
     c2c:	e3a01000 	mov	r1, #0
     c30:	e34411c0 	movt	r1, #16832	; 0x41c0
     c34:	eb00049a 	bl	1ea4 <__aeabi_fmul>
     c38:	e1a01000 	mov	r1, r0
     c3c:	e3a00000 	mov	r0, #0
     c40:	e3440370 	movt	r0, #17264	; 0x4370
     c44:	eb0003ed 	bl	1c00 <__aeabi_fsub>
     c48:	eb000598 	bl	22b0 <__aeabi_f2iz>
}
     c4c:	e8bd8010 	pop	{r4, pc}

00000c50 <main>:
void plot_pixel(int x, int y, short int line_color);
void wait_for_vsync();
int x_scale(int x);
int y_scale(float y);

int main(void) {
     c50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     c54:	e24dda02 	sub	sp, sp, #8192	; 0x2000
     c58:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    /* used for vga display */
    //line colour for graph
    short int line_color = 0xF81F;
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    //set front pixel buffer to start of FPGA On-chip memory
    *(pixel_ctrl_ptr + 1) = 0xC8000000; 
     c5c:	e3034fff 	movw	r4, #16383	; 0x3fff
     c60:	e34f4f20 	movt	r4, #65312	; 0xff20
     c64:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     c68:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    //swapping the front/back buffers, to set the front buffer location
    wait_for_vsync();
     c6c:	ebffffd6 	bl	bcc <wait_for_vsync>
    //initializing a pointer to the pixel buffer, used by the  drawing functions
    pixel_buffer_start = *pixel_ctrl_ptr;
     c70:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
     c74:	e3025bfc 	movw	r5, #11260	; 0x2bfc
     c78:	e3405000 	movt	r5, #0
     c7c:	e5853000 	str	r3, [r5]

    clear_screen(); 
     c80:	ebffffb0 	bl	b48 <clear_screen>

    // pixel_buffer_start points to the pixel buffer
    //set back pixel buffer to start of SDRAM memory 
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
     c84:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     c88:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     c8c:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
     c90:	e5853000 	str	r3, [r5]
    int y_plot, x_plot;

    while (1) {

        //This segment loads the audio buffers
        *(red_LED_ptr) = 0x1; // turn on LEDR[0]
     c94:	e3a00000 	mov	r0, #0
     c98:	e34f0f20 	movt	r0, #65312	; 0xff20
     c9c:	e58d0018 	str	r0, [sp, #24]
        fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     ca0:	e3031fff 	movw	r1, #16383	; 0x3fff
     ca4:	e34f1f20 	movt	r1, #65312	; 0xff20
     ca8:	e58d1014 	str	r1, [sp, #20]
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
                left_buffer_re[buffer_index] = (Re) *(audio_ptr + 2);
     cac:	e3a02a0f 	mov	r2, #61440	; 0xf000
     cb0:	e34f2fff 	movt	r2, #65535	; 0xffff
     cb4:	e58d2020 	str	r2, [sp, #32]
                left_buffer_im[buffer_index] = 0;
     cb8:	e3a03a0e 	mov	r3, #57344	; 0xe000
     cbc:	e34f3fff 	movt	r3, #65535	; 0xffff
     cc0:	e58d3024 	str	r3, [sp, #36]	; 0x24
            } 
            
		}
		
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     cc4:	e58d501c 	str	r5, [sp, #28]
     cc8:	e1a0a008 	mov	r10, r8
    int y_plot, x_plot;

    while (1) {

        //This segment loads the audio buffers
        *(red_LED_ptr) = 0x1; // turn on LEDR[0]
     ccc:	e3a02001 	mov	r2, #1
     cd0:	e59d1018 	ldr	r1, [sp, #24]
     cd4:	e5812000 	str	r2, [r1]
        fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     cd8:	e59d0014 	ldr	r0, [sp, #20]
     cdc:	e5103fbb 	ldr	r3, [r0, #-4027]	; 0xfffff045
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
     ce0:	e6ef3073 	uxtb	r3, r3
     ce4:	e3530020 	cmp	r3, #32
     ce8:	da000015 	ble	d44 <main+0xf4>
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
     cec:	e3530000 	cmp	r3, #0
     cf0:	1a000106 	bne	1110 <main+0x4c0>
     cf4:	ea000012 	b	d44 <main+0xf4>
                left_buffer_re[buffer_index] = (Re) *(audio_ptr + 2);
     cf8:	e5170fb7 	ldr	r0, [r7, #-4023]	; 0xfffff049
     cfc:	eb0001e6 	bl	149c <__aeabi_i2d>
     d00:	e1e400f8 	strd	r0, [r4, #8]!
                left_buffer_im[buffer_index] = 0;
     d04:	e3a02000 	mov	r2, #0
     d08:	e3a03000 	mov	r3, #0
     d0c:	e1e620f8 	strd	r2, [r6, #8]!
                //right_buffer_re[buffer_index] = (Re) *(audio_ptr + 3);
                //right_buffer_im[buffer_index] = 0;
                ++buffer_index;
                if (buffer_index == BUF_SIZE) {
     d10:	e1540005 	cmp	r4, r5
     d14:	1a000005 	bne	d30 <main+0xe0>
                    // done recording
                    *(red_LED_ptr) = 0x0; // turn off LEDR
     d18:	e3a03000 	mov	r3, #0
     d1c:	e59d0018 	ldr	r0, [sp, #24]
     d20:	e5803000 	str	r3, [r0]
                }
                fifospace = *(audio_ptr + 1); // read the audio port fifospace register
     d24:	e59d1014 	ldr	r1, [sp, #20]
     d28:	e5113fbb 	ldr	r3, [r1, #-4027]	; 0xfffff045
     d2c:	ea000004 	b	d44 <main+0xf4>
     d30:	e5173fbb 	ldr	r3, [r7, #-4027]	; 0xfffff045
        fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
     d34:	e31300ff 	tst	r3, #255	; 0xff
     d38:	0a000001 	beq	d44 <main+0xf4>
     d3c:	e1550004 	cmp	r5, r4
     d40:	1affffec 	bne	cf8 <main+0xa8>
                fifospace = *(audio_ptr + 1); // read the audio port fifospace register
            }
        }

        // Use Left channel
        fft(left_buffer_re, left_buffer_im, BUF_SIZE);
     d44:	e28d0a01 	add	r0, sp, #4096	; 0x1000
     d48:	e2800028 	add	r0, r0, #40	; 0x28
     d4c:	e28d1028 	add	r1, sp, #40	; 0x28
     d50:	e3a02c02 	mov	r2, #512	; 0x200
     d54:	ebffff07 	bl	978 <fft>

         /*******************ANIMATION PART********************/
        clear_screen();
     d58:	ebffff7a 	bl	b48 <clear_screen>
     d5c:	e3a07000 	mov	r7, #0
    
        //sorting frequencies into 32 bins to plot
		for(int i = 0; i < BUF_SIZE; i++){
     d60:	e1a06007 	mov	r6, r7
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
            } 
            //frequency bin 5
            else if(i >= 248 && i<310){
                x_plot = 40;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     d64:	e28d8a01 	add	r8, sp, #4096	; 0x1000
     d68:	e2888028 	add	r8, r8, #40	; 0x28
                y_plot += y_scale(value);
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
     d6c:	e3a0b0dc 	mov	r11, #220	; 0xdc
        clear_screen();
    
        //sorting frequencies into 32 bins to plot
		for(int i = 0; i < BUF_SIZE; i++){
            //frequency bin 1
            if(i<62){
     d70:	e356003d 	cmp	r6, #61	; 0x3d
     d74:	ca00001c 	bgt	dec <main+0x19c>
                x_plot = 0;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     d78:	e18720d8 	ldrd	r2, [r7, r8]
     d7c:	e2871028 	add	r1, r7, #40	; 0x28
     d80:	e1a0000d 	mov	r0, sp
     d84:	e18140d0 	ldrd	r4, [r1, r0]
     d88:	e1a00002 	mov	r0, r2
     d8c:	e1a01003 	mov	r1, r3
     d90:	eb0001f8 	bl	1578 <__aeabi_dmul>
     d94:	e1cd00f8 	strd	r0, [sp, #8]
     d98:	e1a00004 	mov	r0, r4
     d9c:	e1a01005 	mov	r1, r5
     da0:	e1a02004 	mov	r2, r4
     da4:	e1a03005 	mov	r3, r5
     da8:	eb0001f2 	bl	1578 <__aeabi_dmul>
     dac:	e1a02000 	mov	r2, r0
     db0:	e1a03001 	mov	r3, r1
     db4:	e1cd00d8 	ldrd	r0, [sp, #8]
     db8:	eb0000ea 	bl	1168 <__adddf3>
     dbc:	ebfffe26 	bl	65c <sqrt>
                y_plot += y_scale(value);
     dc0:	eb000364 	bl	1b58 <__aeabi_d2f>
     dc4:	ebffff8d 	bl	c00 <y_scale>
     dc8:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
     dcc:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
     dd0:	e58d2000 	str	r2, [sp]
     dd4:	e3a00000 	mov	r0, #0
     dd8:	e1a0100a 	mov	r1, r10
     ddc:	e1a02000 	mov	r2, r0
     de0:	e1a0300b 	mov	r3, r11
     de4:	ebffff04 	bl	9fc <draw_line>
     de8:	ea00007e 	b	fe8 <main+0x398>
            } 
            //frequency bin 2
            else if(i >= 62 && i<124){
     dec:	e246303e 	sub	r3, r6, #62	; 0x3e
     df0:	e353003d 	cmp	r3, #61	; 0x3d
     df4:	8a00001c 	bhi	e6c <main+0x21c>
                x_plot = 10;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     df8:	e18720d8 	ldrd	r2, [r7, r8]
     dfc:	e2871028 	add	r1, r7, #40	; 0x28
     e00:	e1a0000d 	mov	r0, sp
     e04:	e18140d0 	ldrd	r4, [r1, r0]
     e08:	e1a00002 	mov	r0, r2
     e0c:	e1a01003 	mov	r1, r3
     e10:	eb0001d8 	bl	1578 <__aeabi_dmul>
     e14:	e1cd00f8 	strd	r0, [sp, #8]
     e18:	e1a00004 	mov	r0, r4
     e1c:	e1a01005 	mov	r1, r5
     e20:	e1a02004 	mov	r2, r4
     e24:	e1a03005 	mov	r3, r5
     e28:	eb0001d2 	bl	1578 <__aeabi_dmul>
     e2c:	e1a02000 	mov	r2, r0
     e30:	e1a03001 	mov	r3, r1
     e34:	e1cd00d8 	ldrd	r0, [sp, #8]
     e38:	eb0000ca 	bl	1168 <__adddf3>
     e3c:	ebfffe06 	bl	65c <sqrt>
                y_plot += y_scale(value);
     e40:	eb000344 	bl	1b58 <__aeabi_d2f>
     e44:	ebffff6d 	bl	c00 <y_scale>
     e48:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
     e4c:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
     e50:	e58d2000 	str	r2, [sp]
     e54:	e3a0000a 	mov	r0, #10
     e58:	e1a0100a 	mov	r1, r10
     e5c:	e1a02000 	mov	r2, r0
     e60:	e1a0300b 	mov	r3, r11
     e64:	ebfffee4 	bl	9fc <draw_line>
     e68:	ea00005e 	b	fe8 <main+0x398>
            } 
            //frequency bin 3
            else if(i >= 124 && i<186){
     e6c:	e246307c 	sub	r3, r6, #124	; 0x7c
     e70:	e353003d 	cmp	r3, #61	; 0x3d
     e74:	8a00001c 	bhi	eec <main+0x29c>
                x_plot = 20;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     e78:	e18720d8 	ldrd	r2, [r7, r8]
     e7c:	e2871028 	add	r1, r7, #40	; 0x28
     e80:	e1a0000d 	mov	r0, sp
     e84:	e18140d0 	ldrd	r4, [r1, r0]
     e88:	e1a00002 	mov	r0, r2
     e8c:	e1a01003 	mov	r1, r3
     e90:	eb0001b8 	bl	1578 <__aeabi_dmul>
     e94:	e1cd00f8 	strd	r0, [sp, #8]
     e98:	e1a00004 	mov	r0, r4
     e9c:	e1a01005 	mov	r1, r5
     ea0:	e1a02004 	mov	r2, r4
     ea4:	e1a03005 	mov	r3, r5
     ea8:	eb0001b2 	bl	1578 <__aeabi_dmul>
     eac:	e1a02000 	mov	r2, r0
     eb0:	e1a03001 	mov	r3, r1
     eb4:	e1cd00d8 	ldrd	r0, [sp, #8]
     eb8:	eb0000aa 	bl	1168 <__adddf3>
     ebc:	ebfffde6 	bl	65c <sqrt>
                y_plot += y_scale(value);
     ec0:	eb000324 	bl	1b58 <__aeabi_d2f>
     ec4:	ebffff4d 	bl	c00 <y_scale>
     ec8:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
     ecc:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
     ed0:	e58d2000 	str	r2, [sp]
     ed4:	e3a00014 	mov	r0, #20
     ed8:	e1a0100a 	mov	r1, r10
     edc:	e1a02000 	mov	r2, r0
     ee0:	e1a0300b 	mov	r3, r11
     ee4:	ebfffec4 	bl	9fc <draw_line>
     ee8:	ea00003e 	b	fe8 <main+0x398>
            } 
            //frequency bin 4
            else if(i >= 186 && i<248){
     eec:	e24630ba 	sub	r3, r6, #186	; 0xba
     ef0:	e353003d 	cmp	r3, #61	; 0x3d
     ef4:	8a00001c 	bhi	f6c <main+0x31c>
                x_plot = 30;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     ef8:	e18720d8 	ldrd	r2, [r7, r8]
     efc:	e2871028 	add	r1, r7, #40	; 0x28
     f00:	e1a0000d 	mov	r0, sp
     f04:	e18140d0 	ldrd	r4, [r1, r0]
     f08:	e1a00002 	mov	r0, r2
     f0c:	e1a01003 	mov	r1, r3
     f10:	eb000198 	bl	1578 <__aeabi_dmul>
     f14:	e1cd00f8 	strd	r0, [sp, #8]
     f18:	e1a00004 	mov	r0, r4
     f1c:	e1a01005 	mov	r1, r5
     f20:	e1a02004 	mov	r2, r4
     f24:	e1a03005 	mov	r3, r5
     f28:	eb000192 	bl	1578 <__aeabi_dmul>
     f2c:	e1a02000 	mov	r2, r0
     f30:	e1a03001 	mov	r3, r1
     f34:	e1cd00d8 	ldrd	r0, [sp, #8]
     f38:	eb00008a 	bl	1168 <__adddf3>
     f3c:	ebfffdc6 	bl	65c <sqrt>
                y_plot += y_scale(value);
     f40:	eb000304 	bl	1b58 <__aeabi_d2f>
     f44:	ebffff2d 	bl	c00 <y_scale>
     f48:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
     f4c:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
     f50:	e58d2000 	str	r2, [sp]
     f54:	e3a0001e 	mov	r0, #30
     f58:	e1a0100a 	mov	r1, r10
     f5c:	e1a02000 	mov	r2, r0
     f60:	e1a0300b 	mov	r3, r11
     f64:	ebfffea4 	bl	9fc <draw_line>
     f68:	ea00001e 	b	fe8 <main+0x398>
            } 
            //frequency bin 5
            else if(i >= 248 && i<310){
     f6c:	e24620f8 	sub	r2, r6, #248	; 0xf8
     f70:	e352003d 	cmp	r2, #61	; 0x3d
     f74:	8a00001b 	bhi	fe8 <main+0x398>
                x_plot = 40;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     f78:	e18720d8 	ldrd	r2, [r7, r8]
     f7c:	e2871028 	add	r1, r7, #40	; 0x28
     f80:	e1a0000d 	mov	r0, sp
     f84:	e18140d0 	ldrd	r4, [r1, r0]
     f88:	e1a00002 	mov	r0, r2
     f8c:	e1a01003 	mov	r1, r3
     f90:	eb000178 	bl	1578 <__aeabi_dmul>
     f94:	e1cd00f8 	strd	r0, [sp, #8]
     f98:	e1a00004 	mov	r0, r4
     f9c:	e1a01005 	mov	r1, r5
     fa0:	e1a02004 	mov	r2, r4
     fa4:	e1a03005 	mov	r3, r5
     fa8:	eb000172 	bl	1578 <__aeabi_dmul>
     fac:	e1a02000 	mov	r2, r0
     fb0:	e1a03001 	mov	r3, r1
     fb4:	e1cd00d8 	ldrd	r0, [sp, #8]
     fb8:	eb00006a 	bl	1168 <__adddf3>
     fbc:	ebfffda6 	bl	65c <sqrt>
                y_plot += y_scale(value);
     fc0:	eb0002e4 	bl	1b58 <__aeabi_d2f>
     fc4:	ebffff0d 	bl	c00 <y_scale>
     fc8:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
     fcc:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
     fd0:	e58d2000 	str	r2, [sp]
     fd4:	e3a00028 	mov	r0, #40	; 0x28
     fd8:	e1a0100a 	mov	r1, r10
     fdc:	e1a02000 	mov	r2, r0
     fe0:	e1a0300b 	mov	r3, r11
     fe4:	ebfffe84 	bl	9fc <draw_line>
void plot_pixel(int x, int y, short int line_color);
void wait_for_vsync();
int x_scale(int x);
int y_scale(float y);

int main(void) {
     fe8:	e1a09006 	mov	r9, r6
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
                y_plot += y_scale(value);
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
            } 
            //frequency bin 6
            if(i >= 310 && i<372){
     fec:	e2463f4d 	sub	r3, r6, #308	; 0x134
     ff0:	e2433002 	sub	r3, r3, #2
     ff4:	e353003d 	cmp	r3, #61	; 0x3d
     ff8:	8a00001b 	bhi	106c <main+0x41c>
                x_plot = 50;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
     ffc:	e18720d8 	ldrd	r2, [r7, r8]
    1000:	e2871028 	add	r1, r7, #40	; 0x28
    1004:	e1a0000d 	mov	r0, sp
    1008:	e18140d0 	ldrd	r4, [r1, r0]
    100c:	e1a00002 	mov	r0, r2
    1010:	e1a01003 	mov	r1, r3
    1014:	eb000157 	bl	1578 <__aeabi_dmul>
    1018:	e1cd00f8 	strd	r0, [sp, #8]
    101c:	e1a00004 	mov	r0, r4
    1020:	e1a01005 	mov	r1, r5
    1024:	e1a02004 	mov	r2, r4
    1028:	e1a03005 	mov	r3, r5
    102c:	eb000151 	bl	1578 <__aeabi_dmul>
    1030:	e1a02000 	mov	r2, r0
    1034:	e1a03001 	mov	r3, r1
    1038:	e1cd00d8 	ldrd	r0, [sp, #8]
    103c:	eb000049 	bl	1168 <__adddf3>
    1040:	ebfffd85 	bl	65c <sqrt>
                y_plot += y_scale(value);
    1044:	eb0002c3 	bl	1b58 <__aeabi_d2f>
    1048:	ebfffeec 	bl	c00 <y_scale>
    104c:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
    1050:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
    1054:	e58d2000 	str	r2, [sp]
    1058:	e3a00032 	mov	r0, #50	; 0x32
    105c:	e1a0100a 	mov	r1, r10
    1060:	e1a02000 	mov	r2, r0
    1064:	e1a0300b 	mov	r3, r11
    1068:	ebfffe63 	bl	9fc <draw_line>
            } 
            //frequency bin 7
            if(i >= 372 && i<434){
    106c:	e2499f5d 	sub	r9, r9, #372	; 0x174
    1070:	e359003d 	cmp	r9, #61	; 0x3d
    1074:	8a00001b 	bhi	10e8 <main+0x498>
                x_plot = 60;
                double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
    1078:	e18720d8 	ldrd	r2, [r7, r8]
    107c:	e2871028 	add	r1, r7, #40	; 0x28
    1080:	e1a0000d 	mov	r0, sp
    1084:	e18140d0 	ldrd	r4, [r1, r0]
    1088:	e1a00002 	mov	r0, r2
    108c:	e1a01003 	mov	r1, r3
    1090:	eb000138 	bl	1578 <__aeabi_dmul>
    1094:	e1cd00f8 	strd	r0, [sp, #8]
    1098:	e1a00004 	mov	r0, r4
    109c:	e1a01005 	mov	r1, r5
    10a0:	e1a02004 	mov	r2, r4
    10a4:	e1a03005 	mov	r3, r5
    10a8:	eb000132 	bl	1578 <__aeabi_dmul>
    10ac:	e1a02000 	mov	r2, r0
    10b0:	e1a03001 	mov	r3, r1
    10b4:	e1cd00d8 	ldrd	r0, [sp, #8]
    10b8:	eb00002a 	bl	1168 <__adddf3>
    10bc:	ebfffd66 	bl	65c <sqrt>
                y_plot += y_scale(value);
    10c0:	eb0002a4 	bl	1b58 <__aeabi_d2f>
    10c4:	ebfffecd 	bl	c00 <y_scale>
    10c8:	e08aa000 	add	r10, r10, r0
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
    10cc:	e3e02e7e 	mvn	r2, #2016	; 0x7e0
    10d0:	e58d2000 	str	r2, [sp]
    10d4:	e3a0003c 	mov	r0, #60	; 0x3c
    10d8:	e1a0100a 	mov	r1, r10
    10dc:	e1a02000 	mov	r2, r0
    10e0:	e1a0300b 	mov	r3, r11
    10e4:	ebfffe44 	bl	9fc <draw_line>

         /*******************ANIMATION PART********************/
        clear_screen();
    
        //sorting frequencies into 32 bins to plot
		for(int i = 0; i < BUF_SIZE; i++){
    10e8:	e2866001 	add	r6, r6, #1
    10ec:	e2877008 	add	r7, r7, #8
    10f0:	e3560c02 	cmp	r6, #512	; 0x200
    10f4:	1affff1d 	bne	d70 <main+0x120>
                draw_line(x_plot, y_plot, x_plot, 220, line_color);
            } 
            
		}
		
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    10f8:	ebfffeb3 	bl	bcc <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    10fc:	e59d0014 	ldr	r0, [sp, #20]
    1100:	e5103fdb 	ldr	r3, [r0, #-4059]	; 0xfffff025
    1104:	e59d101c 	ldr	r1, [sp, #28]
    1108:	e5813000 	str	r3, [r1]
        // for(int i = 0; i < BUF_SIZE; i++) {
	    // double value = sqrt(left_buffer_re[i]*left_buffer_re[i] + left_buffer_im[i]*left_buffer_im[i]);
	    // printf("%lf ", value);
        // }
        // printf("\n");
    }
    110c:	eafffeee 	b	ccc <main+0x7c>
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
                left_buffer_re[buffer_index] = (Re) *(audio_ptr + 2);
    1110:	e59d2014 	ldr	r2, [sp, #20]
    1114:	e5120fb7 	ldr	r0, [r2, #-4023]	; 0xfffff049
    1118:	eb0000df 	bl	149c <__aeabi_i2d>
    111c:	e28d2a02 	add	r2, sp, #8192	; 0x2000
    1120:	e2822028 	add	r2, r2, #40	; 0x28
    1124:	e59d3020 	ldr	r3, [sp, #32]
    1128:	e18200f3 	strd	r0, [r2, r3]
                left_buffer_im[buffer_index] = 0;
    112c:	e3a00000 	mov	r0, #0
    1130:	e3a01000 	mov	r1, #0
    1134:	e1a03002 	mov	r3, r2
    1138:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    113c:	e18300f2 	strd	r0, [r3, r2]
    1140:	e28d4a01 	add	r4, sp, #4096	; 0x1000
    1144:	e2844028 	add	r4, r4, #40	; 0x28
    1148:	e28d6028 	add	r6, sp, #40	; 0x28
void plot_pixel(int x, int y, short int line_color);
void wait_for_vsync();
int x_scale(int x);
int y_scale(float y);

int main(void) {
    114c:	e28d5a02 	add	r5, sp, #8192	; 0x2000
    1150:	e2855020 	add	r5, r5, #32
    1154:	e59d7014 	ldr	r7, [sp, #20]
    1158:	eafffef4 	b	d30 <main+0xe0>

0000115c <__aeabi_drsub>:
    115c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1160:	ea000000 	b	1168 <__adddf3>

00001164 <__aeabi_dsub>:
    1164:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001168 <__adddf3>:
    1168:	e92d4030 	push	{r4, r5, lr}
    116c:	e1a04081 	lsl	r4, r1, #1
    1170:	e1a05083 	lsl	r5, r3, #1
    1174:	e1340005 	teq	r4, r5
    1178:	01300002 	teqeq	r0, r2
    117c:	1194c000 	orrsne	r12, r4, r0
    1180:	1195c002 	orrsne	r12, r5, r2
    1184:	11f0cac4 	mvnsne	r12, r4, asr #21
    1188:	11f0cac5 	mvnsne	r12, r5, asr #21
    118c:	0a00008c 	beq	13c4 <__adddf3+0x25c>
    1190:	e1a04aa4 	lsr	r4, r4, #21
    1194:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1198:	b2655000 	rsblt	r5, r5, #0
    119c:	da000006 	ble	11bc <__adddf3+0x54>
    11a0:	e0844005 	add	r4, r4, r5
    11a4:	e0202002 	eor	r2, r0, r2
    11a8:	e0213003 	eor	r3, r1, r3
    11ac:	e0220000 	eor	r0, r2, r0
    11b0:	e0231001 	eor	r1, r3, r1
    11b4:	e0202002 	eor	r2, r0, r2
    11b8:	e0213003 	eor	r3, r1, r3
    11bc:	e3550036 	cmp	r5, #54	; 0x36
    11c0:	88bd4030 	pophi	{r4, r5, lr}
    11c4:	812fff1e 	bxhi	lr
    11c8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    11cc:	e1a01601 	lsl	r1, r1, #12
    11d0:	e3a0c601 	mov	r12, #1048576	; 0x100000
    11d4:	e18c1621 	orr	r1, r12, r1, lsr #12
    11d8:	0a000001 	beq	11e4 <__adddf3+0x7c>
    11dc:	e2700000 	rsbs	r0, r0, #0
    11e0:	e2e11000 	rsc	r1, r1, #0
    11e4:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    11e8:	e1a03603 	lsl	r3, r3, #12
    11ec:	e18c3623 	orr	r3, r12, r3, lsr #12
    11f0:	0a000001 	beq	11fc <__adddf3+0x94>
    11f4:	e2722000 	rsbs	r2, r2, #0
    11f8:	e2e33000 	rsc	r3, r3, #0
    11fc:	e1340005 	teq	r4, r5
    1200:	0a000069 	beq	13ac <__adddf3+0x244>
    1204:	e2444001 	sub	r4, r4, #1
    1208:	e275e020 	rsbs	lr, r5, #32
    120c:	ba000005 	blt	1228 <__adddf3+0xc0>
    1210:	e1a0ce12 	lsl	r12, r2, lr
    1214:	e0900532 	adds	r0, r0, r2, lsr r5
    1218:	e2a11000 	adc	r1, r1, #0
    121c:	e0900e13 	adds	r0, r0, r3, lsl lr
    1220:	e0b11553 	adcs	r1, r1, r3, asr r5
    1224:	ea000006 	b	1244 <__adddf3+0xdc>
    1228:	e2455020 	sub	r5, r5, #32
    122c:	e28ee020 	add	lr, lr, #32
    1230:	e3520001 	cmp	r2, #1
    1234:	e1a0ce13 	lsl	r12, r3, lr
    1238:	238cc002 	orrcs	r12, r12, #2
    123c:	e0900553 	adds	r0, r0, r3, asr r5
    1240:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1244:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1248:	5a000002 	bpl	1258 <__adddf3+0xf0>
    124c:	e27cc000 	rsbs	r12, r12, #0
    1250:	e2f00000 	rscs	r0, r0, #0
    1254:	e2e11000 	rsc	r1, r1, #0
    1258:	e3510601 	cmp	r1, #1048576	; 0x100000
    125c:	3a00000f 	bcc	12a0 <__adddf3+0x138>
    1260:	e3510602 	cmp	r1, #2097152	; 0x200000
    1264:	3a000006 	bcc	1284 <__adddf3+0x11c>
    1268:	e1b010a1 	lsrs	r1, r1, #1
    126c:	e1b00060 	rrxs	r0, r0
    1270:	e1a0c06c 	rrx	r12, r12
    1274:	e2844001 	add	r4, r4, #1
    1278:	e1a02a84 	lsl	r2, r4, #21
    127c:	e3720501 	cmn	r2, #4194304	; 0x400000
    1280:	2a00006b 	bcs	1434 <__adddf3+0x2cc>
    1284:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1288:	01b0c0a0 	lsrseq	r12, r0, #1
    128c:	e2b00000 	adcs	r0, r0, #0
    1290:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1294:	e1811005 	orr	r1, r1, r5
    1298:	e8bd4030 	pop	{r4, r5, lr}
    129c:	e12fff1e 	bx	lr
    12a0:	e1b0c08c 	lsls	r12, r12, #1
    12a4:	e0b00000 	adcs	r0, r0, r0
    12a8:	e0a11001 	adc	r1, r1, r1
    12ac:	e3110601 	tst	r1, #1048576	; 0x100000
    12b0:	e2444001 	sub	r4, r4, #1
    12b4:	1afffff2 	bne	1284 <__adddf3+0x11c>
    12b8:	e3310000 	teq	r1, #0
    12bc:	13a03014 	movne	r3, #20
    12c0:	03a03034 	moveq	r3, #52	; 0x34
    12c4:	01a01000 	moveq	r1, r0
    12c8:	03a00000 	moveq	r0, #0
    12cc:	e1a02001 	mov	r2, r1
    12d0:	e3520801 	cmp	r2, #65536	; 0x10000
    12d4:	21a02822 	lsrcs	r2, r2, #16
    12d8:	22433010 	subcs	r3, r3, #16
    12dc:	e3520c01 	cmp	r2, #256	; 0x100
    12e0:	21a02422 	lsrcs	r2, r2, #8
    12e4:	22433008 	subcs	r3, r3, #8
    12e8:	e3520010 	cmp	r2, #16
    12ec:	21a02222 	lsrcs	r2, r2, #4
    12f0:	22433004 	subcs	r3, r3, #4
    12f4:	e3520004 	cmp	r2, #4
    12f8:	22433002 	subcs	r3, r3, #2
    12fc:	304330a2 	subcc	r3, r3, r2, lsr #1
    1300:	e04331a2 	sub	r3, r3, r2, lsr #3
    1304:	e2532020 	subs	r2, r3, #32
    1308:	aa000007 	bge	132c <__adddf3+0x1c4>
    130c:	e292200c 	adds	r2, r2, #12
    1310:	da000004 	ble	1328 <__adddf3+0x1c0>
    1314:	e282c014 	add	r12, r2, #20
    1318:	e262200c 	rsb	r2, r2, #12
    131c:	e1a00c11 	lsl	r0, r1, r12
    1320:	e1a01231 	lsr	r1, r1, r2
    1324:	ea000004 	b	133c <__adddf3+0x1d4>
    1328:	e2822014 	add	r2, r2, #20
    132c:	d262c020 	rsble	r12, r2, #32
    1330:	e1a01211 	lsl	r1, r1, r2
    1334:	d1811c30 	orrle	r1, r1, r0, lsr r12
    1338:	d1a00210 	lslle	r0, r0, r2
    133c:	e0544003 	subs	r4, r4, r3
    1340:	a0811a04 	addge	r1, r1, r4, lsl #20
    1344:	a1811005 	orrge	r1, r1, r5
    1348:	a8bd4030 	popge	{r4, r5, lr}
    134c:	a12fff1e 	bxge	lr
    1350:	e1e04004 	mvn	r4, r4
    1354:	e254401f 	subs	r4, r4, #31
    1358:	aa00000f 	bge	139c <__adddf3+0x234>
    135c:	e294400c 	adds	r4, r4, #12
    1360:	ca000006 	bgt	1380 <__adddf3+0x218>
    1364:	e2844014 	add	r4, r4, #20
    1368:	e2642020 	rsb	r2, r4, #32
    136c:	e1a00430 	lsr	r0, r0, r4
    1370:	e1800211 	orr	r0, r0, r1, lsl r2
    1374:	e1851431 	orr	r1, r5, r1, lsr r4
    1378:	e8bd4030 	pop	{r4, r5, lr}
    137c:	e12fff1e 	bx	lr
    1380:	e264400c 	rsb	r4, r4, #12
    1384:	e2642020 	rsb	r2, r4, #32
    1388:	e1a00230 	lsr	r0, r0, r2
    138c:	e1800411 	orr	r0, r0, r1, lsl r4
    1390:	e1a01005 	mov	r1, r5
    1394:	e8bd4030 	pop	{r4, r5, lr}
    1398:	e12fff1e 	bx	lr
    139c:	e1a00431 	lsr	r0, r1, r4
    13a0:	e1a01005 	mov	r1, r5
    13a4:	e8bd4030 	pop	{r4, r5, lr}
    13a8:	e12fff1e 	bx	lr
    13ac:	e3340000 	teq	r4, #0
    13b0:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    13b4:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    13b8:	02844001 	addeq	r4, r4, #1
    13bc:	12455001 	subne	r5, r5, #1
    13c0:	eaffff8f 	b	1204 <__adddf3+0x9c>
    13c4:	e1f0cac4 	mvns	r12, r4, asr #21
    13c8:	11f0cac5 	mvnsne	r12, r5, asr #21
    13cc:	0a00001d 	beq	1448 <__adddf3+0x2e0>
    13d0:	e1340005 	teq	r4, r5
    13d4:	01300002 	teqeq	r0, r2
    13d8:	0a000004 	beq	13f0 <__adddf3+0x288>
    13dc:	e194c000 	orrs	r12, r4, r0
    13e0:	01a01003 	moveq	r1, r3
    13e4:	01a00002 	moveq	r0, r2
    13e8:	e8bd4030 	pop	{r4, r5, lr}
    13ec:	e12fff1e 	bx	lr
    13f0:	e1310003 	teq	r1, r3
    13f4:	13a01000 	movne	r1, #0
    13f8:	13a00000 	movne	r0, #0
    13fc:	18bd4030 	popne	{r4, r5, lr}
    1400:	112fff1e 	bxne	lr
    1404:	e1b0caa4 	lsrs	r12, r4, #21
    1408:	1a000004 	bne	1420 <__adddf3+0x2b8>
    140c:	e1b00080 	lsls	r0, r0, #1
    1410:	e0b11001 	adcs	r1, r1, r1
    1414:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1418:	e8bd4030 	pop	{r4, r5, lr}
    141c:	e12fff1e 	bx	lr
    1420:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1424:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1428:	38bd4030 	popcc	{r4, r5, lr}
    142c:	312fff1e 	bxcc	lr
    1430:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1434:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1438:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    143c:	e3a00000 	mov	r0, #0
    1440:	e8bd4030 	pop	{r4, r5, lr}
    1444:	e12fff1e 	bx	lr
    1448:	e1f0cac4 	mvns	r12, r4, asr #21
    144c:	11a01003 	movne	r1, r3
    1450:	11a00002 	movne	r0, r2
    1454:	01f0cac5 	mvnseq	r12, r5, asr #21
    1458:	11a03001 	movne	r3, r1
    145c:	11a02000 	movne	r2, r0
    1460:	e1904601 	orrs	r4, r0, r1, lsl #12
    1464:	01925603 	orrseq	r5, r2, r3, lsl #12
    1468:	01310003 	teqeq	r1, r3
    146c:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1470:	e8bd4030 	pop	{r4, r5, lr}
    1474:	e12fff1e 	bx	lr

00001478 <__aeabi_ui2d>:
    1478:	e3300000 	teq	r0, #0
    147c:	03a01000 	moveq	r1, #0
    1480:	012fff1e 	bxeq	lr
    1484:	e92d4030 	push	{r4, r5, lr}
    1488:	e3a04b01 	mov	r4, #1024	; 0x400
    148c:	e2844032 	add	r4, r4, #50	; 0x32
    1490:	e3a05000 	mov	r5, #0
    1494:	e3a01000 	mov	r1, #0
    1498:	eaffff86 	b	12b8 <__adddf3+0x150>

0000149c <__aeabi_i2d>:
    149c:	e3300000 	teq	r0, #0
    14a0:	03a01000 	moveq	r1, #0
    14a4:	012fff1e 	bxeq	lr
    14a8:	e92d4030 	push	{r4, r5, lr}
    14ac:	e3a04b01 	mov	r4, #1024	; 0x400
    14b0:	e2844032 	add	r4, r4, #50	; 0x32
    14b4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    14b8:	42600000 	rsbmi	r0, r0, #0
    14bc:	e3a01000 	mov	r1, #0
    14c0:	eaffff7c 	b	12b8 <__adddf3+0x150>

000014c4 <__aeabi_f2d>:
    14c4:	e1b02080 	lsls	r2, r0, #1
    14c8:	e1a011c2 	asr	r1, r2, #3
    14cc:	e1a01061 	rrx	r1, r1
    14d0:	e1a00e02 	lsl	r0, r2, #28
    14d4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    14d8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    14dc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    14e0:	112fff1e 	bxne	lr
    14e4:	e3320000 	teq	r2, #0
    14e8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    14ec:	012fff1e 	bxeq	lr
    14f0:	e92d4030 	push	{r4, r5, lr}
    14f4:	e3a04d0e 	mov	r4, #896	; 0x380
    14f8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    14fc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1500:	eaffff6c 	b	12b8 <__adddf3+0x150>

00001504 <__aeabi_ul2d>:
    1504:	e1902001 	orrs	r2, r0, r1
    1508:	012fff1e 	bxeq	lr
    150c:	e92d4030 	push	{r4, r5, lr}
    1510:	e3a05000 	mov	r5, #0
    1514:	ea000006 	b	1534 <__aeabi_l2d+0x1c>

00001518 <__aeabi_l2d>:
    1518:	e1902001 	orrs	r2, r0, r1
    151c:	012fff1e 	bxeq	lr
    1520:	e92d4030 	push	{r4, r5, lr}
    1524:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1528:	5a000001 	bpl	1534 <__aeabi_l2d+0x1c>
    152c:	e2700000 	rsbs	r0, r0, #0
    1530:	e2e11000 	rsc	r1, r1, #0
    1534:	e3a04b01 	mov	r4, #1024	; 0x400
    1538:	e2844032 	add	r4, r4, #50	; 0x32
    153c:	e1b0cb21 	lsrs	r12, r1, #22
    1540:	0affff44 	beq	1258 <__adddf3+0xf0>
    1544:	e3a02003 	mov	r2, #3
    1548:	e1b0c1ac 	lsrs	r12, r12, #3
    154c:	12822003 	addne	r2, r2, #3
    1550:	e1b0c1ac 	lsrs	r12, r12, #3
    1554:	12822003 	addne	r2, r2, #3
    1558:	e08221ac 	add	r2, r2, r12, lsr #3
    155c:	e2623020 	rsb	r3, r2, #32
    1560:	e1a0c310 	lsl	r12, r0, r3
    1564:	e1a00230 	lsr	r0, r0, r2
    1568:	e1800311 	orr	r0, r0, r1, lsl r3
    156c:	e1a01231 	lsr	r1, r1, r2
    1570:	e0844002 	add	r4, r4, r2
    1574:	eaffff37 	b	1258 <__adddf3+0xf0>

00001578 <__aeabi_dmul>:
    1578:	e92d4070 	push	{r4, r5, r6, lr}
    157c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1580:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1584:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1588:	101c5a23 	andsne	r5, r12, r3, lsr #20
    158c:	1134000c 	teqne	r4, r12
    1590:	1135000c 	teqne	r5, r12
    1594:	0b000075 	bleq	1770 <__aeabi_dmul+0x1f8>
    1598:	e0844005 	add	r4, r4, r5
    159c:	e0216003 	eor	r6, r1, r3
    15a0:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    15a4:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    15a8:	e1905601 	orrs	r5, r0, r1, lsl #12
    15ac:	11925603 	orrsne	r5, r2, r3, lsl #12
    15b0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    15b4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    15b8:	0a00001d 	beq	1634 <__aeabi_dmul+0xbc>
    15bc:	e08ec290 	umull	r12, lr, r0, r2
    15c0:	e3a05000 	mov	r5, #0
    15c4:	e0a5e291 	umlal	lr, r5, r1, r2
    15c8:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    15cc:	e0a5e390 	umlal	lr, r5, r0, r3
    15d0:	e3a06000 	mov	r6, #0
    15d4:	e0a65391 	umlal	r5, r6, r1, r3
    15d8:	e33c0000 	teq	r12, #0
    15dc:	138ee001 	orrne	lr, lr, #1
    15e0:	e24440ff 	sub	r4, r4, #255	; 0xff
    15e4:	e3560c02 	cmp	r6, #512	; 0x200
    15e8:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    15ec:	2a000002 	bcs	15fc <__aeabi_dmul+0x84>
    15f0:	e1b0e08e 	lsls	lr, lr, #1
    15f4:	e0b55005 	adcs	r5, r5, r5
    15f8:	e0a66006 	adc	r6, r6, r6
    15fc:	e1821586 	orr	r1, r2, r6, lsl #11
    1600:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1604:	e1a00585 	lsl	r0, r5, #11
    1608:	e1800aae 	orr	r0, r0, lr, lsr #21
    160c:	e1a0e58e 	lsl	lr, lr, #11
    1610:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1614:	835c0c07 	cmphi	r12, #1792	; 0x700
    1618:	8a000011 	bhi	1664 <__aeabi_dmul+0xec>
    161c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1620:	01b0e0a0 	lsrseq	lr, r0, #1
    1624:	e2b00000 	adcs	r0, r0, #0
    1628:	e0a11a04 	adc	r1, r1, r4, lsl #20
    162c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1630:	e12fff1e 	bx	lr
    1634:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1638:	e1861001 	orr	r1, r6, r1
    163c:	e1800002 	orr	r0, r0, r2
    1640:	e0211003 	eor	r1, r1, r3
    1644:	e05440ac 	subs	r4, r4, r12, lsr #1
    1648:	c074500c 	rsbsgt	r5, r4, r12
    164c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1650:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1654:	c12fff1e 	bxgt	lr
    1658:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    165c:	e3a0e000 	mov	lr, #0
    1660:	e2544001 	subs	r4, r4, #1
    1664:	ca00005d 	bgt	17e0 <__aeabi_dmul+0x268>
    1668:	e3740036 	cmn	r4, #54	; 0x36
    166c:	d3a00000 	movle	r0, #0
    1670:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    1674:	d8bd4070 	pople	{r4, r5, r6, lr}
    1678:	d12fff1e 	bxle	lr
    167c:	e2644000 	rsb	r4, r4, #0
    1680:	e2544020 	subs	r4, r4, #32
    1684:	aa00001a 	bge	16f4 <__aeabi_dmul+0x17c>
    1688:	e294400c 	adds	r4, r4, #12
    168c:	ca00000c 	bgt	16c4 <__aeabi_dmul+0x14c>
    1690:	e2844014 	add	r4, r4, #20
    1694:	e2645020 	rsb	r5, r4, #32
    1698:	e1a03510 	lsl	r3, r0, r5
    169c:	e1a00430 	lsr	r0, r0, r4
    16a0:	e1800511 	orr	r0, r0, r1, lsl r5
    16a4:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    16a8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    16ac:	e0900fa3 	adds	r0, r0, r3, lsr #31
    16b0:	e0a21431 	adc	r1, r2, r1, lsr r4
    16b4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    16b8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    16bc:	e8bd4070 	pop	{r4, r5, r6, lr}
    16c0:	e12fff1e 	bx	lr
    16c4:	e264400c 	rsb	r4, r4, #12
    16c8:	e2645020 	rsb	r5, r4, #32
    16cc:	e1a03410 	lsl	r3, r0, r4
    16d0:	e1a00530 	lsr	r0, r0, r5
    16d4:	e1800411 	orr	r0, r0, r1, lsl r4
    16d8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    16dc:	e0900fa3 	adds	r0, r0, r3, lsr #31
    16e0:	e2a11000 	adc	r1, r1, #0
    16e4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    16e8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    16ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    16f0:	e12fff1e 	bx	lr
    16f4:	e2645020 	rsb	r5, r4, #32
    16f8:	e18ee510 	orr	lr, lr, r0, lsl r5
    16fc:	e1a03430 	lsr	r3, r0, r4
    1700:	e1833511 	orr	r3, r3, r1, lsl r5
    1704:	e1a00431 	lsr	r0, r1, r4
    1708:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    170c:	e1c00431 	bic	r0, r0, r1, lsr r4
    1710:	e0800fa3 	add	r0, r0, r3, lsr #31
    1714:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1718:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    171c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1720:	e12fff1e 	bx	lr
    1724:	e3340000 	teq	r4, #0
    1728:	1a000008 	bne	1750 <__aeabi_dmul+0x1d8>
    172c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1730:	e1b00080 	lsls	r0, r0, #1
    1734:	e0a11001 	adc	r1, r1, r1
    1738:	e3110601 	tst	r1, #1048576	; 0x100000
    173c:	02444001 	subeq	r4, r4, #1
    1740:	0afffffa 	beq	1730 <__aeabi_dmul+0x1b8>
    1744:	e1811006 	orr	r1, r1, r6
    1748:	e3350000 	teq	r5, #0
    174c:	112fff1e 	bxne	lr
    1750:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    1754:	e1b02082 	lsls	r2, r2, #1
    1758:	e0a33003 	adc	r3, r3, r3
    175c:	e3130601 	tst	r3, #1048576	; 0x100000
    1760:	02455001 	subeq	r5, r5, #1
    1764:	0afffffa 	beq	1754 <__aeabi_dmul+0x1dc>
    1768:	e1833006 	orr	r3, r3, r6
    176c:	e12fff1e 	bx	lr
    1770:	e134000c 	teq	r4, r12
    1774:	e00c5a23 	and	r5, r12, r3, lsr #20
    1778:	1135000c 	teqne	r5, r12
    177c:	0a000007 	beq	17a0 <__aeabi_dmul+0x228>
    1780:	e1906081 	orrs	r6, r0, r1, lsl #1
    1784:	11926083 	orrsne	r6, r2, r3, lsl #1
    1788:	1affffe5 	bne	1724 <__aeabi_dmul+0x1ac>
    178c:	e0211003 	eor	r1, r1, r3
    1790:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1794:	e3a00000 	mov	r0, #0
    1798:	e8bd4070 	pop	{r4, r5, r6, lr}
    179c:	e12fff1e 	bx	lr
    17a0:	e1906081 	orrs	r6, r0, r1, lsl #1
    17a4:	01a00002 	moveq	r0, r2
    17a8:	01a01003 	moveq	r1, r3
    17ac:	11926083 	orrsne	r6, r2, r3, lsl #1
    17b0:	0a000010 	beq	17f8 <__aeabi_dmul+0x280>
    17b4:	e134000c 	teq	r4, r12
    17b8:	1a000001 	bne	17c4 <__aeabi_dmul+0x24c>
    17bc:	e1906601 	orrs	r6, r0, r1, lsl #12
    17c0:	1a00000c 	bne	17f8 <__aeabi_dmul+0x280>
    17c4:	e135000c 	teq	r5, r12
    17c8:	1a000003 	bne	17dc <__aeabi_dmul+0x264>
    17cc:	e1926603 	orrs	r6, r2, r3, lsl #12
    17d0:	11a00002 	movne	r0, r2
    17d4:	11a01003 	movne	r1, r3
    17d8:	1a000006 	bne	17f8 <__aeabi_dmul+0x280>
    17dc:	e0211003 	eor	r1, r1, r3
    17e0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    17e4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    17e8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    17ec:	e3a00000 	mov	r0, #0
    17f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    17f4:	e12fff1e 	bx	lr
    17f8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    17fc:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1800:	e8bd4070 	pop	{r4, r5, r6, lr}
    1804:	e12fff1e 	bx	lr

00001808 <__aeabi_ddiv>:
    1808:	e92d4070 	push	{r4, r5, r6, lr}
    180c:	e3a0c0ff 	mov	r12, #255	; 0xff
    1810:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    1814:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1818:	101c5a23 	andsne	r5, r12, r3, lsr #20
    181c:	1134000c 	teqne	r4, r12
    1820:	1135000c 	teqne	r5, r12
    1824:	0b00005e 	bleq	19a4 <__aeabi_ddiv+0x19c>
    1828:	e0444005 	sub	r4, r4, r5
    182c:	e021e003 	eor	lr, r1, r3
    1830:	e1925603 	orrs	r5, r2, r3, lsl #12
    1834:	e1a01601 	lsl	r1, r1, #12
    1838:	0a00004c 	beq	1970 <__aeabi_ddiv+0x168>
    183c:	e1a03603 	lsl	r3, r3, #12
    1840:	e3a05201 	mov	r5, #268435456	; 0x10000000
    1844:	e1853223 	orr	r3, r5, r3, lsr #4
    1848:	e1833c22 	orr	r3, r3, r2, lsr #24
    184c:	e1a02402 	lsl	r2, r2, #8
    1850:	e1855221 	orr	r5, r5, r1, lsr #4
    1854:	e1855c20 	orr	r5, r5, r0, lsr #24
    1858:	e1a06400 	lsl	r6, r0, #8
    185c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    1860:	e1550003 	cmp	r5, r3
    1864:	01560002 	cmpeq	r6, r2
    1868:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    186c:	e2844c03 	add	r4, r4, #768	; 0x300
    1870:	2a000001 	bcs	187c <__aeabi_ddiv+0x74>
    1874:	e1b030a3 	lsrs	r3, r3, #1
    1878:	e1a02062 	rrx	r2, r2
    187c:	e0566002 	subs	r6, r6, r2
    1880:	e0c55003 	sbc	r5, r5, r3
    1884:	e1b030a3 	lsrs	r3, r3, #1
    1888:	e1a02062 	rrx	r2, r2
    188c:	e3a00601 	mov	r0, #1048576	; 0x100000
    1890:	e3a0c702 	mov	r12, #524288	; 0x80000
    1894:	e056e002 	subs	lr, r6, r2
    1898:	e0d5e003 	sbcs	lr, r5, r3
    189c:	20466002 	subcs	r6, r6, r2
    18a0:	21a0500e 	movcs	r5, lr
    18a4:	2180000c 	orrcs	r0, r0, r12
    18a8:	e1b030a3 	lsrs	r3, r3, #1
    18ac:	e1a02062 	rrx	r2, r2
    18b0:	e056e002 	subs	lr, r6, r2
    18b4:	e0d5e003 	sbcs	lr, r5, r3
    18b8:	20466002 	subcs	r6, r6, r2
    18bc:	21a0500e 	movcs	r5, lr
    18c0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    18c4:	e1b030a3 	lsrs	r3, r3, #1
    18c8:	e1a02062 	rrx	r2, r2
    18cc:	e056e002 	subs	lr, r6, r2
    18d0:	e0d5e003 	sbcs	lr, r5, r3
    18d4:	20466002 	subcs	r6, r6, r2
    18d8:	21a0500e 	movcs	r5, lr
    18dc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    18e0:	e1b030a3 	lsrs	r3, r3, #1
    18e4:	e1a02062 	rrx	r2, r2
    18e8:	e056e002 	subs	lr, r6, r2
    18ec:	e0d5e003 	sbcs	lr, r5, r3
    18f0:	20466002 	subcs	r6, r6, r2
    18f4:	21a0500e 	movcs	r5, lr
    18f8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    18fc:	e195e006 	orrs	lr, r5, r6
    1900:	0a00000d 	beq	193c <__aeabi_ddiv+0x134>
    1904:	e1a05205 	lsl	r5, r5, #4
    1908:	e1855e26 	orr	r5, r5, r6, lsr #28
    190c:	e1a06206 	lsl	r6, r6, #4
    1910:	e1a03183 	lsl	r3, r3, #3
    1914:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1918:	e1a02182 	lsl	r2, r2, #3
    191c:	e1b0c22c 	lsrs	r12, r12, #4
    1920:	1affffdb 	bne	1894 <__aeabi_ddiv+0x8c>
    1924:	e3110601 	tst	r1, #1048576	; 0x100000
    1928:	1a000006 	bne	1948 <__aeabi_ddiv+0x140>
    192c:	e1811000 	orr	r1, r1, r0
    1930:	e3a00000 	mov	r0, #0
    1934:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1938:	eaffffd5 	b	1894 <__aeabi_ddiv+0x8c>
    193c:	e3110601 	tst	r1, #1048576	; 0x100000
    1940:	01811000 	orreq	r1, r1, r0
    1944:	03a00000 	moveq	r0, #0
    1948:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    194c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1950:	8affff43 	bhi	1664 <__aeabi_dmul+0xec>
    1954:	e055c003 	subs	r12, r5, r3
    1958:	0056c002 	subseq	r12, r6, r2
    195c:	01b0c0a0 	lsrseq	r12, r0, #1
    1960:	e2b00000 	adcs	r0, r0, #0
    1964:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1968:	e8bd4070 	pop	{r4, r5, r6, lr}
    196c:	e12fff1e 	bx	lr
    1970:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1974:	e18e1621 	orr	r1, lr, r1, lsr #12
    1978:	e09440ac 	adds	r4, r4, r12, lsr #1
    197c:	c074500c 	rsbsgt	r5, r4, r12
    1980:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1984:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1988:	c12fff1e 	bxgt	lr
    198c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1990:	e3a0e000 	mov	lr, #0
    1994:	e2544001 	subs	r4, r4, #1
    1998:	eaffff31 	b	1664 <__aeabi_dmul+0xec>
    199c:	e185e006 	orr	lr, r5, r6
    19a0:	eaffff2f 	b	1664 <__aeabi_dmul+0xec>
    19a4:	e00c5a23 	and	r5, r12, r3, lsr #20
    19a8:	e134000c 	teq	r4, r12
    19ac:	0135000c 	teqeq	r5, r12
    19b0:	0affff90 	beq	17f8 <__aeabi_dmul+0x280>
    19b4:	e134000c 	teq	r4, r12
    19b8:	1a000006 	bne	19d8 <__aeabi_ddiv+0x1d0>
    19bc:	e1904601 	orrs	r4, r0, r1, lsl #12
    19c0:	1affff8c 	bne	17f8 <__aeabi_dmul+0x280>
    19c4:	e135000c 	teq	r5, r12
    19c8:	1affff83 	bne	17dc <__aeabi_dmul+0x264>
    19cc:	e1a00002 	mov	r0, r2
    19d0:	e1a01003 	mov	r1, r3
    19d4:	eaffff87 	b	17f8 <__aeabi_dmul+0x280>
    19d8:	e135000c 	teq	r5, r12
    19dc:	1a000004 	bne	19f4 <__aeabi_ddiv+0x1ec>
    19e0:	e1925603 	orrs	r5, r2, r3, lsl #12
    19e4:	0affff68 	beq	178c <__aeabi_dmul+0x214>
    19e8:	e1a00002 	mov	r0, r2
    19ec:	e1a01003 	mov	r1, r3
    19f0:	eaffff80 	b	17f8 <__aeabi_dmul+0x280>
    19f4:	e1906081 	orrs	r6, r0, r1, lsl #1
    19f8:	11926083 	orrsne	r6, r2, r3, lsl #1
    19fc:	1affff48 	bne	1724 <__aeabi_dmul+0x1ac>
    1a00:	e1904081 	orrs	r4, r0, r1, lsl #1
    1a04:	1affff74 	bne	17dc <__aeabi_dmul+0x264>
    1a08:	e1925083 	orrs	r5, r2, r3, lsl #1
    1a0c:	1affff5e 	bne	178c <__aeabi_dmul+0x214>
    1a10:	eaffff78 	b	17f8 <__aeabi_dmul+0x280>

00001a14 <__gedf2>:
    1a14:	e3e0c000 	mvn	r12, #0
    1a18:	ea000002 	b	1a28 <__cmpdf2+0x4>

00001a1c <__ledf2>:
    1a1c:	e3a0c001 	mov	r12, #1
    1a20:	ea000000 	b	1a28 <__cmpdf2+0x4>

00001a24 <__cmpdf2>:
    1a24:	e3a0c001 	mov	r12, #1
    1a28:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    1a2c:	e1a0c081 	lsl	r12, r1, #1
    1a30:	e1f0cacc 	mvns	r12, r12, asr #21
    1a34:	e1a0c083 	lsl	r12, r3, #1
    1a38:	11f0cacc 	mvnsne	r12, r12, asr #21
    1a3c:	0a00000e 	beq	1a7c <__cmpdf2+0x58>
    1a40:	e28dd004 	add	sp, sp, #4
    1a44:	e190c081 	orrs	r12, r0, r1, lsl #1
    1a48:	0192c083 	orrseq	r12, r2, r3, lsl #1
    1a4c:	11310003 	teqne	r1, r3
    1a50:	01300002 	teqeq	r0, r2
    1a54:	03a00000 	moveq	r0, #0
    1a58:	012fff1e 	bxeq	lr
    1a5c:	e3700000 	cmn	r0, #0
    1a60:	e1310003 	teq	r1, r3
    1a64:	51510003 	cmppl	r1, r3
    1a68:	01500002 	cmpeq	r0, r2
    1a6c:	21a00fc3 	asrcs	r0, r3, #31
    1a70:	31e00fc3 	mvncc	r0, r3, asr #31
    1a74:	e3800001 	orr	r0, r0, #1
    1a78:	e12fff1e 	bx	lr
    1a7c:	e1a0c081 	lsl	r12, r1, #1
    1a80:	e1f0cacc 	mvns	r12, r12, asr #21
    1a84:	1a000001 	bne	1a90 <__cmpdf2+0x6c>
    1a88:	e190c601 	orrs	r12, r0, r1, lsl #12
    1a8c:	1a000004 	bne	1aa4 <__cmpdf2+0x80>
    1a90:	e1a0c083 	lsl	r12, r3, #1
    1a94:	e1f0cacc 	mvns	r12, r12, asr #21
    1a98:	1affffe8 	bne	1a40 <__cmpdf2+0x1c>
    1a9c:	e192c603 	orrs	r12, r2, r3, lsl #12
    1aa0:	0affffe6 	beq	1a40 <__cmpdf2+0x1c>
    1aa4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1aa8:	e12fff1e 	bx	lr

00001aac <__aeabi_cdrcmple>:
    1aac:	e1a0c000 	mov	r12, r0
    1ab0:	e1a00002 	mov	r0, r2
    1ab4:	e1a0200c 	mov	r2, r12
    1ab8:	e1a0c001 	mov	r12, r1
    1abc:	e1a01003 	mov	r1, r3
    1ac0:	e1a0300c 	mov	r3, r12
    1ac4:	eaffffff 	b	1ac8 <__aeabi_cdcmpeq>

00001ac8 <__aeabi_cdcmpeq>:
    1ac8:	e92d4001 	push	{r0, lr}
    1acc:	ebffffd4 	bl	1a24 <__cmpdf2>
    1ad0:	e3500000 	cmp	r0, #0
    1ad4:	43700000 	cmnmi	r0, #0
    1ad8:	e8bd4001 	pop	{r0, lr}
    1adc:	e12fff1e 	bx	lr

00001ae0 <__aeabi_dcmpeq>:
    1ae0:	e52de008 	str	lr, [sp, #-8]!
    1ae4:	ebfffff7 	bl	1ac8 <__aeabi_cdcmpeq>
    1ae8:	03a00001 	moveq	r0, #1
    1aec:	13a00000 	movne	r0, #0
    1af0:	e49de008 	ldr	lr, [sp], #8
    1af4:	e12fff1e 	bx	lr

00001af8 <__aeabi_dcmplt>:
    1af8:	e52de008 	str	lr, [sp, #-8]!
    1afc:	ebfffff1 	bl	1ac8 <__aeabi_cdcmpeq>
    1b00:	33a00001 	movcc	r0, #1
    1b04:	23a00000 	movcs	r0, #0
    1b08:	e49de008 	ldr	lr, [sp], #8
    1b0c:	e12fff1e 	bx	lr

00001b10 <__aeabi_dcmple>:
    1b10:	e52de008 	str	lr, [sp, #-8]!
    1b14:	ebffffeb 	bl	1ac8 <__aeabi_cdcmpeq>
    1b18:	93a00001 	movls	r0, #1
    1b1c:	83a00000 	movhi	r0, #0
    1b20:	e49de008 	ldr	lr, [sp], #8
    1b24:	e12fff1e 	bx	lr

00001b28 <__aeabi_dcmpge>:
    1b28:	e52de008 	str	lr, [sp, #-8]!
    1b2c:	ebffffde 	bl	1aac <__aeabi_cdrcmple>
    1b30:	93a00001 	movls	r0, #1
    1b34:	83a00000 	movhi	r0, #0
    1b38:	e49de008 	ldr	lr, [sp], #8
    1b3c:	e12fff1e 	bx	lr

00001b40 <__aeabi_dcmpgt>:
    1b40:	e52de008 	str	lr, [sp, #-8]!
    1b44:	ebffffd8 	bl	1aac <__aeabi_cdrcmple>
    1b48:	33a00001 	movcc	r0, #1
    1b4c:	23a00000 	movcs	r0, #0
    1b50:	e49de008 	ldr	lr, [sp], #8
    1b54:	e12fff1e 	bx	lr

00001b58 <__aeabi_d2f>:
    1b58:	e1a02081 	lsl	r2, r1, #1
    1b5c:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    1b60:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    1b64:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    1b68:	9a000006 	bls	1b88 <__aeabi_d2f+0x30>
    1b6c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    1b70:	e1a02180 	lsl	r2, r0, #3
    1b74:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    1b78:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    1b7c:	e0a00103 	adc	r0, r0, r3, lsl #2
    1b80:	03c00001 	biceq	r0, r0, #1
    1b84:	e12fff1e 	bx	lr
    1b88:	e3110101 	tst	r1, #1073741824	; 0x40000000
    1b8c:	1a00000f 	bne	1bd0 <__aeabi_d2f+0x78>
    1b90:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    1b94:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    1b98:	b12fff1e 	bxlt	lr
    1b9c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1ba0:	e1a02aa2 	lsr	r2, r2, #21
    1ba4:	e2622018 	rsb	r2, r2, #24
    1ba8:	e262c020 	rsb	r12, r2, #32
    1bac:	e1b03c10 	lsls	r3, r0, r12
    1bb0:	e1a00230 	lsr	r0, r0, r2
    1bb4:	13800001 	orrne	r0, r0, #1
    1bb8:	e1a03581 	lsl	r3, r1, #11
    1bbc:	e1a035a3 	lsr	r3, r3, #11
    1bc0:	e1800c13 	orr	r0, r0, r3, lsl r12
    1bc4:	e1a03233 	lsr	r3, r3, r2
    1bc8:	e1a03083 	lsl	r3, r3, #1
    1bcc:	eaffffe6 	b	1b6c <__aeabi_d2f+0x14>
    1bd0:	e1f03ac2 	mvns	r3, r2, asr #21
    1bd4:	1a000003 	bne	1be8 <__aeabi_d2f+0x90>
    1bd8:	e1903601 	orrs	r3, r0, r1, lsl #12
    1bdc:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    1be0:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    1be4:	112fff1e 	bxne	lr
    1be8:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    1bec:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1bf0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1bf4:	e12fff1e 	bx	lr

00001bf8 <__aeabi_frsub>:
    1bf8:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    1bfc:	ea000000 	b	1c04 <__addsf3>

00001c00 <__aeabi_fsub>:
    1c00:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00001c04 <__addsf3>:
    1c04:	e1b02080 	lsls	r2, r0, #1
    1c08:	11b03081 	lslsne	r3, r1, #1
    1c0c:	11320003 	teqne	r2, r3
    1c10:	11f0cc42 	mvnsne	r12, r2, asr #24
    1c14:	11f0cc43 	mvnsne	r12, r3, asr #24
    1c18:	0a000047 	beq	1d3c <__addsf3+0x138>
    1c1c:	e1a02c22 	lsr	r2, r2, #24
    1c20:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    1c24:	c0822003 	addgt	r2, r2, r3
    1c28:	c0201001 	eorgt	r1, r0, r1
    1c2c:	c0210000 	eorgt	r0, r1, r0
    1c30:	c0201001 	eorgt	r1, r0, r1
    1c34:	b2633000 	rsblt	r3, r3, #0
    1c38:	e3530019 	cmp	r3, #25
    1c3c:	812fff1e 	bxhi	lr
    1c40:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1c44:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1c48:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    1c4c:	12600000 	rsbne	r0, r0, #0
    1c50:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1c54:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    1c58:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    1c5c:	12611000 	rsbne	r1, r1, #0
    1c60:	e1320003 	teq	r2, r3
    1c64:	0a00002e 	beq	1d24 <__addsf3+0x120>
    1c68:	e2422001 	sub	r2, r2, #1
    1c6c:	e0900351 	adds	r0, r0, r1, asr r3
    1c70:	e2633020 	rsb	r3, r3, #32
    1c74:	e1a01311 	lsl	r1, r1, r3
    1c78:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1c7c:	5a000001 	bpl	1c88 <__addsf3+0x84>
    1c80:	e2711000 	rsbs	r1, r1, #0
    1c84:	e2e00000 	rsc	r0, r0, #0
    1c88:	e3500502 	cmp	r0, #8388608	; 0x800000
    1c8c:	3a00000b 	bcc	1cc0 <__addsf3+0xbc>
    1c90:	e3500401 	cmp	r0, #16777216	; 0x1000000
    1c94:	3a000004 	bcc	1cac <__addsf3+0xa8>
    1c98:	e1b000a0 	lsrs	r0, r0, #1
    1c9c:	e1a01061 	rrx	r1, r1
    1ca0:	e2822001 	add	r2, r2, #1
    1ca4:	e35200fe 	cmp	r2, #254	; 0xfe
    1ca8:	2a000038 	bcs	1d90 <__addsf3+0x18c>
    1cac:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1cb0:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1cb4:	03c00001 	biceq	r0, r0, #1
    1cb8:	e1800003 	orr	r0, r0, r3
    1cbc:	e12fff1e 	bx	lr
    1cc0:	e1b01081 	lsls	r1, r1, #1
    1cc4:	e0a00000 	adc	r0, r0, r0
    1cc8:	e3100502 	tst	r0, #8388608	; 0x800000
    1ccc:	e2422001 	sub	r2, r2, #1
    1cd0:	1afffff5 	bne	1cac <__addsf3+0xa8>
    1cd4:	e1b0c620 	lsrs	r12, r0, #12
    1cd8:	01a00600 	lsleq	r0, r0, #12
    1cdc:	0242200c 	subeq	r2, r2, #12
    1ce0:	e31008ff 	tst	r0, #16711680	; 0xff0000
    1ce4:	01a00400 	lsleq	r0, r0, #8
    1ce8:	02422008 	subeq	r2, r2, #8
    1cec:	e310060f 	tst	r0, #15728640	; 0xf00000
    1cf0:	01a00200 	lsleq	r0, r0, #4
    1cf4:	02422004 	subeq	r2, r2, #4
    1cf8:	e3100503 	tst	r0, #12582912	; 0xc00000
    1cfc:	01a00100 	lsleq	r0, r0, #2
    1d00:	02422002 	subeq	r2, r2, #2
    1d04:	e3500502 	cmp	r0, #8388608	; 0x800000
    1d08:	31a00080 	lslcc	r0, r0, #1
    1d0c:	e2d22000 	sbcs	r2, r2, #0
    1d10:	a0800b82 	addge	r0, r0, r2, lsl #23
    1d14:	b2622000 	rsblt	r2, r2, #0
    1d18:	a1800003 	orrge	r0, r0, r3
    1d1c:	b1830230 	orrlt	r0, r3, r0, lsr r2
    1d20:	e12fff1e 	bx	lr
    1d24:	e3320000 	teq	r2, #0
    1d28:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    1d2c:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    1d30:	02822001 	addeq	r2, r2, #1
    1d34:	12433001 	subne	r3, r3, #1
    1d38:	eaffffca 	b	1c68 <__addsf3+0x64>
    1d3c:	e1a03081 	lsl	r3, r1, #1
    1d40:	e1f0cc42 	mvns	r12, r2, asr #24
    1d44:	11f0cc43 	mvnsne	r12, r3, asr #24
    1d48:	0a000013 	beq	1d9c <__addsf3+0x198>
    1d4c:	e1320003 	teq	r2, r3
    1d50:	0a000002 	beq	1d60 <__addsf3+0x15c>
    1d54:	e3320000 	teq	r2, #0
    1d58:	01a00001 	moveq	r0, r1
    1d5c:	e12fff1e 	bx	lr
    1d60:	e1300001 	teq	r0, r1
    1d64:	13a00000 	movne	r0, #0
    1d68:	112fff1e 	bxne	lr
    1d6c:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    1d70:	1a000002 	bne	1d80 <__addsf3+0x17c>
    1d74:	e1b00080 	lsls	r0, r0, #1
    1d78:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    1d7c:	e12fff1e 	bx	lr
    1d80:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    1d84:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    1d88:	312fff1e 	bxcc	lr
    1d8c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1d90:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    1d94:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1d98:	e12fff1e 	bx	lr
    1d9c:	e1f02c42 	mvns	r2, r2, asr #24
    1da0:	11a00001 	movne	r0, r1
    1da4:	01f03c43 	mvnseq	r3, r3, asr #24
    1da8:	11a01000 	movne	r1, r0
    1dac:	e1b02480 	lsls	r2, r0, #9
    1db0:	01b03481 	lslseq	r3, r1, #9
    1db4:	01300001 	teqeq	r0, r1
    1db8:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    1dbc:	e12fff1e 	bx	lr

00001dc0 <__aeabi_ui2f>:
    1dc0:	e3a03000 	mov	r3, #0
    1dc4:	ea000001 	b	1dd0 <__aeabi_i2f+0x8>

00001dc8 <__aeabi_i2f>:
    1dc8:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    1dcc:	42600000 	rsbmi	r0, r0, #0
    1dd0:	e1b0c000 	movs	r12, r0
    1dd4:	012fff1e 	bxeq	lr
    1dd8:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    1ddc:	e1a01000 	mov	r1, r0
    1de0:	e3a00000 	mov	r0, #0
    1de4:	ea00000f 	b	1e28 <__aeabi_l2f+0x30>

00001de8 <__aeabi_ul2f>:
    1de8:	e1902001 	orrs	r2, r0, r1
    1dec:	012fff1e 	bxeq	lr
    1df0:	e3a03000 	mov	r3, #0
    1df4:	ea000005 	b	1e10 <__aeabi_l2f+0x18>

00001df8 <__aeabi_l2f>:
    1df8:	e1902001 	orrs	r2, r0, r1
    1dfc:	012fff1e 	bxeq	lr
    1e00:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    1e04:	5a000001 	bpl	1e10 <__aeabi_l2f+0x18>
    1e08:	e2700000 	rsbs	r0, r0, #0
    1e0c:	e2e11000 	rsc	r1, r1, #0
    1e10:	e1b0c001 	movs	r12, r1
    1e14:	01a0c000 	moveq	r12, r0
    1e18:	01a01000 	moveq	r1, r0
    1e1c:	03a00000 	moveq	r0, #0
    1e20:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    1e24:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    1e28:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    1e2c:	e3a02017 	mov	r2, #23
    1e30:	e35c0801 	cmp	r12, #65536	; 0x10000
    1e34:	21a0c82c 	lsrcs	r12, r12, #16
    1e38:	22422010 	subcs	r2, r2, #16
    1e3c:	e35c0c01 	cmp	r12, #256	; 0x100
    1e40:	21a0c42c 	lsrcs	r12, r12, #8
    1e44:	22422008 	subcs	r2, r2, #8
    1e48:	e35c0010 	cmp	r12, #16
    1e4c:	21a0c22c 	lsrcs	r12, r12, #4
    1e50:	22422004 	subcs	r2, r2, #4
    1e54:	e35c0004 	cmp	r12, #4
    1e58:	22422002 	subcs	r2, r2, #2
    1e5c:	304220ac 	subcc	r2, r2, r12, lsr #1
    1e60:	e05221ac 	subs	r2, r2, r12, lsr #3
    1e64:	e0433b82 	sub	r3, r3, r2, lsl #23
    1e68:	ba000006 	blt	1e88 <__aeabi_l2f+0x90>
    1e6c:	e0833211 	add	r3, r3, r1, lsl r2
    1e70:	e1a0c210 	lsl	r12, r0, r2
    1e74:	e2622020 	rsb	r2, r2, #32
    1e78:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1e7c:	e0a30230 	adc	r0, r3, r0, lsr r2
    1e80:	03c00001 	biceq	r0, r0, #1
    1e84:	e12fff1e 	bx	lr
    1e88:	e2822020 	add	r2, r2, #32
    1e8c:	e1a0c211 	lsl	r12, r1, r2
    1e90:	e2622020 	rsb	r2, r2, #32
    1e94:	e190008c 	orrs	r0, r0, r12, lsl #1
    1e98:	e0a30231 	adc	r0, r3, r1, lsr r2
    1e9c:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1ea0:	e12fff1e 	bx	lr

00001ea4 <__aeabi_fmul>:
    1ea4:	e3a0c0ff 	mov	r12, #255	; 0xff
    1ea8:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1eac:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    1eb0:	1132000c 	teqne	r2, r12
    1eb4:	1133000c 	teqne	r3, r12
    1eb8:	0a00003e 	beq	1fb8 <__aeabi_fmul+0x114>
    1ebc:	e0822003 	add	r2, r2, r3
    1ec0:	e020c001 	eor	r12, r0, r1
    1ec4:	e1b00480 	lsls	r0, r0, #9
    1ec8:	11b01481 	lslsne	r1, r1, #9
    1ecc:	0a000010 	beq	1f14 <__aeabi_fmul+0x70>
    1ed0:	e3a03302 	mov	r3, #134217728	; 0x8000000
    1ed4:	e18302a0 	orr	r0, r3, r0, lsr #5
    1ed8:	e18312a1 	orr	r1, r3, r1, lsr #5
    1edc:	e0813190 	umull	r3, r1, r0, r1
    1ee0:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    1ee4:	e3510502 	cmp	r1, #8388608	; 0x800000
    1ee8:	31a01081 	lslcc	r1, r1, #1
    1eec:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    1ef0:	31a03083 	lslcc	r3, r3, #1
    1ef4:	e1800001 	orr	r0, r0, r1
    1ef8:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    1efc:	e35200fd 	cmp	r2, #253	; 0xfd
    1f00:	8a00000f 	bhi	1f44 <__aeabi_fmul+0xa0>
    1f04:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    1f08:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1f0c:	03c00001 	biceq	r0, r0, #1
    1f10:	e12fff1e 	bx	lr
    1f14:	e3300000 	teq	r0, #0
    1f18:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1f1c:	01a01481 	lsleq	r1, r1, #9
    1f20:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1f24:	e18004a1 	orr	r0, r0, r1, lsr #9
    1f28:	e252207f 	subs	r2, r2, #127	; 0x7f
    1f2c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1f30:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1f34:	c12fff1e 	bxgt	lr
    1f38:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1f3c:	e3a03000 	mov	r3, #0
    1f40:	e2522001 	subs	r2, r2, #1
    1f44:	ca000035 	bgt	2020 <__aeabi_fmul+0x17c>
    1f48:	e3720019 	cmn	r2, #25
    1f4c:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    1f50:	d12fff1e 	bxle	lr
    1f54:	e2622000 	rsb	r2, r2, #0
    1f58:	e1b01080 	lsls	r1, r0, #1
    1f5c:	e1a01231 	lsr	r1, r1, r2
    1f60:	e2622020 	rsb	r2, r2, #32
    1f64:	e1a0c210 	lsl	r12, r0, r2
    1f68:	e1b00061 	rrxs	r0, r1
    1f6c:	e2a00000 	adc	r0, r0, #0
    1f70:	e193308c 	orrs	r3, r3, r12, lsl #1
    1f74:	01c00fac 	biceq	r0, r0, r12, lsr #31
    1f78:	e12fff1e 	bx	lr
    1f7c:	e3320000 	teq	r2, #0
    1f80:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1f84:	01a00080 	lsleq	r0, r0, #1
    1f88:	03100502 	tsteq	r0, #8388608	; 0x800000
    1f8c:	02422001 	subeq	r2, r2, #1
    1f90:	0afffffb 	beq	1f84 <__aeabi_fmul+0xe0>
    1f94:	e180000c 	orr	r0, r0, r12
    1f98:	e3330000 	teq	r3, #0
    1f9c:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    1fa0:	01a01081 	lsleq	r1, r1, #1
    1fa4:	03110502 	tsteq	r1, #8388608	; 0x800000
    1fa8:	02433001 	subeq	r3, r3, #1
    1fac:	0afffffb 	beq	1fa0 <__aeabi_fmul+0xfc>
    1fb0:	e181100c 	orr	r1, r1, r12
    1fb4:	eaffffc0 	b	1ebc <__aeabi_fmul+0x18>
    1fb8:	e00c3ba1 	and	r3, r12, r1, lsr #23
    1fbc:	e132000c 	teq	r2, r12
    1fc0:	1133000c 	teqne	r3, r12
    1fc4:	0a000005 	beq	1fe0 <__aeabi_fmul+0x13c>
    1fc8:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1fcc:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1fd0:	1affffe9 	bne	1f7c <__aeabi_fmul+0xd8>
    1fd4:	e0200001 	eor	r0, r0, r1
    1fd8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1fdc:	e12fff1e 	bx	lr
    1fe0:	e3300000 	teq	r0, #0
    1fe4:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    1fe8:	01a00001 	moveq	r0, r1
    1fec:	13310000 	teqne	r1, #0
    1ff0:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    1ff4:	0a00000d 	beq	2030 <__aeabi_fmul+0x18c>
    1ff8:	e132000c 	teq	r2, r12
    1ffc:	1a000001 	bne	2008 <__aeabi_fmul+0x164>
    2000:	e1b02480 	lsls	r2, r0, #9
    2004:	1a000009 	bne	2030 <__aeabi_fmul+0x18c>
    2008:	e133000c 	teq	r3, r12
    200c:	1a000002 	bne	201c <__aeabi_fmul+0x178>
    2010:	e1b03481 	lsls	r3, r1, #9
    2014:	11a00001 	movne	r0, r1
    2018:	1a000004 	bne	2030 <__aeabi_fmul+0x18c>
    201c:	e0200001 	eor	r0, r0, r1
    2020:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2024:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2028:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    202c:	e12fff1e 	bx	lr
    2030:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2034:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    2038:	e12fff1e 	bx	lr

0000203c <__aeabi_fdiv>:
    203c:	e3a0c0ff 	mov	r12, #255	; 0xff
    2040:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    2044:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    2048:	1132000c 	teqne	r2, r12
    204c:	1133000c 	teqne	r3, r12
    2050:	0a00003a 	beq	2140 <__aeabi_fdiv+0x104>
    2054:	e0422003 	sub	r2, r2, r3
    2058:	e020c001 	eor	r12, r0, r1
    205c:	e1b01481 	lsls	r1, r1, #9
    2060:	e1a00480 	lsl	r0, r0, #9
    2064:	0a00001c 	beq	20dc <__aeabi_fdiv+0xa0>
    2068:	e3a03201 	mov	r3, #268435456	; 0x10000000
    206c:	e1831221 	orr	r1, r3, r1, lsr #4
    2070:	e1833220 	orr	r3, r3, r0, lsr #4
    2074:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    2078:	e1530001 	cmp	r3, r1
    207c:	31a03083 	lslcc	r3, r3, #1
    2080:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2084:	e3a0c502 	mov	r12, #8388608	; 0x800000
    2088:	e1530001 	cmp	r3, r1
    208c:	20433001 	subcs	r3, r3, r1
    2090:	2180000c 	orrcs	r0, r0, r12
    2094:	e15300a1 	cmp	r3, r1, lsr #1
    2098:	204330a1 	subcs	r3, r3, r1, lsr #1
    209c:	218000ac 	orrcs	r0, r0, r12, lsr #1
    20a0:	e1530121 	cmp	r3, r1, lsr #2
    20a4:	20433121 	subcs	r3, r3, r1, lsr #2
    20a8:	2180012c 	orrcs	r0, r0, r12, lsr #2
    20ac:	e15301a1 	cmp	r3, r1, lsr #3
    20b0:	204331a1 	subcs	r3, r3, r1, lsr #3
    20b4:	218001ac 	orrcs	r0, r0, r12, lsr #3
    20b8:	e1b03203 	lsls	r3, r3, #4
    20bc:	11b0c22c 	lsrsne	r12, r12, #4
    20c0:	1afffff0 	bne	2088 <__aeabi_fdiv+0x4c>
    20c4:	e35200fd 	cmp	r2, #253	; 0xfd
    20c8:	8affff9d 	bhi	1f44 <__aeabi_fmul+0xa0>
    20cc:	e1530001 	cmp	r3, r1
    20d0:	e0a00b82 	adc	r0, r0, r2, lsl #23
    20d4:	03c00001 	biceq	r0, r0, #1
    20d8:	e12fff1e 	bx	lr
    20dc:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    20e0:	e18c04a0 	orr	r0, r12, r0, lsr #9
    20e4:	e292207f 	adds	r2, r2, #127	; 0x7f
    20e8:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    20ec:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    20f0:	c12fff1e 	bxgt	lr
    20f4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    20f8:	e3a03000 	mov	r3, #0
    20fc:	e2522001 	subs	r2, r2, #1
    2100:	eaffff8f 	b	1f44 <__aeabi_fmul+0xa0>
    2104:	e3320000 	teq	r2, #0
    2108:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    210c:	01a00080 	lsleq	r0, r0, #1
    2110:	03100502 	tsteq	r0, #8388608	; 0x800000
    2114:	02422001 	subeq	r2, r2, #1
    2118:	0afffffb 	beq	210c <__aeabi_fdiv+0xd0>
    211c:	e180000c 	orr	r0, r0, r12
    2120:	e3330000 	teq	r3, #0
    2124:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    2128:	01a01081 	lsleq	r1, r1, #1
    212c:	03110502 	tsteq	r1, #8388608	; 0x800000
    2130:	02433001 	subeq	r3, r3, #1
    2134:	0afffffb 	beq	2128 <__aeabi_fdiv+0xec>
    2138:	e181100c 	orr	r1, r1, r12
    213c:	eaffffc4 	b	2054 <__aeabi_fdiv+0x18>
    2140:	e00c3ba1 	and	r3, r12, r1, lsr #23
    2144:	e132000c 	teq	r2, r12
    2148:	1a000005 	bne	2164 <__aeabi_fdiv+0x128>
    214c:	e1b02480 	lsls	r2, r0, #9
    2150:	1affffb6 	bne	2030 <__aeabi_fmul+0x18c>
    2154:	e133000c 	teq	r3, r12
    2158:	1affffaf 	bne	201c <__aeabi_fmul+0x178>
    215c:	e1a00001 	mov	r0, r1
    2160:	eaffffb2 	b	2030 <__aeabi_fmul+0x18c>
    2164:	e133000c 	teq	r3, r12
    2168:	1a000003 	bne	217c <__aeabi_fdiv+0x140>
    216c:	e1b03481 	lsls	r3, r1, #9
    2170:	0affff97 	beq	1fd4 <__aeabi_fmul+0x130>
    2174:	e1a00001 	mov	r0, r1
    2178:	eaffffac 	b	2030 <__aeabi_fmul+0x18c>
    217c:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    2180:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    2184:	1affffde 	bne	2104 <__aeabi_fdiv+0xc8>
    2188:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    218c:	1affffa2 	bne	201c <__aeabi_fmul+0x178>
    2190:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2194:	1affff8e 	bne	1fd4 <__aeabi_fmul+0x130>
    2198:	eaffffa4 	b	2030 <__aeabi_fmul+0x18c>

0000219c <__gesf2>:
    219c:	e3e0c000 	mvn	r12, #0
    21a0:	ea000002 	b	21b0 <__cmpsf2+0x4>

000021a4 <__lesf2>:
    21a4:	e3a0c001 	mov	r12, #1
    21a8:	ea000000 	b	21b0 <__cmpsf2+0x4>

000021ac <__cmpsf2>:
    21ac:	e3a0c001 	mov	r12, #1
    21b0:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    21b4:	e1a02080 	lsl	r2, r0, #1
    21b8:	e1a03081 	lsl	r3, r1, #1
    21bc:	e1f0cc42 	mvns	r12, r2, asr #24
    21c0:	11f0cc43 	mvnsne	r12, r3, asr #24
    21c4:	0a000007 	beq	21e8 <__cmpsf2+0x3c>
    21c8:	e28dd004 	add	sp, sp, #4
    21cc:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    21d0:	11300001 	teqne	r0, r1
    21d4:	50520003 	subspl	r0, r2, r3
    21d8:	81a00fc1 	asrhi	r0, r1, #31
    21dc:	31e00fc1 	mvncc	r0, r1, asr #31
    21e0:	13800001 	orrne	r0, r0, #1
    21e4:	e12fff1e 	bx	lr
    21e8:	e1f0cc42 	mvns	r12, r2, asr #24
    21ec:	1a000001 	bne	21f8 <__cmpsf2+0x4c>
    21f0:	e1b0c480 	lsls	r12, r0, #9
    21f4:	1a000003 	bne	2208 <__cmpsf2+0x5c>
    21f8:	e1f0cc43 	mvns	r12, r3, asr #24
    21fc:	1afffff1 	bne	21c8 <__cmpsf2+0x1c>
    2200:	e1b0c481 	lsls	r12, r1, #9
    2204:	0affffef 	beq	21c8 <__cmpsf2+0x1c>
    2208:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    220c:	e12fff1e 	bx	lr

00002210 <__aeabi_cfrcmple>:
    2210:	e1a0c000 	mov	r12, r0
    2214:	e1a00001 	mov	r0, r1
    2218:	e1a0100c 	mov	r1, r12
    221c:	eaffffff 	b	2220 <__aeabi_cfcmpeq>

00002220 <__aeabi_cfcmpeq>:
    2220:	e92d400f 	push	{r0, r1, r2, r3, lr}
    2224:	ebffffe0 	bl	21ac <__cmpsf2>
    2228:	e3500000 	cmp	r0, #0
    222c:	43700000 	cmnmi	r0, #0
    2230:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    2234:	e12fff1e 	bx	lr

00002238 <__aeabi_fcmpeq>:
    2238:	e52de008 	str	lr, [sp, #-8]!
    223c:	ebfffff7 	bl	2220 <__aeabi_cfcmpeq>
    2240:	03a00001 	moveq	r0, #1
    2244:	13a00000 	movne	r0, #0
    2248:	e49de008 	ldr	lr, [sp], #8
    224c:	e12fff1e 	bx	lr

00002250 <__aeabi_fcmplt>:
    2250:	e52de008 	str	lr, [sp, #-8]!
    2254:	ebfffff1 	bl	2220 <__aeabi_cfcmpeq>
    2258:	33a00001 	movcc	r0, #1
    225c:	23a00000 	movcs	r0, #0
    2260:	e49de008 	ldr	lr, [sp], #8
    2264:	e12fff1e 	bx	lr

00002268 <__aeabi_fcmple>:
    2268:	e52de008 	str	lr, [sp, #-8]!
    226c:	ebffffeb 	bl	2220 <__aeabi_cfcmpeq>
    2270:	93a00001 	movls	r0, #1
    2274:	83a00000 	movhi	r0, #0
    2278:	e49de008 	ldr	lr, [sp], #8
    227c:	e12fff1e 	bx	lr

00002280 <__aeabi_fcmpge>:
    2280:	e52de008 	str	lr, [sp, #-8]!
    2284:	ebffffe1 	bl	2210 <__aeabi_cfrcmple>
    2288:	93a00001 	movls	r0, #1
    228c:	83a00000 	movhi	r0, #0
    2290:	e49de008 	ldr	lr, [sp], #8
    2294:	e12fff1e 	bx	lr

00002298 <__aeabi_fcmpgt>:
    2298:	e52de008 	str	lr, [sp, #-8]!
    229c:	ebffffdb 	bl	2210 <__aeabi_cfrcmple>
    22a0:	33a00001 	movcc	r0, #1
    22a4:	23a00000 	movcs	r0, #0
    22a8:	e49de008 	ldr	lr, [sp], #8
    22ac:	e12fff1e 	bx	lr

000022b0 <__aeabi_f2iz>:
    22b0:	e1a02080 	lsl	r2, r0, #1
    22b4:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    22b8:	3a000008 	bcc	22e0 <__aeabi_f2iz+0x30>
    22bc:	e3a0309e 	mov	r3, #158	; 0x9e
    22c0:	e0532c22 	subs	r2, r3, r2, lsr #24
    22c4:	9a000007 	bls	22e8 <__aeabi_f2iz+0x38>
    22c8:	e1a03400 	lsl	r3, r0, #8
    22cc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    22d0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    22d4:	e1a00233 	lsr	r0, r3, r2
    22d8:	12600000 	rsbne	r0, r0, #0
    22dc:	e12fff1e 	bx	lr
    22e0:	e3a00000 	mov	r0, #0
    22e4:	e12fff1e 	bx	lr
    22e8:	e3720061 	cmn	r2, #97	; 0x61
    22ec:	1a000001 	bne	22f8 <__aeabi_f2iz+0x48>
    22f0:	e1b02480 	lsls	r2, r0, #9
    22f4:	1a000002 	bne	2304 <__aeabi_f2iz+0x54>
    22f8:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    22fc:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2300:	e12fff1e 	bx	lr
    2304:	e3a00000 	mov	r0, #0
    2308:	e12fff1e 	bx	lr

0000230c <atexit>:
    230c:	e1a01000 	mov	r1, r0
    2310:	e3a00000 	mov	r0, #0
    2314:	e92d4008 	push	{r3, lr}
    2318:	e1a02000 	mov	r2, r0
    231c:	e1a03000 	mov	r3, r0
    2320:	eb00000e 	bl	2360 <__register_exitproc>
    2324:	e8bd4008 	pop	{r3, lr}
    2328:	e12fff1e 	bx	lr

0000232c <exit>:
    232c:	e92d4008 	push	{r3, lr}
    2330:	e3a01000 	mov	r1, #0
    2334:	e1a04000 	mov	r4, r0
    2338:	eb000045 	bl	2454 <__call_exitprocs>
    233c:	e59f3018 	ldr	r3, [pc, #24]	; 235c <exit+0x30>
    2340:	e5930000 	ldr	r0, [r3]
    2344:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    2348:	e3530000 	cmp	r3, #0
    234c:	11a0e00f 	movne	lr, pc
    2350:	112fff13 	bxne	r3
    2354:	e1a00004 	mov	r0, r4
    2358:	eb0000c9 	bl	2684 <_exit>
    235c:	00002744 	.word	0x00002744

00002360 <__register_exitproc>:
    2360:	e59fc0e4 	ldr	r12, [pc, #228]	; 244c <__register_exitproc+0xec>
    2364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    2368:	e59c4000 	ldr	r4, [r12]
    236c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2370:	e35c0000 	cmp	r12, #0
    2374:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    2378:	e59c5004 	ldr	r5, [r12, #4]
    237c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2380:	e355001f 	cmp	r5, #31
    2384:	e24dd010 	sub	sp, sp, #16
    2388:	e1a06000 	mov	r6, r0
    238c:	da000015 	ble	23e8 <__register_exitproc+0x88>
    2390:	e59f00b8 	ldr	r0, [pc, #184]	; 2450 <__register_exitproc+0xf0>
    2394:	e3500000 	cmp	r0, #0
    2398:	1a000001 	bne	23a4 <__register_exitproc+0x44>
    239c:	e3e00000 	mvn	r0, #0
    23a0:	ea000018 	b	2408 <__register_exitproc+0xa8>
    23a4:	e3a00e19 	mov	r0, #400	; 0x190
    23a8:	e58d100c 	str	r1, [sp, #12]
    23ac:	e58d2008 	str	r2, [sp, #8]
    23b0:	e58d3004 	str	r3, [sp, #4]
    23b4:	e320f000 	nop	{0}
    23b8:	e250c000 	subs	r12, r0, #0
    23bc:	e59d100c 	ldr	r1, [sp, #12]
    23c0:	e59d2008 	ldr	r2, [sp, #8]
    23c4:	e59d3004 	ldr	r3, [sp, #4]
    23c8:	0afffff3 	beq	239c <__register_exitproc+0x3c>
    23cc:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    23d0:	e3a00000 	mov	r0, #0
    23d4:	e58c0004 	str	r0, [r12, #4]
    23d8:	e58c5000 	str	r5, [r12]
    23dc:	e584c148 	str	r12, [r4, #328]	; 0x148
    23e0:	e58c0188 	str	r0, [r12, #392]	; 0x188
    23e4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    23e8:	e3560000 	cmp	r6, #0
    23ec:	e59c4004 	ldr	r4, [r12, #4]
    23f0:	1a000007 	bne	2414 <__register_exitproc+0xb4>
    23f4:	e2843002 	add	r3, r4, #2
    23f8:	e2844001 	add	r4, r4, #1
    23fc:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2400:	e58c4004 	str	r4, [r12, #4]
    2404:	e3a00000 	mov	r0, #0
    2408:	e28dd010 	add	sp, sp, #16
    240c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2410:	e12fff1e 	bx	lr
    2414:	e3a00001 	mov	r0, #1
    2418:	e1a00410 	lsl	r0, r0, r4
    241c:	e08c8104 	add	r8, r12, r4, lsl #2
    2420:	e3560002 	cmp	r6, #2
    2424:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2428:	e5883108 	str	r3, [r8, #264]	; 0x108
    242c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2430:	e1877000 	orr	r7, r7, r0
    2434:	01830000 	orreq	r0, r3, r0
    2438:	e1a05008 	mov	r5, r8
    243c:	e5882088 	str	r2, [r8, #136]	; 0x88
    2440:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2444:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2448:	eaffffe9 	b	23f4 <__register_exitproc+0x94>
    244c:	00002744 	.word	0x00002744
    2450:	00000000 	.word	0x00000000

00002454 <__call_exitprocs>:
    2454:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2458:	e59f3168 	ldr	r3, [pc, #360]	; 25c8 <__call_exitprocs+0x174>
    245c:	e5933000 	ldr	r3, [r3]
    2460:	e24dd014 	sub	sp, sp, #20
    2464:	e58d3004 	str	r3, [sp, #4]
    2468:	e2833f52 	add	r3, r3, #328	; 0x148
    246c:	e58d0008 	str	r0, [sp, #8]
    2470:	e58d300c 	str	r3, [sp, #12]
    2474:	e1a07001 	mov	r7, r1
    2478:	e3a08001 	mov	r8, #1
    247c:	e59d3004 	ldr	r3, [sp, #4]
    2480:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2484:	e3560000 	cmp	r6, #0
    2488:	e59db00c 	ldr	r11, [sp, #12]
    248c:	0a000033 	beq	2560 <__call_exitprocs+0x10c>
    2490:	e5965004 	ldr	r5, [r6, #4]
    2494:	e2554001 	subs	r4, r5, #1
    2498:	5286a088 	addpl	r10, r6, #136	; 0x88
    249c:	5285501f 	addpl	r5, r5, #31
    24a0:	508a5105 	addpl	r5, r10, r5, lsl #2
    24a4:	5a000007 	bpl	24c8 <__call_exitprocs+0x74>
    24a8:	ea000029 	b	2554 <__call_exitprocs+0x100>
    24ac:	e5953000 	ldr	r3, [r5]
    24b0:	e1530007 	cmp	r3, r7
    24b4:	0a000005 	beq	24d0 <__call_exitprocs+0x7c>
    24b8:	e2444001 	sub	r4, r4, #1
    24bc:	e3740001 	cmn	r4, #1
    24c0:	e2455004 	sub	r5, r5, #4
    24c4:	0a000022 	beq	2554 <__call_exitprocs+0x100>
    24c8:	e3570000 	cmp	r7, #0
    24cc:	1afffff6 	bne	24ac <__call_exitprocs+0x58>
    24d0:	e5963004 	ldr	r3, [r6, #4]
    24d4:	e06a2005 	rsb	r2, r10, r5
    24d8:	e2433001 	sub	r3, r3, #1
    24dc:	e0862002 	add	r2, r6, r2
    24e0:	e1530004 	cmp	r3, r4
    24e4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    24e8:	13a01000 	movne	r1, #0
    24ec:	05864004 	streq	r4, [r6, #4]
    24f0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    24f4:	e3530000 	cmp	r3, #0
    24f8:	0affffee 	beq	24b8 <__call_exitprocs+0x64>
    24fc:	e1a02418 	lsl	r2, r8, r4
    2500:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2504:	e1120001 	tst	r2, r1
    2508:	e5969004 	ldr	r9, [r6, #4]
    250c:	0a000016 	beq	256c <__call_exitprocs+0x118>
    2510:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2514:	e1120001 	tst	r2, r1
    2518:	1a000016 	bne	2578 <__call_exitprocs+0x124>
    251c:	e59d0008 	ldr	r0, [sp, #8]
    2520:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2524:	e1a0e00f 	mov	lr, pc
    2528:	e12fff13 	bx	r3
    252c:	e5963004 	ldr	r3, [r6, #4]
    2530:	e1530009 	cmp	r3, r9
    2534:	1affffd0 	bne	247c <__call_exitprocs+0x28>
    2538:	e59b3000 	ldr	r3, [r11]
    253c:	e1530006 	cmp	r3, r6
    2540:	1affffcd 	bne	247c <__call_exitprocs+0x28>
    2544:	e2444001 	sub	r4, r4, #1
    2548:	e3740001 	cmn	r4, #1
    254c:	e2455004 	sub	r5, r5, #4
    2550:	1affffdc 	bne	24c8 <__call_exitprocs+0x74>
    2554:	e59f1070 	ldr	r1, [pc, #112]	; 25cc <__call_exitprocs+0x178>
    2558:	e3510000 	cmp	r1, #0
    255c:	1a000009 	bne	2588 <__call_exitprocs+0x134>
    2560:	e28dd014 	add	sp, sp, #20
    2564:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2568:	e12fff1e 	bx	lr
    256c:	e1a0e00f 	mov	lr, pc
    2570:	e12fff13 	bx	r3
    2574:	eaffffec 	b	252c <__call_exitprocs+0xd8>
    2578:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    257c:	e1a0e00f 	mov	lr, pc
    2580:	e12fff13 	bx	r3
    2584:	eaffffe8 	b	252c <__call_exitprocs+0xd8>
    2588:	e5963004 	ldr	r3, [r6, #4]
    258c:	e3530000 	cmp	r3, #0
    2590:	e5963000 	ldr	r3, [r6]
    2594:	1a000008 	bne	25bc <__call_exitprocs+0x168>
    2598:	e3530000 	cmp	r3, #0
    259c:	0a000006 	beq	25bc <__call_exitprocs+0x168>
    25a0:	e1a00006 	mov	r0, r6
    25a4:	e58b3000 	str	r3, [r11]
    25a8:	e320f000 	nop	{0}
    25ac:	e59b6000 	ldr	r6, [r11]
    25b0:	e3560000 	cmp	r6, #0
    25b4:	1affffb5 	bne	2490 <__call_exitprocs+0x3c>
    25b8:	eaffffe8 	b	2560 <__call_exitprocs+0x10c>
    25bc:	e1a0b006 	mov	r11, r6
    25c0:	e1a06003 	mov	r6, r3
    25c4:	eafffff9 	b	25b0 <__call_exitprocs+0x15c>
    25c8:	00002744 	.word	0x00002744
    25cc:	00000000 	.word	0x00000000

000025d0 <register_fini>:
    25d0:	e92d4008 	push	{r3, lr}
    25d4:	e59f3010 	ldr	r3, [pc, #16]	; 25ec <register_fini+0x1c>
    25d8:	e3530000 	cmp	r3, #0
    25dc:	159f000c 	ldrne	r0, [pc, #12]	; 25f0 <register_fini+0x20>
    25e0:	1bffff49 	blne	230c <atexit>
    25e4:	e8bd4008 	pop	{r3, lr}
    25e8:	e12fff1e 	bx	lr
    25ec:	0000276c 	.word	0x0000276c
    25f0:	000025f4 	.word	0x000025f4

000025f4 <__libc_fini_array>:
    25f4:	e92d4038 	push	{r3, r4, r5, lr}
    25f8:	e59f5030 	ldr	r5, [pc, #48]	; 2630 <__libc_fini_array+0x3c>
    25fc:	e59f4030 	ldr	r4, [pc, #48]	; 2634 <__libc_fini_array+0x40>
    2600:	e0654004 	rsb	r4, r5, r4
    2604:	e1b04144 	asrs	r4, r4, #2
    2608:	10855104 	addne	r5, r5, r4, lsl #2
    260c:	0a000004 	beq	2624 <__libc_fini_array+0x30>
    2610:	e5353004 	ldr	r3, [r5, #-4]!
    2614:	e1a0e00f 	mov	lr, pc
    2618:	e12fff13 	bx	r3
    261c:	e2544001 	subs	r4, r4, #1
    2620:	1afffffa 	bne	2610 <__libc_fini_array+0x1c>
    2624:	eb000050 	bl	276c <__libc_fini>
    2628:	e8bd4038 	pop	{r3, r4, r5, lr}
    262c:	e12fff1e 	bx	lr
    2630:	00002784 	.word	0x00002784
    2634:	00002788 	.word	0x00002788

00002638 <__cs3_premain>:
    2638:	e92d4008 	push	{r3, lr}
    263c:	eb00001d 	bl	26b8 <__libc_init_array>
    2640:	e59f3030 	ldr	r3, [pc, #48]	; 2678 <__cs3_premain+0x40>
    2644:	e3530000 	cmp	r3, #0
    2648:	15930000 	ldrne	r0, [r3]
    264c:	01a00003 	moveq	r0, r3
    2650:	e59f3024 	ldr	r3, [pc, #36]	; 267c <__cs3_premain+0x44>
    2654:	e3530000 	cmp	r3, #0
    2658:	15931000 	ldrne	r1, [r3]
    265c:	01a01003 	moveq	r1, r3
    2660:	e3a02000 	mov	r2, #0
    2664:	ebfff979 	bl	c50 <main>
    2668:	e59f3010 	ldr	r3, [pc, #16]	; 2680 <__cs3_premain+0x48>
    266c:	e3530000 	cmp	r3, #0
    2670:	1bffff2d 	blne	232c <exit>
    2674:	eafffffe 	b	2674 <__cs3_premain+0x3c>
	...
    2680:	0000232c 	.word	0x0000232c

00002684 <_exit>:
    2684:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    2688:	e3a00018 	mov	r0, #24
    268c:	e59f1004 	ldr	r1, [pc, #4]	; 2698 <_exit+0x14>
    2690:	ef123456 	svc	0x00123456
    2694:	eafffffe 	b	2694 <_exit+0x10>
    2698:	00020026 	.word	0x00020026

0000269c <__cs3_isr_interrupt>:
    269c:	eafffffe 	b	269c <__cs3_isr_interrupt>

000026a0 <__cs3_isr_undef>:
    26a0:	eafffffe 	b	26a0 <__cs3_isr_undef>

000026a4 <__cs3_isr_swi>:
    26a4:	eafffffe 	b	26a4 <__cs3_isr_swi>

000026a8 <__cs3_isr_pabort>:
    26a8:	eafffffe 	b	26a8 <__cs3_isr_pabort>

000026ac <__cs3_isr_dabort>:
    26ac:	eafffffe 	b	26ac <__cs3_isr_dabort>

000026b0 <__cs3_isr_irq>:
    26b0:	eafffffe 	b	26b0 <__cs3_isr_irq>

000026b4 <__cs3_isr_fiq>:
    26b4:	eafffffe 	b	26b4 <__cs3_isr_fiq>

000026b8 <__libc_init_array>:
    26b8:	e92d4070 	push	{r4, r5, r6, lr}
    26bc:	e59f506c 	ldr	r5, [pc, #108]	; 2730 <__libc_init_array+0x78>
    26c0:	e59f606c 	ldr	r6, [pc, #108]	; 2734 <__libc_init_array+0x7c>
    26c4:	e0656006 	rsb	r6, r5, r6
    26c8:	e1b06146 	asrs	r6, r6, #2
    26cc:	12455004 	subne	r5, r5, #4
    26d0:	13a04000 	movne	r4, #0
    26d4:	0a000005 	beq	26f0 <__libc_init_array+0x38>
    26d8:	e5b53004 	ldr	r3, [r5, #4]!
    26dc:	e2844001 	add	r4, r4, #1
    26e0:	e1a0e00f 	mov	lr, pc
    26e4:	e12fff13 	bx	r3
    26e8:	e1560004 	cmp	r6, r4
    26ec:	1afffff9 	bne	26d8 <__libc_init_array+0x20>
    26f0:	e59f5040 	ldr	r5, [pc, #64]	; 2738 <__libc_init_array+0x80>
    26f4:	e59f6040 	ldr	r6, [pc, #64]	; 273c <__libc_init_array+0x84>
    26f8:	e0656006 	rsb	r6, r5, r6
    26fc:	eb000012 	bl	274c <_init>
    2700:	e1b06146 	asrs	r6, r6, #2
    2704:	12455004 	subne	r5, r5, #4
    2708:	13a04000 	movne	r4, #0
    270c:	0a000005 	beq	2728 <__libc_init_array+0x70>
    2710:	e5b53004 	ldr	r3, [r5, #4]!
    2714:	e2844001 	add	r4, r4, #1
    2718:	e1a0e00f 	mov	lr, pc
    271c:	e12fff13 	bx	r3
    2720:	e1560004 	cmp	r6, r4
    2724:	1afffff9 	bne	2710 <__libc_init_array+0x58>
    2728:	e8bd4070 	pop	{r4, r5, r6, lr}
    272c:	e12fff1e 	bx	lr
    2730:	00002764 	.word	0x00002764
    2734:	00002764 	.word	0x00002764
    2738:	00002764 	.word	0x00002764
    273c:	0000276c 	.word	0x0000276c

Disassembly of section .rodata:

00002744 <_global_impure_ptr>:
    2744:	000027b0 00000043                       .'..C...

0000274c <_init>:
    274c:	e1a0c00d 	mov	r12, sp
    2750:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2754:	e24cb004 	sub	r11, r12, #4
    2758:	e24bd028 	sub	sp, r11, #40	; 0x28
    275c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2760:	e12fff1e 	bx	lr

00002764 <__init_array_start>:
    2764:	000025d0 	.word	0x000025d0

00002768 <__frame_dummy_init_array_entry>:
    2768:	00000208                                ....

0000276c <__libc_fini>:
    276c:	e1a0c00d 	mov	r12, sp
    2770:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2774:	e24cb004 	sub	r11, r12, #4
    2778:	e24bd028 	sub	sp, r11, #40	; 0x28
    277c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2780:	e12fff1e 	bx	lr

00002784 <__fini_array_start>:
    2784:	000001c4 	.word	0x000001c4

00002788 <__cs3_regions>:
	...
    2794:	00002be0 	.word	0x00002be0
    2798:	00000020 	.word	0x00000020

0000279c <__cs3_regions_end>:
    279c:	00000000 	.word	0x00000000
