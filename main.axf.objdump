
C:/intelFPGA_lite/18.1/Final2/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
       0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
      20:	40 00 00 00 bc 22 00 00 c0 22 00 00 c4 22 00 00     @...."..."..."..
      30:	c8 22 00 00 b8 22 00 00 cc 22 00 00 d0 22 00 00     ."..."..."..."..

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00085e 	bl	2254 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00002408 	.word	0x00002408

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002840 	.word	0x00002840

00000124 <__cs3_heap_start_ptr>:
     124:	00002868 	.word	0x00002868

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00002848 	.word	0x00002848
     170:	0000284b 	.word	0x0000284b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002848 	.word	0x00002848
     1bc:	00002848 	.word	0x00002848
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002848 	.word	0x00002848
     200:	00000000 	.word	0x00000000
     204:	0000235c 	.word	0x0000235c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000235c 	.word	0x0000235c
     250:	0000284c 	.word	0x0000284c
     254:	00002408 	.word	0x00002408
     258:	00000000 	.word	0x00000000

0000025c <check_KEYs>:
/****************************************************************************************
* Subroutine to read KEYs
* Carry over from example code I never deleted
* Might come in useful later otherwise delete
****************************************************************************************/
void check_KEYs(int * KEY0, int * KEY1, int * counter) {
     25c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    volatile int * KEY_ptr = (int *)KEY_BASE;
    volatile int * audio_ptr = (int *)AUDIO_BASE;
    int KEY_value;
    KEY_value = *(KEY_ptr); // read the pushbutton KEY values
     260:	e3a03000 	mov	r3, #0
     264:	e34f3f20 	movt	r3, #65312	; 0xff20
     268:	e5934050 	ldr	r4, [r3, #80]	; 0x50
    while (*KEY_ptr); // wait for pushbutton KEY release
     26c:	e3a0c000 	mov	r12, #0
     270:	e34fcf20 	movt	r12, #65312	; 0xff20
     274:	e59c3050 	ldr	r3, [r12, #80]	; 0x50
     278:	e3530000 	cmp	r3, #0
     27c:	1afffffc 	bne	274 <check_KEYs+0x18>

    if (KEY_value == 0x1) {
     280:	e3540001 	cmp	r4, #1
     284:	1a000009 	bne	2b0 <check_KEYs+0x54>
        // reset counter to start recording
        *counter = 0;
     288:	e3a01000 	mov	r1, #0
     28c:	e5821000 	str	r1, [r2]
        // clear audio-in FIFO
        *(audio_ptr) = 0x4;
     290:	e3033fff 	movw	r3, #16383	; 0x3fff
     294:	e34f3f20 	movt	r3, #65312	; 0xff20
     298:	e3a02004 	mov	r2, #4
     29c:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
        *(audio_ptr) = 0x0;
     2a0:	e5031fbf 	str	r1, [r3, #-4031]	; 0xfffff041
        *KEY0 = 1;
     2a4:	e3a03001 	mov	r3, #1
     2a8:	e5803000 	str	r3, [r0]
     2ac:	ea00000a 	b	2dc <check_KEYs+0x80>
    } 
    else if (KEY_value == 0x2) {
     2b0:	e3540002 	cmp	r4, #2
     2b4:	1a000008 	bne	2dc <check_KEYs+0x80>
        // reset counter to start playback
        *counter = 0;
     2b8:	e3a00000 	mov	r0, #0
     2bc:	e5820000 	str	r0, [r2]
        // clear audio-out FIFO
        *(audio_ptr) = 0x8;
     2c0:	e3033fff 	movw	r3, #16383	; 0x3fff
     2c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     2c8:	e3a02008 	mov	r2, #8
     2cc:	e5032fbf 	str	r2, [r3, #-4031]	; 0xfffff041
        *(audio_ptr) = 0x0;
     2d0:	e5030fbf 	str	r0, [r3, #-4031]	; 0xfffff041
        *KEY1 = 1;
     2d4:	e3a03001 	mov	r3, #1
     2d8:	e5813000 	str	r3, [r1]
    }
}
     2dc:	e8bd0010 	ldmfd	sp!, {r4}
     2e0:	e12fff1e 	bx	lr

000002e4 <pow_me>:

//Goddammit I need to redefine pow too
double pow_me(double in, int power) {
     2e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     2e8:	e1a04000 	mov	r4, r0
     2ec:	e1a05001 	mov	r5, r1
    double out = in;

    if(power == 0) return 1;
     2f0:	e3520000 	cmp	r2, #0
     2f4:	0a00000a 	beq	324 <pow_me+0x40>

    for(int i = 0; i < (power - 1); i++) {
     2f8:	e2427001 	sub	r7, r2, #1
     2fc:	e3570000 	cmp	r7, #0
     300:	da00000b 	ble	334 <pow_me+0x50>
     304:	e3a06000 	mov	r6, #0
        out = out * in;
     308:	e1a02004 	mov	r2, r4
     30c:	e1a03005 	mov	r3, r5
     310:	eb0004f2 	bl	16e0 <__aeabi_dmul>
double pow_me(double in, int power) {
    double out = in;

    if(power == 0) return 1;

    for(int i = 0; i < (power - 1); i++) {
     314:	e2866001 	add	r6, r6, #1
     318:	e1560007 	cmp	r6, r7
     31c:	1afffff9 	bne	308 <pow_me+0x24>
     320:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

//Goddammit I need to redefine pow too
double pow_me(double in, int power) {
    double out = in;

    if(power == 0) return 1;
     324:	e3a00000 	mov	r0, #0
     328:	e3a01000 	mov	r1, #0
     32c:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     330:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    for(int i = 0; i < (power - 1); i++) {
        out = out * in;
    }

    return out;
}
     334:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000338 <sin_me>:

// Just a 5th order taylor series approximation, if it's too slow there are faster algorithms out there
// It's accurate enough for visual use
// I hope to figure out the STD library
// Improvement: Use BKM or CORDIC algorithms
double sin_me(double in) {
     338:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     33c:	e1a08000 	mov	r8, r0
     340:	e1a09001 	mov	r9, r1
    //First reduce the input to be between 0 and pi/2
    double quotient = in;
    double quadrant = 0;
     344:	e3a04000 	mov	r4, #0
     348:	e3a05000 	mov	r5, #0

    while((quotient - PI/2) > 0) {
     34c:	e1a0a004 	mov	r10, r4
     350:	e1a0b005 	mov	r11, r5
     354:	ea000010 	b	39c <sin_me+0x64>
        quotient -= PI/2;
        quadrant += 1;
     358:	e1a00004 	mov	r0, r4
     35c:	e1a01005 	mov	r1, r5
     360:	e3a02000 	mov	r2, #0
     364:	e3a03000 	mov	r3, #0
     368:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     36c:	eb0003d7 	bl	12d0 <__adddf3>
     370:	e1a04000 	mov	r4, r0
     374:	e1a05001 	mov	r5, r1

        if(quadrant == 4) quadrant = 0;
     378:	e3a02000 	mov	r2, #0
     37c:	e3a03000 	mov	r3, #0
     380:	e3443010 	movt	r3, #16400	; 0x4010
     384:	eb00062f 	bl	1c48 <__aeabi_dcmpeq>
     388:	e3500000 	cmp	r0, #0
     38c:	11a0400a 	movne	r4, r10
     390:	11a0500b 	movne	r5, r11
     394:	e1a08006 	mov	r8, r6
     398:	e1a09007 	mov	r9, r7
double sin_me(double in) {
    //First reduce the input to be between 0 and pi/2
    double quotient = in;
    double quadrant = 0;

    while((quotient - PI/2) > 0) {
     39c:	e1a00008 	mov	r0, r8
     3a0:	e1a01009 	mov	r1, r9
     3a4:	e3042550 	movw	r2, #17744	; 0x4550
     3a8:	e3452452 	movt	r2, #21586	; 0x5452
     3ac:	e30231fb 	movw	r3, #8699	; 0x21fb
     3b0:	e3433ff9 	movt	r3, #16377	; 0x3ff9
     3b4:	eb0003c4 	bl	12cc <__aeabi_dsub>
     3b8:	e1a06000 	mov	r6, r0
     3bc:	e1a07001 	mov	r7, r1
     3c0:	e1a0200a 	mov	r2, r10
     3c4:	e1a0300b 	mov	r3, r11
     3c8:	eb000636 	bl	1ca8 <__aeabi_dcmpgt>
     3cc:	e3500000 	cmp	r0, #0
     3d0:	1affffe0 	bne	358 <sin_me+0x20>
        quadrant += 1;

        if(quadrant == 4) quadrant = 0;
    }

    if(quadrant == 0) {
     3d4:	e1a00004 	mov	r0, r4
     3d8:	e1a01005 	mov	r1, r5
     3dc:	e3a02000 	mov	r2, #0
     3e0:	e3a03000 	mov	r3, #0
     3e4:	eb000617 	bl	1c48 <__aeabi_dcmpeq>
     3e8:	e3500000 	cmp	r0, #0
     3ec:	0a00001e 	beq	46c <sin_me+0x134>
        double taylor_value = quotient - (pow_me(quotient, 3) / 6) + (pow_me(quotient, 5) / 120);
     3f0:	e1a00008 	mov	r0, r8
     3f4:	e1a01009 	mov	r1, r9
     3f8:	e3a02003 	mov	r2, #3
     3fc:	ebffffb8 	bl	2e4 <pow_me>
     400:	e3a02000 	mov	r2, #0
     404:	e3a03000 	mov	r3, #0
     408:	e3443018 	movt	r3, #16408	; 0x4018
     40c:	eb000557 	bl	1970 <__aeabi_ddiv>
     410:	e1a02000 	mov	r2, r0
     414:	e1a03001 	mov	r3, r1
     418:	e1a00008 	mov	r0, r8
     41c:	e1a01009 	mov	r1, r9
     420:	eb0003a9 	bl	12cc <__aeabi_dsub>
     424:	e1a04000 	mov	r4, r0
     428:	e1a05001 	mov	r5, r1
     42c:	e1a00008 	mov	r0, r8
     430:	e1a01009 	mov	r1, r9
     434:	e3a02005 	mov	r2, #5
     438:	ebffffa9 	bl	2e4 <pow_me>
     43c:	e3a02000 	mov	r2, #0
     440:	e3a03000 	mov	r3, #0
     444:	e344305e 	movt	r3, #16478	; 0x405e
     448:	eb000548 	bl	1970 <__aeabi_ddiv>
     44c:	e1a02000 	mov	r2, r0
     450:	e1a03001 	mov	r3, r1
     454:	e1a00004 	mov	r0, r4
     458:	e1a01005 	mov	r1, r5
     45c:	eb00039b 	bl	12d0 <__adddf3>
     460:	e1a03000 	mov	r3, r0
     464:	e1a02001 	mov	r2, r1
        return taylor_value;
     468:	ea000078 	b	650 <sin_me+0x318>
    } else if(quadrant == 1) {
     46c:	e1a00004 	mov	r0, r4
     470:	e1a01005 	mov	r1, r5
     474:	e3a02000 	mov	r2, #0
     478:	e3a03000 	mov	r3, #0
     47c:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     480:	eb0005f0 	bl	1c48 <__aeabi_dcmpeq>
     484:	e3500000 	cmp	r0, #0
     488:	0a000025 	beq	524 <sin_me+0x1ec>
        double taylor_value = (PI/2 - quotient) - (pow_me(PI/2 - quotient, 3) / 6) + (pow_me(PI/2 - quotient, 5) / 120);
     48c:	e3040550 	movw	r0, #17744	; 0x4550
     490:	e3450452 	movt	r0, #21586	; 0x5452
     494:	e30211fb 	movw	r1, #8699	; 0x21fb
     498:	e3431ff9 	movt	r1, #16377	; 0x3ff9
     49c:	e1a02008 	mov	r2, r8
     4a0:	e1a03009 	mov	r3, r9
     4a4:	eb000388 	bl	12cc <__aeabi_dsub>
     4a8:	e1a04000 	mov	r4, r0
     4ac:	e1a05001 	mov	r5, r1
     4b0:	e3a02003 	mov	r2, #3
     4b4:	ebffff8a 	bl	2e4 <pow_me>
     4b8:	e3a02000 	mov	r2, #0
     4bc:	e3a03000 	mov	r3, #0
     4c0:	e3443018 	movt	r3, #16408	; 0x4018
     4c4:	eb000529 	bl	1970 <__aeabi_ddiv>
     4c8:	e1a02000 	mov	r2, r0
     4cc:	e1a03001 	mov	r3, r1
     4d0:	e1a00004 	mov	r0, r4
     4d4:	e1a01005 	mov	r1, r5
     4d8:	eb00037b 	bl	12cc <__aeabi_dsub>
     4dc:	e1a06000 	mov	r6, r0
     4e0:	e1a07001 	mov	r7, r1
     4e4:	e1a00004 	mov	r0, r4
     4e8:	e1a01005 	mov	r1, r5
     4ec:	e3a02005 	mov	r2, #5
     4f0:	ebffff7b 	bl	2e4 <pow_me>
     4f4:	e3a02000 	mov	r2, #0
     4f8:	e3a03000 	mov	r3, #0
     4fc:	e344305e 	movt	r3, #16478	; 0x405e
     500:	eb00051a 	bl	1970 <__aeabi_ddiv>
     504:	e1a02000 	mov	r2, r0
     508:	e1a03001 	mov	r3, r1
     50c:	e1a00006 	mov	r0, r6
     510:	e1a01007 	mov	r1, r7
     514:	eb00036d 	bl	12d0 <__adddf3>
        return taylor_value;
     518:	e1a03000 	mov	r3, r0
     51c:	e1a02001 	mov	r2, r1
     520:	ea00004a 	b	650 <sin_me+0x318>
    }
    else if(quadrant == 2) {
     524:	e1a00004 	mov	r0, r4
     528:	e1a01005 	mov	r1, r5
     52c:	e3a02000 	mov	r2, #0
     530:	e3a03101 	mov	r3, #1073741824	; 0x40000000
     534:	eb0005c3 	bl	1c48 <__aeabi_dcmpeq>
     538:	e3500000 	cmp	r0, #0
     53c:	0a00001e 	beq	5bc <sin_me+0x284>
        double taylor_value = (quotient) - (pow_me(quotient, 3) / 6) + (pow_me(quotient, 5) / 120);
     540:	e1a00008 	mov	r0, r8
     544:	e1a01009 	mov	r1, r9
     548:	e3a02003 	mov	r2, #3
     54c:	ebffff64 	bl	2e4 <pow_me>
     550:	e3a02000 	mov	r2, #0
     554:	e3a03000 	mov	r3, #0
     558:	e3443018 	movt	r3, #16408	; 0x4018
     55c:	eb000503 	bl	1970 <__aeabi_ddiv>
     560:	e1a02000 	mov	r2, r0
     564:	e1a03001 	mov	r3, r1
     568:	e1a00008 	mov	r0, r8
     56c:	e1a01009 	mov	r1, r9
     570:	eb000355 	bl	12cc <__aeabi_dsub>
     574:	e1a04000 	mov	r4, r0
     578:	e1a05001 	mov	r5, r1
     57c:	e1a00008 	mov	r0, r8
     580:	e1a01009 	mov	r1, r9
     584:	e3a02005 	mov	r2, #5
     588:	ebffff55 	bl	2e4 <pow_me>
     58c:	e3a02000 	mov	r2, #0
     590:	e3a03000 	mov	r3, #0
     594:	e344305e 	movt	r3, #16478	; 0x405e
     598:	eb0004f4 	bl	1970 <__aeabi_ddiv>
     59c:	e1a02000 	mov	r2, r0
     5a0:	e1a03001 	mov	r3, r1
     5a4:	e1a00004 	mov	r0, r4
     5a8:	e1a01005 	mov	r1, r5
     5ac:	eb000347 	bl	12d0 <__adddf3>
        return -taylor_value;
     5b0:	e1a03000 	mov	r3, r0
     5b4:	e2812102 	add	r2, r1, #-2147483648	; 0x80000000
     5b8:	ea000024 	b	650 <sin_me+0x318>
    }
    else {
        double taylor_value = (PI/2 - quotient) - (pow_me(PI/2 - quotient, 3) / 6) + (pow_me(PI/2 - quotient, 5) / 120);
     5bc:	e3040550 	movw	r0, #17744	; 0x4550
     5c0:	e3450452 	movt	r0, #21586	; 0x5452
     5c4:	e30211fb 	movw	r1, #8699	; 0x21fb
     5c8:	e3431ff9 	movt	r1, #16377	; 0x3ff9
     5cc:	e1a02008 	mov	r2, r8
     5d0:	e1a03009 	mov	r3, r9
     5d4:	eb00033c 	bl	12cc <__aeabi_dsub>
     5d8:	e1a04000 	mov	r4, r0
     5dc:	e1a05001 	mov	r5, r1
     5e0:	e3a02003 	mov	r2, #3
     5e4:	ebffff3e 	bl	2e4 <pow_me>
     5e8:	e3a02000 	mov	r2, #0
     5ec:	e3a03000 	mov	r3, #0
     5f0:	e3443018 	movt	r3, #16408	; 0x4018
     5f4:	eb0004dd 	bl	1970 <__aeabi_ddiv>
     5f8:	e1a02000 	mov	r2, r0
     5fc:	e1a03001 	mov	r3, r1
     600:	e1a00004 	mov	r0, r4
     604:	e1a01005 	mov	r1, r5
     608:	eb00032f 	bl	12cc <__aeabi_dsub>
     60c:	e1a06000 	mov	r6, r0
     610:	e1a07001 	mov	r7, r1
     614:	e1a00004 	mov	r0, r4
     618:	e1a01005 	mov	r1, r5
     61c:	e3a02005 	mov	r2, #5
     620:	ebffff2f 	bl	2e4 <pow_me>
     624:	e3a02000 	mov	r2, #0
     628:	e3a03000 	mov	r3, #0
     62c:	e344305e 	movt	r3, #16478	; 0x405e
     630:	eb0004ce 	bl	1970 <__aeabi_ddiv>
     634:	e1a02000 	mov	r2, r0
     638:	e1a03001 	mov	r3, r1
     63c:	e1a00006 	mov	r0, r6
     640:	e1a01007 	mov	r1, r7
     644:	eb000321 	bl	12d0 <__adddf3>
        return -taylor_value;
     648:	e1a03000 	mov	r3, r0
     64c:	e2812102 	add	r2, r1, #-2147483648	; 0x80000000
    }
    
    return -1;
}
     650:	e1a00003 	mov	r0, r3
     654:	e1a01002 	mov	r1, r2
     658:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000065c <sqrt>:
/*
 * Copied from https://stackoverflow.com/questions/11644441/fast-inverse-square-root-on-x64/11644533
 * A inv square root function, derived from an video game implementation
 * Does some weird witchcraft
 */
double sqrt(double number) {
     65c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     660:	e1a04000 	mov	r4, r0
     664:	e1a05001 	mov	r5, r1
    double y = number;
    double x2 = y * 0.5;
     668:	e3a02000 	mov	r2, #0
     66c:	e3a03000 	mov	r3, #0
     670:	e3433fe0 	movt	r3, #16352	; 0x3fe0
     674:	eb000419 	bl	16e0 <__aeabi_dmul>
     678:	e1a06000 	mov	r6, r0
     67c:	e1a07001 	mov	r7, r1
    long long i = *(long long *) &y;
    // The magic number is for doubles is from https://cs.uwaterloo.ca/~m32rober/rsqrt.pdf
    i = 0x5fe6eb50c7b537a9 - (i >> 1);
     680:	e1b050c5 	asrs	r5, r5, #1
     684:	e1a04064 	rrx	r4, r4
    y = *(double *) &i;
     688:	e30327a9 	movw	r2, #14249	; 0x37a9
     68c:	e34c27b5 	movt	r2, #51125	; 0xc7b5
     690:	e30e3b50 	movw	r3, #60240	; 0xeb50
     694:	e3453fe6 	movt	r3, #24550	; 0x5fe6
     698:	e0524004 	subs	r4, r2, r4
     69c:	e0c35005 	sbc	r5, r3, r5
    y = y * (1.5 - (x2 * y * y));   // 1st iteration
     6a0:	e1a02004 	mov	r2, r4
     6a4:	e1a03005 	mov	r3, r5
     6a8:	eb00040c 	bl	16e0 <__aeabi_dmul>
     6ac:	e1a02000 	mov	r2, r0
     6b0:	e1a03001 	mov	r3, r1
     6b4:	e1a00004 	mov	r0, r4
     6b8:	e1a01005 	mov	r1, r5
     6bc:	eb000407 	bl	16e0 <__aeabi_dmul>
     6c0:	e1a02000 	mov	r2, r0
     6c4:	e1a03001 	mov	r3, r1
     6c8:	e3a00000 	mov	r0, #0
     6cc:	e3a01000 	mov	r1, #0
     6d0:	e3431ff8 	movt	r1, #16376	; 0x3ff8
     6d4:	eb0002fc 	bl	12cc <__aeabi_dsub>
     6d8:	e1a02000 	mov	r2, r0
     6dc:	e1a03001 	mov	r3, r1
     6e0:	e1a00004 	mov	r0, r4
     6e4:	e1a01005 	mov	r1, r5
     6e8:	eb0003fc 	bl	16e0 <__aeabi_dmul>
     6ec:	e1a04000 	mov	r4, r0
     6f0:	e1a05001 	mov	r5, r1
    y  = y * ( 1.5 - ( x2 * y * y ) );   // 2nd iteration, this can be removed
     6f4:	e1a00006 	mov	r0, r6
     6f8:	e1a01007 	mov	r1, r7
     6fc:	e1a02004 	mov	r2, r4
     700:	e1a03005 	mov	r3, r5
     704:	eb0003f5 	bl	16e0 <__aeabi_dmul>
     708:	e1a02000 	mov	r2, r0
     70c:	e1a03001 	mov	r3, r1
     710:	e1a00004 	mov	r0, r4
     714:	e1a01005 	mov	r1, r5
     718:	eb0003f0 	bl	16e0 <__aeabi_dmul>
     71c:	e1a02000 	mov	r2, r0
     720:	e1a03001 	mov	r3, r1
     724:	e3a00000 	mov	r0, #0
     728:	e3a01000 	mov	r1, #0
     72c:	e3431ff8 	movt	r1, #16376	; 0x3ff8
     730:	eb0002e5 	bl	12cc <__aeabi_dsub>
     734:	e1a02000 	mov	r2, r0
     738:	e1a03001 	mov	r3, r1
     73c:	e1a00004 	mov	r0, r4
     740:	e1a01005 	mov	r1, r5
     744:	eb0003e5 	bl	16e0 <__aeabi_dmul>
     748:	e1a02000 	mov	r2, r0
     74c:	e1a03001 	mov	r3, r1
    return 1/y;
     750:	e3a00000 	mov	r0, #0
     754:	e3a01000 	mov	r1, #0
     758:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     75c:	eb000483 	bl	1970 <__aeabi_ddiv>
}
     760:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000764 <cos_me>:

double cos_me(double in) {
     764:	e92d4008 	push	{r3, lr}
    return sin_me(in + PI/2);
     768:	e3042550 	movw	r2, #17744	; 0x4550
     76c:	e3452452 	movt	r2, #21586	; 0x5452
     770:	e30231fb 	movw	r3, #8699	; 0x21fb
     774:	e3433ff9 	movt	r3, #16377	; 0x3ff9
     778:	eb0002d4 	bl	12d0 <__adddf3>
     77c:	ebfffeed 	bl	338 <sin_me>
}
     780:	e8bd8008 	pop	{r3, pc}

00000784 <average_iter>:

inline Im cexp_im(Im im_in) {
    return sin_me(im_in);
}

void average_iter(Re buffer[], Re prev[], Re prev2[]) {
     784:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     788:	e1a09000 	mov	r9, r0
     78c:	e1a0a001 	mov	r10, r1
     790:	e1a0b002 	mov	r11, r2
     794:	e3a08000 	mov	r8, #0
    for(int i = 0; i < BUF_SIZE; i++) {
        buffer[i] = (buffer[i] + prev[i] + prev2[i]) / 3;
     798:	e3a06000 	mov	r6, #0
     79c:	e3a07000 	mov	r7, #0
     7a0:	e3447008 	movt	r7, #16392	; 0x4008
     7a4:	e18900d8 	ldrd	r0, [r9, r8]
     7a8:	e18a20d8 	ldrd	r2, [r10, r8]
     7ac:	eb0002c7 	bl	12d0 <__adddf3>
     7b0:	e18b20d8 	ldrd	r2, [r11, r8]
     7b4:	eb0002c5 	bl	12d0 <__adddf3>
     7b8:	e1a02006 	mov	r2, r6
     7bc:	e1a03007 	mov	r3, r7
     7c0:	eb00046a 	bl	1970 <__aeabi_ddiv>
     7c4:	e18900f8 	strd	r0, [r9, r8]

        prev2[i] = prev[i];
     7c8:	e18a20d8 	ldrd	r2, [r10, r8]
     7cc:	e18b20f8 	strd	r2, [r11, r8]
        prev[i] = buffer[i];
     7d0:	e18940d8 	ldrd	r4, [r9, r8]
     7d4:	e18a40f8 	strd	r4, [r10, r8]
     7d8:	e2888008 	add	r8, r8, #8
inline Im cexp_im(Im im_in) {
    return sin_me(im_in);
}

void average_iter(Re buffer[], Re prev[], Re prev2[]) {
    for(int i = 0; i < BUF_SIZE; i++) {
     7dc:	e3580a01 	cmp	r8, #4096	; 0x1000
     7e0:	1affffef 	bne	7a4 <average_iter+0x20>
        buffer[i] = (buffer[i] + prev[i] + prev2[i]) / 3;

        prev2[i] = prev[i];
        prev[i] = buffer[i];
    }
}
     7e4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

000007e8 <hann_window>:

void hann_window(Re buffer[]) {
     7e8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
     7ec:	e1a0b000 	mov	r11, r0
    for(int i = 0; i < BUF_SIZE; i++) {
     7f0:	e3a0a000 	mov	r10, #0
        double multi = 0.5 * (1 - cos_me(2*PI*i / (BUF_SIZE-1)));
     7f4:	e3046550 	movw	r6, #17744	; 0x4550
     7f8:	e3456452 	movt	r6, #21586	; 0x5452
     7fc:	e30271fb 	movw	r7, #8699	; 0x21fb
     800:	e3447019 	movt	r7, #16409	; 0x4019
     804:	e3a08000 	mov	r8, #0
     808:	e3a09a0f 	mov	r9, #61440	; 0xf000
     80c:	e344907f 	movt	r9, #16511	; 0x407f
     810:	e1a0000a 	mov	r0, r10
     814:	eb00037a 	bl	1604 <__aeabi_i2d>
     818:	e1a02006 	mov	r2, r6
     81c:	e1a03007 	mov	r3, r7
     820:	eb0003ae 	bl	16e0 <__aeabi_dmul>
     824:	e1a02008 	mov	r2, r8
     828:	e1a03009 	mov	r3, r9
     82c:	eb00044f 	bl	1970 <__aeabi_ddiv>
     830:	ebffffcb 	bl	764 <cos_me>
     834:	e1a02000 	mov	r2, r0
     838:	e1a03001 	mov	r3, r1
        buffer[i] = buffer[i] * multi;
     83c:	e1cb40d0 	ldrd	r4, [r11]
    }
}

void hann_window(Re buffer[]) {
    for(int i = 0; i < BUF_SIZE; i++) {
        double multi = 0.5 * (1 - cos_me(2*PI*i / (BUF_SIZE-1)));
     840:	e3a00000 	mov	r0, #0
     844:	e3a01000 	mov	r1, #0
     848:	e3431ff0 	movt	r1, #16368	; 0x3ff0
     84c:	eb00029e 	bl	12cc <__aeabi_dsub>
     850:	e3a02000 	mov	r2, #0
     854:	e3a03000 	mov	r3, #0
     858:	e3433fe0 	movt	r3, #16352	; 0x3fe0
     85c:	eb00039f 	bl	16e0 <__aeabi_dmul>
     860:	e1a02000 	mov	r2, r0
     864:	e1a03001 	mov	r3, r1
        buffer[i] = buffer[i] * multi;
     868:	e1a00004 	mov	r0, r4
     86c:	e1a01005 	mov	r1, r5
     870:	eb00039a 	bl	16e0 <__aeabi_dmul>
     874:	e0cb00f8 	strd	r0, [r11], #8
        prev[i] = buffer[i];
    }
}

void hann_window(Re buffer[]) {
    for(int i = 0; i < BUF_SIZE; i++) {
     878:	e28aa001 	add	r10, r10, #1
     87c:	e35a0c02 	cmp	r10, #512	; 0x200
     880:	1affffe2 	bne	810 <hann_window+0x28>
        double multi = 0.5 * (1 - cos_me(2*PI*i / (BUF_SIZE-1)));
        buffer[i] = buffer[i] * multi;
    }    
}
     884:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000888 <blackman_window>:

void blackman_window(Re buffer[]) {
     888:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     88c:	e24dd00c 	sub	sp, sp, #12
     890:	e1a0b000 	mov	r11, r0
    double a0 = 0.35875;
    double a1 = 0.48829;
    double a2 = 0.14128;
    double a3 = 0.01168;

    for(int i = 0; i < BUF_SIZE; i++) {
     894:	e3a0a000 	mov	r10, #0
        double multi = a0 - a1 * cos_me(2*PI*i / (BUF_SIZE-1)) + a2 * cos_me(4*PI*i / (BUF_SIZE-1)) - a3 * cos_me(6*PI*i / (BUF_SIZE-1));
     898:	e3a08000 	mov	r8, #0
     89c:	e3a09a0f 	mov	r9, #61440	; 0xf000
     8a0:	e344907f 	movt	r9, #16511	; 0x407f
     8a4:	e1a0000a 	mov	r0, r10
     8a8:	eb000355 	bl	1604 <__aeabi_i2d>
     8ac:	e1cd00f0 	strd	r0, [sp]
     8b0:	e3042550 	movw	r2, #17744	; 0x4550
     8b4:	e3452452 	movt	r2, #21586	; 0x5452
     8b8:	e30231fb 	movw	r3, #8699	; 0x21fb
     8bc:	e3443019 	movt	r3, #16409	; 0x4019
     8c0:	eb000386 	bl	16e0 <__aeabi_dmul>
     8c4:	e1a02008 	mov	r2, r8
     8c8:	e1a03009 	mov	r3, r9
     8cc:	eb000427 	bl	1970 <__aeabi_ddiv>
     8d0:	ebffffa3 	bl	764 <cos_me>
     8d4:	e1a04000 	mov	r4, r0
     8d8:	e1a05001 	mov	r5, r1
     8dc:	e1cd00d0 	ldrd	r0, [sp]
     8e0:	e3042550 	movw	r2, #17744	; 0x4550
     8e4:	e3452452 	movt	r2, #21586	; 0x5452
     8e8:	e30231fb 	movw	r3, #8699	; 0x21fb
     8ec:	e3443029 	movt	r3, #16425	; 0x4029
     8f0:	eb00037a 	bl	16e0 <__aeabi_dmul>
     8f4:	e1a02008 	mov	r2, r8
     8f8:	e1a03009 	mov	r3, r9
     8fc:	eb00041b 	bl	1970 <__aeabi_ddiv>
     900:	ebffff97 	bl	764 <cos_me>
     904:	e1a06000 	mov	r6, r0
     908:	e1a07001 	mov	r7, r1
     90c:	e1a00004 	mov	r0, r4
     910:	e1a01005 	mov	r1, r5
     914:	e30a2f8e 	movw	r2, #44942	; 0xaf8e
     918:	e34b233d 	movt	r2, #45885	; 0xb33d
     91c:	e3043024 	movw	r3, #16420	; 0x4024
     920:	e3433fdf 	movt	r3, #16351	; 0x3fdf
     924:	eb00036d 	bl	16e0 <__aeabi_dmul>
     928:	e1a02000 	mov	r2, r0
     92c:	e1a03001 	mov	r3, r1
     930:	e30208f6 	movw	r0, #10486	; 0x28f6
     934:	e3480f5c 	movt	r0, #36700	; 0x8f5c
     938:	e30f15c2 	movw	r1, #62914	; 0xf5c2
     93c:	e3431fd6 	movt	r1, #16342	; 0x3fd6
     940:	eb000261 	bl	12cc <__aeabi_dsub>
     944:	e1a04000 	mov	r4, r0
     948:	e1a05001 	mov	r5, r1
     94c:	e1a00006 	mov	r0, r6
     950:	e1a01007 	mov	r1, r7
     954:	e30128bd 	movw	r2, #6333	; 0x18bd
     958:	e34829ca 	movt	r2, #35274	; 0x89ca
     95c:	e3013576 	movw	r3, #5494	; 0x1576
     960:	e3433fc2 	movt	r3, #16322	; 0x3fc2
     964:	eb00035d 	bl	16e0 <__aeabi_dmul>
     968:	e1a02000 	mov	r2, r0
     96c:	e1a03001 	mov	r3, r1
     970:	e1a00004 	mov	r0, r4
     974:	e1a01005 	mov	r1, r5
     978:	eb000254 	bl	12d0 <__adddf3>
     97c:	e1a06000 	mov	r6, r0
     980:	e1a07001 	mov	r7, r1
     984:	e1cd00d0 	ldrd	r0, [sp]
     988:	e30b23fc 	movw	r2, #46076	; 0xb3fc
     98c:	e3472f3d 	movt	r2, #32573	; 0x7f3d
     990:	e30d397c 	movw	r3, #55676	; 0xd97c
     994:	e3443032 	movt	r3, #16434	; 0x4032
     998:	eb000350 	bl	16e0 <__aeabi_dmul>
     99c:	e1a02008 	mov	r2, r8
     9a0:	e1a03009 	mov	r3, r9
     9a4:	eb0003f1 	bl	1970 <__aeabi_ddiv>
     9a8:	ebffff6d 	bl	764 <cos_me>
        buffer[i] = buffer[i] * multi;
     9ac:	e1cb40d0 	ldrd	r4, [r11]
    double a1 = 0.48829;
    double a2 = 0.14128;
    double a3 = 0.01168;

    for(int i = 0; i < BUF_SIZE; i++) {
        double multi = a0 - a1 * cos_me(2*PI*i / (BUF_SIZE-1)) + a2 * cos_me(4*PI*i / (BUF_SIZE-1)) - a3 * cos_me(6*PI*i / (BUF_SIZE-1));
     9b0:	e30623b2 	movw	r2, #25522	; 0x63b2
     9b4:	e3412023 	movt	r2, #4131	; 0x1023
     9b8:	e30e3baf 	movw	r3, #60335	; 0xebaf
     9bc:	e3433f87 	movt	r3, #16263	; 0x3f87
     9c0:	eb000346 	bl	16e0 <__aeabi_dmul>
     9c4:	e1a02000 	mov	r2, r0
     9c8:	e1a03001 	mov	r3, r1
     9cc:	e1a00006 	mov	r0, r6
     9d0:	e1a01007 	mov	r1, r7
     9d4:	eb00023c 	bl	12cc <__aeabi_dsub>
     9d8:	e1a02000 	mov	r2, r0
     9dc:	e1a03001 	mov	r3, r1
        buffer[i] = buffer[i] * multi;
     9e0:	e1a00004 	mov	r0, r4
     9e4:	e1a01005 	mov	r1, r5
     9e8:	eb00033c 	bl	16e0 <__aeabi_dmul>
     9ec:	e0cb00f8 	strd	r0, [r11], #8
    double a0 = 0.35875;
    double a1 = 0.48829;
    double a2 = 0.14128;
    double a3 = 0.01168;

    for(int i = 0; i < BUF_SIZE; i++) {
     9f0:	e28aa001 	add	r10, r10, #1
     9f4:	e35a0c02 	cmp	r10, #512	; 0x200
     9f8:	1affffa9 	bne	8a4 <blackman_window+0x1c>
        double multi = a0 - a1 * cos_me(2*PI*i / (BUF_SIZE-1)) + a2 * cos_me(4*PI*i / (BUF_SIZE-1)) - a3 * cos_me(6*PI*i / (BUF_SIZE-1));
        buffer[i] = buffer[i] * multi;
    }    
}
     9fc:	e28dd00c 	add	sp, sp, #12
     a00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000a04 <_fft>:
/*
 * Original code copied from https://rosettacode.org/wiki/Fast_Fourier_transform#C
 * Modified to work without complex library which isn't supported
 */

void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
     a04:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a08:	e24dd044 	sub	sp, sp, #68	; 0x44
     a0c:	e58d0020 	str	r0, [sp, #32]
     a10:	e58d1024 	str	r1, [sp, #36]	; 0x24
     a14:	e58d2028 	str	r2, [sp, #40]	; 0x28
     a18:	e58d302c 	str	r3, [sp, #44]	; 0x2c
     a1c:	e59da068 	ldr	r10, [sp, #104]	; 0x68
     a20:	e59d406c 	ldr	r4, [sp, #108]	; 0x6c
	if (step < n) {
     a24:	e154000a 	cmp	r4, r10
     a28:	aa00008b 	bge	c5c <_fft+0x258>
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
     a2c:	e1a02084 	lsl	r2, r4, #1
     a30:	e58d2030 	str	r2, [sp, #48]	; 0x30
     a34:	e58da000 	str	r10, [sp]
     a38:	e58d2004 	str	r2, [sp, #4]
     a3c:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
     a40:	e1a01003 	mov	r1, r3
     a44:	e59d2020 	ldr	r2, [sp, #32]
     a48:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
     a4c:	ebffffec 	bl	a04 <_fft>
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
     a50:	e1a03184 	lsl	r3, r4, #3
     a54:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
     a58:	e08cc003 	add	r12, r12, r3
     a5c:	e58dc034 	str	r12, [sp, #52]	; 0x34
     a60:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
     a64:	e0822003 	add	r2, r2, r3
     a68:	e58d2038 	str	r2, [sp, #56]	; 0x38
     a6c:	e58da000 	str	r10, [sp]
     a70:	e59dc030 	ldr	r12, [sp, #48]	; 0x30
     a74:	e58dc004 	str	r12, [sp, #4]
     a78:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
     a7c:	e1a01002 	mov	r1, r2
     a80:	e59dc020 	ldr	r12, [sp, #32]
     a84:	e08c2003 	add	r2, r12, r3
     a88:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
     a8c:	e08c3003 	add	r3, r12, r3
     a90:	ebffffdb 	bl	a04 <_fft>
 
		for (int i = 0; i < n; i += 2 * step) {
     a94:	e35a0000 	cmp	r10, #0
     a98:	da00006f 	ble	c5c <_fft+0x258>
/*
 * Original code copied from https://rosettacode.org/wiki/Fast_Fourier_transform#C
 * Modified to work without complex library which isn't supported
 */

void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
     a9c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
     aa0:	e1a02182 	lsl	r2, r2, #3
     aa4:	e58d203c 	str	r2, [sp, #60]	; 0x3c
     aa8:	e3a09000 	mov	r9, #0
	if (step < n) {
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
     aac:	e1a08009 	mov	r8, r9
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
     ab0:	e1a0b00a 	mov	r11, r10
     ab4:	e1a00008 	mov	r0, r8
     ab8:	eb0002d1 	bl	1604 <__aeabi_i2d>
     abc:	e3042550 	movw	r2, #17744	; 0x4550
     ac0:	e3452452 	movt	r2, #21586	; 0x5452
     ac4:	e30231fb 	movw	r3, #8699	; 0x21fb
     ac8:	e34c3009 	movt	r3, #49161	; 0xc009
     acc:	eb000303 	bl	16e0 <__aeabi_dmul>
     ad0:	e1a04000 	mov	r4, r0
     ad4:	e1a05001 	mov	r5, r1
     ad8:	e1a0000b 	mov	r0, r11
     adc:	eb0002c8 	bl	1604 <__aeabi_i2d>
     ae0:	e1a02000 	mov	r2, r0
     ae4:	e1a03001 	mov	r3, r1
     ae8:	e1a00004 	mov	r0, r4
     aec:	e1a01005 	mov	r1, r5
     af0:	eb00039e 	bl	1970 <__aeabi_ddiv>
     af4:	e1a04000 	mov	r4, r0
     af8:	e1a05001 	mov	r5, r1
double cos_me(double in) {
    return sin_me(in + PI/2);
}

inline Re cexp_re(Re re_in) {
    return cos_me(re_in);
     afc:	ebffff18 	bl	764 <cos_me>
     b00:	e1cd01f8 	strd	r0, [sp, #24]
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
     b04:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
     b08:	e18320d9 	ldrd	r2, [r3, r9]
     b0c:	e1cd20f8 	strd	r2, [sp, #8]
     b10:	e1a00002 	mov	r0, r2
     b14:	e1a01003 	mov	r1, r3
     b18:	e1cd21d8 	ldrd	r2, [sp, #24]
     b1c:	eb0002ef 	bl	16e0 <__aeabi_dmul>
     b20:	e1a06000 	mov	r6, r0
     b24:	e1a07001 	mov	r7, r1
inline Re cexp_re(Re re_in) {
    return cos_me(re_in);
}

inline Im cexp_im(Im im_in) {
    return sin_me(im_in);
     b28:	e1a00004 	mov	r0, r4
     b2c:	e1a01005 	mov	r1, r5
     b30:	ebfffe00 	bl	338 <sin_me>
     b34:	e1a04000 	mov	r4, r0
     b38:	e1a05001 	mov	r5, r1
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
     b3c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
     b40:	e18320d9 	ldrd	r2, [r3, r9]
     b44:	e1cd21f0 	strd	r2, [sp, #16]
     b48:	e1a00002 	mov	r0, r2
     b4c:	e1a01003 	mov	r1, r3
     b50:	e1a02004 	mov	r2, r4
     b54:	e1a03005 	mov	r3, r5
     b58:	eb0002e0 	bl	16e0 <__aeabi_dmul>
     b5c:	e1a02000 	mov	r2, r0
     b60:	e1a03001 	mov	r3, r1
     b64:	e1a00006 	mov	r0, r6
     b68:	e1a01007 	mov	r1, r7
     b6c:	eb0001d6 	bl	12cc <__aeabi_dsub>
     b70:	e1a06000 	mov	r6, r0
     b74:	e1a07001 	mov	r7, r1
            Im im_t = cexp_im(-PI * i / n) * out_re[i + step] + cexp_re(-PI * i / n) * out_im[i + step];
     b78:	e1cd00d8 	ldrd	r0, [sp, #8]
     b7c:	e1a02004 	mov	r2, r4
     b80:	e1a03005 	mov	r3, r5
     b84:	eb0002d5 	bl	16e0 <__aeabi_dmul>
     b88:	e1a04000 	mov	r4, r0
     b8c:	e1a05001 	mov	r5, r1
     b90:	e1cd01d0 	ldrd	r0, [sp, #16]
     b94:	e1cd21d8 	ldrd	r2, [sp, #24]
     b98:	eb0002d0 	bl	16e0 <__aeabi_dmul>
     b9c:	e1a02000 	mov	r2, r0
     ba0:	e1a03001 	mov	r3, r1
     ba4:	e1a00004 	mov	r0, r4
     ba8:	e1a01005 	mov	r1, r5
     bac:	eb0001c7 	bl	12d0 <__adddf3>
     bb0:	e1a04000 	mov	r4, r0
     bb4:	e1a05001 	mov	r5, r1
			buf_re[i / 2]     = out_re[i] + re_t;
     bb8:	e088afa8 	add	r10, r8, r8, lsr #31
     bbc:	e1a0a0ca 	asr	r10, r10, #1
     bc0:	e1a0a18a 	lsl	r10, r10, #3
     bc4:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
     bc8:	e18c00d9 	ldrd	r0, [r12, r9]
     bcc:	e1a02006 	mov	r2, r6
     bd0:	e1a03007 	mov	r3, r7
     bd4:	eb0001bd 	bl	12d0 <__adddf3>
     bd8:	e59d2020 	ldr	r2, [sp, #32]
     bdc:	e18200fa 	strd	r0, [r2, r10]
            buf_im[i / 2]     = out_im[i] + im_t;
     be0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     be4:	e18300d9 	ldrd	r0, [r3, r9]
     be8:	e1a02004 	mov	r2, r4
     bec:	e1a03005 	mov	r3, r5
     bf0:	eb0001b6 	bl	12d0 <__adddf3>
     bf4:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
     bf8:	e18c00fa 	strd	r0, [r12, r10]
/*
 * Original code copied from https://rosettacode.org/wiki/Fast_Fourier_transform#C
 * Modified to work without complex library which isn't supported
 */

void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
     bfc:	e088a00b 	add	r10, r8, r11
            //This conversion should work
			Re re_t = cexp_re(-PI * i / n) * out_re[i + step] - cexp_im(-PI * i / n) * out_im[i + step];
            Im im_t = cexp_im(-PI * i / n) * out_re[i + step] + cexp_re(-PI * i / n) * out_im[i + step];
			buf_re[i / 2]     = out_re[i] + re_t;
            buf_im[i / 2]     = out_im[i] + im_t;
			buf_re[(i + n)/2] = out_re[i] - re_t;
     c00:	e08aafaa 	add	r10, r10, r10, lsr #31
     c04:	e1a0a0ca 	asr	r10, r10, #1
     c08:	e1a0a18a 	lsl	r10, r10, #3
     c0c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
     c10:	e18200d9 	ldrd	r0, [r2, r9]
     c14:	e1a02006 	mov	r2, r6
     c18:	e1a03007 	mov	r3, r7
     c1c:	eb0001aa 	bl	12cc <__aeabi_dsub>
     c20:	e59d3020 	ldr	r3, [sp, #32]
     c24:	e18300fa 	strd	r0, [r3, r10]
            buf_im[(i + n)/2] = out_im[i] - im_t;
     c28:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
     c2c:	e18c00d9 	ldrd	r0, [r12, r9]
     c30:	e1a02004 	mov	r2, r4
     c34:	e1a03005 	mov	r3, r5
     c38:	eb0001a3 	bl	12cc <__aeabi_dsub>
     c3c:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
     c40:	e18200fa 	strd	r0, [r2, r10]
void _fft(Re buf_re[], Im buf_im[], Re out_re[], Im out_im[], int n, int step) {
	if (step < n) {
		_fft(out_re, out_im, buf_re, buf_im, n, step * 2);
		_fft(out_re + step, out_im + step, buf_re + step, buf_im + step, n, step * 2);
 
		for (int i = 0; i < n; i += 2 * step) {
     c44:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
     c48:	e0888003 	add	r8, r8, r3
     c4c:	e59dc03c 	ldr	r12, [sp, #60]	; 0x3c
     c50:	e089900c 	add	r9, r9, r12
     c54:	e15b0008 	cmp	r11, r8
     c58:	caffff95 	bgt	ab4 <_fft+0xb0>
            buf_im[i / 2]     = out_im[i] + im_t;
			buf_re[(i + n)/2] = out_re[i] - re_t;
            buf_im[(i + n)/2] = out_im[i] - im_t;
		}
	}
}
     c5c:	e28dd044 	add	sp, sp, #68	; 0x44
     c60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000c64 <fft>:

/*
 *  Fast Fourier Transform function
 */
void fft(Re buf_re[], Im buf_im[], int n) {
     c64:	e92d4870 	push	{r4, r5, r6, r11, lr}
     c68:	e28db010 	add	r11, sp, #16
     c6c:	e24dd00c 	sub	sp, sp, #12
     c70:	e1a06002 	mov	r6, r2
	Re out_re[n];
     c74:	e1a0e182 	lsl	lr, r2, #3
     c78:	e28e3008 	add	r3, lr, #8
     c7c:	e04dd003 	sub	sp, sp, r3
     c80:	e28d2008 	add	r2, sp, #8
    Im out_im[n];
     c84:	e04dd003 	sub	sp, sp, r3
     c88:	e28d3008 	add	r3, sp, #8
	for (int i = 0; i < n; i++) {
     c8c:	e3560000 	cmp	r6, #0
     c90:	da000007 	ble	cb4 <fft+0x50>
     c94:	e3a0c000 	mov	r12, #0
        out_re[i] = buf_re[i];
     c98:	e18040dc 	ldrd	r4, [r0, r12]
     c9c:	e18240fc 	strd	r4, [r2, r12]
        out_im[i] = buf_im[i];
     ca0:	e18140dc 	ldrd	r4, [r1, r12]
     ca4:	e18340fc 	strd	r4, [r3, r12]
     ca8:	e28cc008 	add	r12, r12, #8
 *  Fast Fourier Transform function
 */
void fft(Re buf_re[], Im buf_im[], int n) {
	Re out_re[n];
    Im out_im[n];
	for (int i = 0; i < n; i++) {
     cac:	e15e000c 	cmp	lr, r12
     cb0:	1afffff8 	bne	c98 <fft+0x34>
        out_re[i] = buf_re[i];
        out_im[i] = buf_im[i];
    }
 
	_fft(buf_re, buf_im, out_re, out_im, n, 1);
     cb4:	e58d6000 	str	r6, [sp]
     cb8:	e3a0c001 	mov	r12, #1
     cbc:	e58dc004 	str	r12, [sp, #4]
     cc0:	ebffff4f 	bl	a04 <_fft>
 }
     cc4:	e24bd010 	sub	sp, r11, #16
     cc8:	e8bd8870 	pop	{r4, r5, r6, r11, pc}

00000ccc <plot_pixel>:
        }
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     ccc:	e3023864 	movw	r3, #10340	; 0x2864
     cd0:	e3403000 	movt	r3, #0
     cd4:	e5933000 	ldr	r3, [r3]
     cd8:	e1a00080 	lsl	r0, r0, #1
     cdc:	e0831501 	add	r1, r3, r1, lsl #10
     ce0:	e18120b0 	strh	r2, [r1, r0]
     ce4:	e12fff1e 	bx	lr

00000ce8 <draw_line>:
 
	_fft(buf_re, buf_im, out_re, out_im, n, 1);
 }

/*****************Helper Functions for Drawing*******************/
void draw_line(int x0, int y0, int x1, int y1, short int colour) {
     ce8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     cec:	e24dd00c 	sub	sp, sp, #12
     cf0:	e1a08002 	mov	r8, r2
     cf4:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30
        int is_steep = abs(y1-y0) > abs(x1-x0);
     cf8:	e061a003 	rsb	r10, r1, r3
     cfc:	e35a0000 	cmp	r10, #0
     d00:	b26aa000 	rsblt	r10, r10, #0
     d04:	e0602002 	rsb	r2, r0, r2
     d08:	e3520000 	cmp	r2, #0
     d0c:	b2622000 	rsblt	r2, r2, #0
     d10:	e15a0002 	cmp	r10, r2
     d14:	d3a0a000 	movle	r10, #0
     d18:	c3a0a001 	movgt	r10, #1

        if(is_steep != 0) {
     d1c:	e35a0000 	cmp	r10, #0
     d20:	0a000005 	beq	d3c <draw_line+0x54>
     d24:	e1a02008 	mov	r2, r8
            int temp = x0;
            x0 = y0;
            y0 = temp;
		
            temp = x1;
            x1 = y1;
     d28:	e1a08003 	mov	r8, r3
            y1 = temp;
     d2c:	e1a03002 	mov	r3, r2

/*****************Helper Functions for Drawing*******************/
void draw_line(int x0, int y0, int x1, int y1, short int colour) {
        int is_steep = abs(y1-y0) > abs(x1-x0);

        if(is_steep != 0) {
     d30:	e1a02000 	mov	r2, r0
            int temp = x0;
            x0 = y0;
     d34:	e1a00001 	mov	r0, r1
            y0 = temp;
     d38:	e1a01002 	mov	r1, r2
            temp = x1;
            x1 = y1;
            y1 = temp;
        } 
	
        if(x0 > x1) {
     d3c:	e1500008 	cmp	r0, r8
     d40:	da000005 	ble	d5c <draw_line+0x74>
     d44:	e1a02001 	mov	r2, r1
            int temp = x0;
            x0 = x1;
            x1 = temp;
		
            temp = y0;
            y0 = y1;
     d48:	e1a01003 	mov	r1, r3
            y1 = temp;
     d4c:	e1a03002 	mov	r3, r2
            temp = x1;
            x1 = y1;
            y1 = temp;
        } 
	
        if(x0 > x1) {
     d50:	e1a02000 	mov	r2, r0
            int temp = x0;
            x0 = x1;
     d54:	e1a00008 	mov	r0, r8
            x1 = temp;
     d58:	e1a08002 	mov	r8, r2
            temp = y0;
            y0 = y1;
            y1 = temp;
        }
	
        int delta_x = x1 - x0;
     d5c:	e060b008 	rsb	r11, r0, r8
        int delta_y = abs(y1 - y0);
     d60:	e0617003 	rsb	r7, r1, r3
     d64:	e3570000 	cmp	r7, #0
     d68:	b2677000 	rsblt	r7, r7, #0
        int error = -(delta_x / 2);
     d6c:	e08b4fab 	add	r4, r11, r11, lsr #31
     d70:	e1a040c4 	asr	r4, r4, #1
     d74:	e2644000 	rsb	r4, r4, #0
        int y = y0;

        int y_step = 1;
     d78:	e1510003 	cmp	r1, r3
     d7c:	a3e03000 	mvnge	r3, #0
     d80:	b3a03001 	movlt	r3, #1
     d84:	e58d3004 	str	r3, [sp, #4]
	
        if(y0 >= y1) y_step = -1;
	
        for(int x = x0; x < x1; x++) {
     d88:	e1500008 	cmp	r0, r8
     d8c:	aa00000f 	bge	dd0 <draw_line+0xe8>
     d90:	e1a05000 	mov	r5, r0
        }
	
        int delta_x = x1 - x0;
        int delta_y = abs(y1 - y0);
        int error = -(delta_x / 2);
        int y = y0;
     d94:	e1a06001 	mov	r6, r1
        int y_step = 1;
	
        if(y0 >= y1) y_step = -1;
	
        for(int x = x0; x < x1; x++) {
            if(is_steep){
     d98:	e35a0000 	cmp	r10, #0
                plot_pixel(y, x, colour);	
     d9c:	11a00006 	movne	r0, r6
     da0:	11a01005 	movne	r1, r5
            } else {
                plot_pixel(x, y, colour);
     da4:	01a00005 	moveq	r0, r5
     da8:	01a01006 	moveq	r1, r6
     dac:	e1a02009 	mov	r2, r9
     db0:	ebffffc5 	bl	ccc <plot_pixel>
            }
            error = error + delta_y;
            if(error >= 0) {
     db4:	e0944007 	adds	r4, r4, r7
                y = y + y_step;
     db8:	559d3004 	ldrpl	r3, [sp, #4]
     dbc:	50866003 	addpl	r6, r6, r3
                error = error - delta_x;
     dc0:	506b4004 	rsbpl	r4, r11, r4

        int y_step = 1;
	
        if(y0 >= y1) y_step = -1;
	
        for(int x = x0; x < x1; x++) {
     dc4:	e2855001 	add	r5, r5, #1
     dc8:	e1580005 	cmp	r8, r5
     dcc:	cafffff1 	bgt	d98 <draw_line+0xb0>
            if(error >= 0) {
                y = y + y_step;
                error = error - delta_x;
            }
        }
}
     dd0:	e28dd00c 	add	sp, sp, #12
     dd4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000dd8 <clear_screen>:
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
     dd8:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	for(int x = 0; x < 320; x++){
     ddc:	e3a05000 	mov	r5, #0
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
     de0:	e1a07005 	mov	r7, r5
	for(int x = 0; x < 320; x++){
		for(int y = 0; y < 240; y++){
			plot_pixel(x, y, 0xFFFF);	
     de4:	e3e06000 	mvn	r6, #0
     de8:	ea000009 	b	e14 <clear_screen+0x3c>
     dec:	e1a00005 	mov	r0, r5
     df0:	e1a01004 	mov	r1, r4
     df4:	e1a02006 	mov	r2, r6
     df8:	ebffffb3 	bl	ccc <plot_pixel>
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
	for(int x = 0; x < 320; x++){
		for(int y = 0; y < 240; y++){
     dfc:	e2844001 	add	r4, r4, #1
     e00:	e35400f0 	cmp	r4, #240	; 0xf0
     e04:	1afffff8 	bne	dec <clear_screen+0x14>
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
	for(int x = 0; x < 320; x++){
     e08:	e2855001 	add	r5, r5, #1
     e0c:	e3550d05 	cmp	r5, #320	; 0x140
     e10:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen(){
     e14:	e1a04007 	mov	r4, r7
     e18:	eafffff3 	b	dec <clear_screen+0x14>

00000e1c <wait_for_vsync>:

void wait_for_vsync(){
	volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
	register int status;
	
	*pixel_ctrl_ptr = 1; //writes 1 into front buffer register (starts synchro process)
     e1c:	e3033fff 	movw	r3, #16383	; 0x3fff
     e20:	e34f3f20 	movt	r3, #65312	; 0xff20
     e24:	e3a02001 	mov	r2, #1
     e28:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
	
	status = *(pixel_ctrl_ptr + 3);
     e2c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
	
	while((status & 0x01) != 0){
     e30:	e3130001 	tst	r3, #1
     e34:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
     e38:	e3032fff 	movw	r2, #16383	; 0x3fff
     e3c:	e34f2f20 	movt	r2, #65312	; 0xff20
     e40:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
	
	*pixel_ctrl_ptr = 1; //writes 1 into front buffer register (starts synchro process)
	
	status = *(pixel_ctrl_ptr + 3);
	
	while((status & 0x01) != 0){
     e44:	e3130001 	tst	r3, #1
     e48:	1afffffc 	bne	e40 <wait_for_vsync+0x24>
     e4c:	e12fff1e 	bx	lr

00000e50 <shittylog>:
//}

/*
 *  Copyright David Baines 2020
 */
double shittylog(double value) {
     e50:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e54:	e24dd054 	sub	sp, sp, #84	; 0x54
     e58:	e1a04000 	mov	r4, r0
     e5c:	e1a05001 	mov	r5, r1
    double lut1[] = {0.0413926851582, 0.0791812460476, 0.113943352307, 0.146128035678, 0.176091259056, 0.204119982656, 0.230448921378, 0.255272505103, 0.278753600953};
    double lut2[] = {-1, 0.0, 0.301029995664, 0.47712125472, 0.602059991328, 0.698970004336, 0.778151250384, 0.845098040014, 0.903089986992, 0.954242509439};
     e60:	e1a0000d 	mov	r0, sp
     e64:	e3021360 	movw	r1, #9056	; 0x2360
     e68:	e3401000 	movt	r1, #0
     e6c:	e3a02050 	mov	r2, #80	; 0x50
     e70:	eb0003be 	bl	1d70 <memcpy>

    double answer = value;
    double counter = 0;

    while(answer >= 10) {
     e74:	e1a00004 	mov	r0, r4
     e78:	e1a01005 	mov	r1, r5
     e7c:	e3a02000 	mov	r2, #0
     e80:	e3a03000 	mov	r3, #0
     e84:	e3443024 	movt	r3, #16420	; 0x4024
     e88:	eb000380 	bl	1c90 <__aeabi_dcmpge>
     e8c:	e3500000 	cmp	r0, #0
     e90:	0a00001d 	beq	f0c <shittylog+0xbc>
double shittylog(double value) {
    double lut1[] = {0.0413926851582, 0.0791812460476, 0.113943352307, 0.146128035678, 0.176091259056, 0.204119982656, 0.230448921378, 0.255272505103, 0.278753600953};
    double lut2[] = {-1, 0.0, 0.301029995664, 0.47712125472, 0.602059991328, 0.698970004336, 0.778151250384, 0.845098040014, 0.903089986992, 0.954242509439};

    double answer = value;
    double counter = 0;
     e94:	e3a06000 	mov	r6, #0
     e98:	e3a07000 	mov	r7, #0

    while(answer >= 10) {
        answer = answer/10;
     e9c:	e3a08000 	mov	r8, #0
     ea0:	e3a09000 	mov	r9, #0
     ea4:	e3449024 	movt	r9, #16420	; 0x4024
        counter += 1.0;
     ea8:	e3a0a000 	mov	r10, #0
     eac:	e3a0b000 	mov	r11, #0
     eb0:	e343bff0 	movt	r11, #16368	; 0x3ff0

    double answer = value;
    double counter = 0;

    while(answer >= 10) {
        answer = answer/10;
     eb4:	e1a00004 	mov	r0, r4
     eb8:	e1a01005 	mov	r1, r5
     ebc:	e1a02008 	mov	r2, r8
     ec0:	e1a03009 	mov	r3, r9
     ec4:	eb0002a9 	bl	1970 <__aeabi_ddiv>
     ec8:	e1a04000 	mov	r4, r0
     ecc:	e1a05001 	mov	r5, r1
        counter += 1.0;
     ed0:	e1a00006 	mov	r0, r6
     ed4:	e1a01007 	mov	r1, r7
     ed8:	e1a0200a 	mov	r2, r10
     edc:	e1a0300b 	mov	r3, r11
     ee0:	eb0000fa 	bl	12d0 <__adddf3>
     ee4:	e1a06000 	mov	r6, r0
     ee8:	e1a07001 	mov	r7, r1
    double lut2[] = {-1, 0.0, 0.301029995664, 0.47712125472, 0.602059991328, 0.698970004336, 0.778151250384, 0.845098040014, 0.903089986992, 0.954242509439};

    double answer = value;
    double counter = 0;

    while(answer >= 10) {
     eec:	e1a00004 	mov	r0, r4
     ef0:	e1a01005 	mov	r1, r5
     ef4:	e1a02008 	mov	r2, r8
     ef8:	e1a03009 	mov	r3, r9
     efc:	eb000363 	bl	1c90 <__aeabi_dcmpge>
     f00:	e3500000 	cmp	r0, #0
     f04:	1affffea 	bne	eb4 <shittylog+0x64>
     f08:	ea000001 	b	f14 <shittylog+0xc4>
double shittylog(double value) {
    double lut1[] = {0.0413926851582, 0.0791812460476, 0.113943352307, 0.146128035678, 0.176091259056, 0.204119982656, 0.230448921378, 0.255272505103, 0.278753600953};
    double lut2[] = {-1, 0.0, 0.301029995664, 0.47712125472, 0.602059991328, 0.698970004336, 0.778151250384, 0.845098040014, 0.903089986992, 0.954242509439};

    double answer = value;
    double counter = 0;
     f0c:	e3a06000 	mov	r6, #0
     f10:	e3a07000 	mov	r7, #0
    while(answer >= 10) {
        answer = answer/10;
        counter += 1.0;
    }

    int trunc = answer;
     f14:	e1a00004 	mov	r0, r4
     f18:	e1a01005 	mov	r1, r5
     f1c:	eb000367 	bl	1cc0 <__aeabi_d2iz>

    //printf("%lf, %d, %lf\n", answer, trunc, counter);
    counter = counter + lut2[trunc];
     f20:	e28d2050 	add	r2, sp, #80	; 0x50
     f24:	e0823180 	add	r3, r2, r0, lsl #3
     f28:	e1a00006 	mov	r0, r6
     f2c:	e1a01007 	mov	r1, r7
     f30:	e14325d0 	ldrd	r2, [r3, #-80]	; 0xffffffb0
     f34:	eb0000e5 	bl	12d0 <__adddf3>

    return counter;
}
     f38:	e28dd054 	add	sp, sp, #84	; 0x54
     f3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000f40 <y_scale>:

int y_scale(double y){	
     f40:	e92d4070 	push	{r4, r5, r6, lr}
    //double logged = shittylog(y);
	int y_value = ((int)(240.0 - ((24.0)*(sqrt(y)/40000.0))));
     f44:	ebfffdc4 	bl	65c <sqrt>
     f48:	e3a02000 	mov	r2, #0
     f4c:	e3a03b22 	mov	r3, #34816	; 0x8800
     f50:	e34430e3 	movt	r3, #16611	; 0x40e3
     f54:	eb000285 	bl	1970 <__aeabi_ddiv>
     f58:	e3a02000 	mov	r2, #0
     f5c:	e3a03000 	mov	r3, #0
     f60:	e3443038 	movt	r3, #16440	; 0x4038
     f64:	eb0001dd 	bl	16e0 <__aeabi_dmul>
     f68:	e1a02000 	mov	r2, r0
     f6c:	e1a03001 	mov	r3, r1
     f70:	e3a00000 	mov	r0, #0
     f74:	e3a01000 	mov	r1, #0
     f78:	e344106e 	movt	r1, #16494	; 0x406e
     f7c:	eb0000d2 	bl	12cc <__aeabi_dsub>
     f80:	eb00034e 	bl	1cc0 <__aeabi_d2iz>
     f84:	e1a06000 	mov	r6, r0
	if (y_value < 0.0) y_value = 0.0;
     f88:	eb00019d 	bl	1604 <__aeabi_i2d>
     f8c:	e1a04000 	mov	r4, r0
     f90:	e1a05001 	mov	r5, r1
     f94:	e3a02000 	mov	r2, #0
     f98:	e3a03000 	mov	r3, #0
     f9c:	eb00032f 	bl	1c60 <__aeabi_dcmplt>
     fa0:	e3500000 	cmp	r0, #0
     fa4:	13a06000 	movne	r6, #0
     fa8:	1a000008 	bne	fd0 <y_scale+0x90>
    if(y_value > 240.0) y_value = 240.0;
     fac:	e1a00004 	mov	r0, r4
     fb0:	e1a01005 	mov	r1, r5
     fb4:	e3a02000 	mov	r2, #0
     fb8:	e3a03000 	mov	r3, #0
     fbc:	e344306e 	movt	r3, #16494	; 0x406e
     fc0:	eb000338 	bl	1ca8 <__aeabi_dcmpgt>
     fc4:	e3500000 	cmp	r0, #0
     fc8:	13a060f0 	movne	r6, #240	; 0xf0
     fcc:	eaffffff 	b	fd0 <y_scale+0x90>
	return y_value;
}
     fd0:	e1a00006 	mov	r0, r6
     fd4:	e8bd8070 	pop	{r4, r5, r6, pc}

00000fd8 <main>:
int y_scale(double y);
void hann_window(Re buffer[]);
void blackman_window(Re buffer[]);
void average_iter(Re buffer[], Re prev[], Re prev2[]);

int main(void) {
     fd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     fdc:	e24ddb11 	sub	sp, sp, #17408	; 0x4400
     fe0:	e24dd024 	sub	sp, sp, #36	; 0x24
     fe4:	e3a01000 	mov	r1, #0
    // Im right_buffer_im[BUF_SIZE];
    Re left_buffer_prev[BUF_SIZE];
    Re left_buffer_prev2[BUF_SIZE];

    for(int t = 0; t < BUF_SIZE; t++) {
        left_buffer_prev[t] = 0;
     fe8:	e28dcb0d 	add	r12, sp, #13312	; 0x3400
     fec:	e28cc020 	add	r12, r12, #32
     ff0:	e3a02000 	mov	r2, #0
     ff4:	e3a03000 	mov	r3, #0
        left_buffer_prev2[t] = 0;
     ff8:	e28d0b09 	add	r0, sp, #9216	; 0x2400
     ffc:	e2800020 	add	r0, r0, #32
    // Im right_buffer_im[BUF_SIZE];
    Re left_buffer_prev[BUF_SIZE];
    Re left_buffer_prev2[BUF_SIZE];

    for(int t = 0; t < BUF_SIZE; t++) {
        left_buffer_prev[t] = 0;
    1000:	e18120fc 	strd	r2, [r1, r12]
        left_buffer_prev2[t] = 0;
    1004:	e18120f0 	strd	r2, [r1, r0]
    1008:	e2811008 	add	r1, r1, #8
    // Re right_buffer_re[BUF_SIZE];
    // Im right_buffer_im[BUF_SIZE];
    Re left_buffer_prev[BUF_SIZE];
    Re left_buffer_prev2[BUF_SIZE];

    for(int t = 0; t < BUF_SIZE; t++) {
    100c:	e3510a01 	cmp	r1, #4096	; 0x1000
    1010:	1afffffa 	bne	1000 <main+0x28>
    /* used for vga display */
    //line colour for graph
    short int line_color = 0xF81F;
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    //set front pixel buffer to start of FPGA On-chip memory
    *(pixel_ctrl_ptr + 1) = 0xC8000000; 
    1014:	e3034fff 	movw	r4, #16383	; 0x3fff
    1018:	e34f4f20 	movt	r4, #65312	; 0xff20
    101c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1020:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    //swapping the front/back buffers, to set the front buffer location
    wait_for_vsync();
    1024:	ebffff7c 	bl	e1c <wait_for_vsync>
    //initializing a pointer to the pixel buffer, used by the  drawing functions
    pixel_buffer_start = *pixel_ctrl_ptr;
    1028:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
    102c:	e3025864 	movw	r5, #10340	; 0x2864
    1030:	e3405000 	movt	r5, #0
    1034:	e5853000 	str	r3, [r5]

    clear_screen(); 
    1038:	ebffff66 	bl	dd8 <clear_screen>

    // pixel_buffer_start points to the pixel buffer
    //set back pixel buffer to start of SDRAM memory 
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    103c:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
    1040:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1044:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
    1048:	e5853000 	str	r3, [r5]
	int x_plot = 0;

    while (1) {

        //This segment loads the audio buffers
        *(red_LED_ptr) = 0x1; // turn on LEDR[0]
    104c:	e3a00000 	mov	r0, #0
    1050:	e34f0f20 	movt	r0, #65312	; 0xff20
    1054:	e58d0018 	str	r0, [sp, #24]
int y_scale(double y);
void hann_window(Re buffer[]);
void blackman_window(Re buffer[]);
void average_iter(Re buffer[], Re prev[], Re prev2[]);

int main(void) {
    1058:	e28d1b05 	add	r1, sp, #5120	; 0x1400
    105c:	e2811020 	add	r1, r1, #32
    1060:	e2811eff 	add	r1, r1, #4080	; 0xff0
    1064:	e2811008 	add	r1, r1, #8
    1068:	e58d101c 	str	r1, [sp, #28]
	int x_plot = 0;

    while (1) {

        //This segment loads the audio buffers
        *(red_LED_ptr) = 0x1; // turn on LEDR[0]
    106c:	e3a03001 	mov	r3, #1
    1070:	e59d2018 	ldr	r2, [sp, #24]
    1074:	e5823000 	str	r3, [r2]
        fifospace = *(audio_ptr + 1); // read the audio port fifospace register
    1078:	e3033fff 	movw	r3, #16383	; 0x3fff
    107c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1080:	e5133fbb 	ldr	r3, [r3, #-4027]	; 0xfffff045
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
    1084:	e6ef3073 	uxtb	r3, r3
    1088:	e3530020 	cmp	r3, #32
    108c:	da000016 	ble	10ec <main+0x114>
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    1090:	e3530000 	cmp	r3, #0
    1094:	1a000075 	bne	1270 <main+0x298>
    1098:	ea000013 	b	10ec <main+0x114>
                left_buffer_re[buffer_index] = (Re) *(audio_ptr + 2);
    109c:	e5150fb7 	ldr	r0, [r5, #-4023]	; 0xfffff049
    10a0:	eb000157 	bl	1604 <__aeabi_i2d>
    10a4:	e1e400f8 	strd	r0, [r4, #8]!
                left_buffer_im[buffer_index] = 0;
    10a8:	e3a00000 	mov	r0, #0
    10ac:	e3a01000 	mov	r1, #0
    10b0:	e1e600f8 	strd	r0, [r6, #8]!
                // right_buffer_re[buffer_index] = (Re) *(audio_ptr + 3);
                // right_buffer_im[buffer_index] = 0;
                ++buffer_index;
                if (buffer_index == BUF_SIZE) {
    10b4:	e1540007 	cmp	r4, r7
    10b8:	1a000006 	bne	10d8 <main+0x100>
                    // done recording
                    *(red_LED_ptr) = 0x0; // turn off LEDR
    10bc:	e3a03000 	mov	r3, #0
    10c0:	e59d1018 	ldr	r1, [sp, #24]
    10c4:	e5813000 	str	r3, [r1]
                }
                fifospace = *(audio_ptr + 1); // read the audio port fifospace register
    10c8:	e3033fff 	movw	r3, #16383	; 0x3fff
    10cc:	e34f3f20 	movt	r3, #65312	; 0xff20
    10d0:	e5133fbb 	ldr	r3, [r3, #-4027]	; 0xfffff045
    10d4:	ea000004 	b	10ec <main+0x114>
    10d8:	e5153fbb 	ldr	r3, [r5, #-4027]	; 0xfffff045
        fifospace = *(audio_ptr + 1); // read the audio port fifospace register
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
    10dc:	e31300ff 	tst	r3, #255	; 0xff
    10e0:	0a000001 	beq	10ec <main+0x114>
    10e4:	e1540007 	cmp	r4, r7
    10e8:	1affffeb 	bne	109c <main+0xc4>
                }
                fifospace = *(audio_ptr + 1); // read the audio port fifospace register
            }
        }

        average_iter(left_buffer_re, left_buffer_prev, left_buffer_prev2);
    10ec:	e28d0b05 	add	r0, sp, #5120	; 0x1400
    10f0:	e2800020 	add	r0, r0, #32
    10f4:	e28d1b0d 	add	r1, sp, #13312	; 0x3400
    10f8:	e2811020 	add	r1, r1, #32
    10fc:	e28d2b09 	add	r2, sp, #9216	; 0x2400
    1100:	e2822020 	add	r2, r2, #32
    1104:	ebfffd9e 	bl	784 <average_iter>

        blackman_window(left_buffer_re);
    1108:	e28d0b05 	add	r0, sp, #5120	; 0x1400
    110c:	e2800020 	add	r0, r0, #32
    1110:	ebfffddc 	bl	888 <blackman_window>

        // Use Left channel
        fft(left_buffer_re, left_buffer_im, BUF_SIZE);
    1114:	e28d0b05 	add	r0, sp, #5120	; 0x1400
    1118:	e2800020 	add	r0, r0, #32
    111c:	e28d1e42 	add	r1, sp, #1056	; 0x420
    1120:	e3a02c02 	mov	r2, #512	; 0x200
    1124:	ebfffece 	bl	c64 <fft>

         /*******************ANIMATION PART********************/
        clear_screen();
    1128:	ebffff2a 	bl	dd8 <clear_screen>
    112c:	e28dab05 	add	r10, sp, #5120	; 0x1400
    1130:	e28aa020 	add	r10, r10, #32
    1134:	e28d8e42 	add	r8, sp, #1056	; 0x420
    1138:	e28db01c 	add	r11, sp, #28
int y_scale(double y);
void hann_window(Re buffer[]);
void blackman_window(Re buffer[]);
void average_iter(Re buffer[], Re prev[], Re prev2[]);

int main(void) {
    113c:	e28d3b09 	add	r3, sp, #9216	; 0x2400
    1140:	e2833020 	add	r3, r3, #32
    1144:	e58d300c 	str	r3, [sp, #12]
    1148:	e1a0900b 	mov	r9, r11

			int index_1 = i*2;
			int index_2 = i*2+1;
			
			//averaging numbers
           	double value_1 = sqrt(left_buffer_re[index_1]*left_buffer_re[index_1] + left_buffer_im[index_1]*left_buffer_im[index_1]);
    114c:	e1ca20d0 	ldrd	r2, [r10]
    1150:	e1c840d0 	ldrd	r4, [r8]
    1154:	e1a00002 	mov	r0, r2
    1158:	e1a01003 	mov	r1, r3
    115c:	eb00015f 	bl	16e0 <__aeabi_dmul>
    1160:	e1a06000 	mov	r6, r0
    1164:	e1a07001 	mov	r7, r1
    1168:	e1a00004 	mov	r0, r4
    116c:	e1a01005 	mov	r1, r5
    1170:	e1a02004 	mov	r2, r4
    1174:	e1a03005 	mov	r3, r5
    1178:	eb000158 	bl	16e0 <__aeabi_dmul>
    117c:	e1a02000 	mov	r2, r0
    1180:	e1a03001 	mov	r3, r1
    1184:	e1a00006 	mov	r0, r6
    1188:	e1a01007 	mov	r1, r7
    118c:	eb00004f 	bl	12d0 <__adddf3>
    1190:	ebfffd31 	bl	65c <sqrt>
    1194:	e1cd01f0 	strd	r0, [sp, #16]
			double value_2 = sqrt(left_buffer_re[index_2]*left_buffer_re[index_2] + left_buffer_im[index_2]*left_buffer_im[index_2]);
    1198:	e1ca20d8 	ldrd	r2, [r10, #8]
    119c:	e1c840d8 	ldrd	r4, [r8, #8]
    11a0:	e1a00002 	mov	r0, r2
    11a4:	e1a01003 	mov	r1, r3
    11a8:	eb00014c 	bl	16e0 <__aeabi_dmul>
    11ac:	e1a06000 	mov	r6, r0
    11b0:	e1a07001 	mov	r7, r1
    11b4:	e1a00004 	mov	r0, r4
    11b8:	e1a01005 	mov	r1, r5
    11bc:	e1a02004 	mov	r2, r4
    11c0:	e1a03005 	mov	r3, r5
    11c4:	eb000145 	bl	16e0 <__aeabi_dmul>
    11c8:	e1a02000 	mov	r2, r0
    11cc:	e1a03001 	mov	r3, r1
    11d0:	e1a00006 	mov	r0, r6
    11d4:	e1a01007 	mov	r1, r7
    11d8:	eb00003c 	bl	12d0 <__adddf3>
    11dc:	ebfffd1e 	bl	65c <sqrt>
    11e0:	e1a02000 	mov	r2, r0
    11e4:	e1a03001 	mov	r3, r1
			double value = (value_1+value_2)/2;
    11e8:	e1cd01d0 	ldrd	r0, [sp, #16]
    11ec:	eb000037 	bl	12d0 <__adddf3>
    11f0:	e3a02000 	mov	r2, #0
    11f4:	e3a03000 	mov	r3, #0
    11f8:	e3433fe0 	movt	r3, #16352	; 0x3fe0
    11fc:	eb000137 	bl	16e0 <__aeabi_dmul>
			
			//plotting values
			y_plot = y_scale(value);
    1200:	ebffff4e 	bl	f40 <y_scale>
            // draw_line(i+32, y_plot, i+32, 240, line_color);	
			
			//store y_plot values
			y_values[i] = y_plot;
    1204:	e5a90004 	str	r0, [r9, #4]!
    1208:	e28aa010 	add	r10, r10, #16
    120c:	e2888010 	add	r8, r8, #16
         /*******************ANIMATION PART********************/
        clear_screen();
	    //array to store values
	    int y_values [256];

		for(int i = 0; i < 256; i++){
    1210:	e59d000c 	ldr	r0, [sp, #12]
    1214:	e15a0000 	cmp	r10, r0
    1218:	1affffcb 	bne	114c <main+0x174>
int y_scale(double y);
void hann_window(Re buffer[]);
void blackman_window(Re buffer[]);
void average_iter(Re buffer[], Re prev[], Re prev2[]);

int main(void) {
    121c:	e28d1020 	add	r1, sp, #32
    1220:	e2816ffe 	add	r6, r1, #1016	; 0x3f8
    1224:	e3a04020 	mov	r4, #32
			y_values[i] = y_plot;
        } 
	    
        //connecting lines
        for(int i = 0; i < (256-1); i++){
            draw_line(i+32, y_values[i], (i+1)+32, y_values[i+1], line_color);
    1228:	e3e05e7e 	mvn	r5, #2016	; 0x7e0
    122c:	e1a00004 	mov	r0, r4
int y_scale(double y);
void hann_window(Re buffer[]);
void blackman_window(Re buffer[]);
void average_iter(Re buffer[], Re prev[], Re prev2[]);

int main(void) {
    1230:	e2844001 	add	r4, r4, #1
			y_values[i] = y_plot;
        } 
	    
        //connecting lines
        for(int i = 0; i < (256-1); i++){
            draw_line(i+32, y_values[i], (i+1)+32, y_values[i+1], line_color);
    1234:	e5bb1004 	ldr	r1, [r11, #4]!
    1238:	e59b3004 	ldr	r3, [r11, #4]
    123c:	e58d5000 	str	r5, [sp]
    1240:	e1a02004 	mov	r2, r4
    1244:	ebfffea7 	bl	ce8 <draw_line>
			//store y_plot values
			y_values[i] = y_plot;
        } 
	    
        //connecting lines
        for(int i = 0; i < (256-1); i++){
    1248:	e15b0006 	cmp	r11, r6
    124c:	1afffff6 	bne	122c <main+0x254>
            draw_line(i+32, y_values[i], (i+1)+32, y_values[i+1], line_color);
        }

        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    1250:	ebfffef1 	bl	e1c <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1254:	e3033fff 	movw	r3, #16383	; 0x3fff
    1258:	e34f3f20 	movt	r3, #65312	; 0xff20
    125c:	e5132fdb 	ldr	r2, [r3, #-4059]	; 0xfffff025
    1260:	e3023864 	movw	r3, #10340	; 0x2864
    1264:	e3403000 	movt	r3, #0
    1268:	e5832000 	str	r2, [r3]
        // for(int i = 0; i < BUF_SIZE; i++) {
	    //double value = sqrt(right_buffer_re[0]*right_buffer_re[0] + right_buffer_im[0]*right_buffer_im[0]);
	    //printf("%lf ", value);
        // }
        // printf("\n");
    }
    126c:	eaffff7e 	b	106c <main+0x94>
        int buffer_index = 0;
        if ((fifospace & 0x000000FF) > BUF_THRESHOLD) {
            // store data until the the audio-in FIFO is empty or the buffer
            // is full
            while ((fifospace & 0x000000FF) && (buffer_index < BUF_SIZE)) {
                left_buffer_re[buffer_index] = (Re) *(audio_ptr + 2);
    1270:	e3033fff 	movw	r3, #16383	; 0x3fff
    1274:	e34f3f20 	movt	r3, #65312	; 0xff20
    1278:	e5130fb7 	ldr	r0, [r3, #-4023]	; 0xfffff049
    127c:	e3a04a0d 	mov	r4, #53248	; 0xd000
    1280:	e34f4fff 	movt	r4, #65535	; 0xffff
    1284:	eb0000de 	bl	1604 <__aeabi_i2d>
    1288:	e28d2b11 	add	r2, sp, #17408	; 0x4400
    128c:	e2822020 	add	r2, r2, #32
    1290:	e18200f4 	strd	r0, [r2, r4]
                left_buffer_im[buffer_index] = 0;
    1294:	e3a03903 	mov	r3, #49152	; 0xc000
    1298:	e34f3fff 	movt	r3, #65535	; 0xffff
    129c:	e3a00000 	mov	r0, #0
    12a0:	e3a01000 	mov	r1, #0
    12a4:	e18200f3 	strd	r0, [r2, r3]
    12a8:	e28d4b05 	add	r4, sp, #5120	; 0x1400
    12ac:	e2844020 	add	r4, r4, #32
    12b0:	e28d6e42 	add	r6, sp, #1056	; 0x420
                ++buffer_index;
                if (buffer_index == BUF_SIZE) {
                    // done recording
                    *(red_LED_ptr) = 0x0; // turn off LEDR
                }
                fifospace = *(audio_ptr + 1); // read the audio port fifospace register
    12b4:	e3035fff 	movw	r5, #16383	; 0x3fff
    12b8:	e34f5f20 	movt	r5, #65312	; 0xff20
    12bc:	e59d701c 	ldr	r7, [sp, #28]
    12c0:	eaffff84 	b	10d8 <main+0x100>

000012c4 <__aeabi_drsub>:
    12c4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    12c8:	ea000000 	b	12d0 <__adddf3>

000012cc <__aeabi_dsub>:
    12cc:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

000012d0 <__adddf3>:
    12d0:	e92d4030 	push	{r4, r5, lr}
    12d4:	e1a04081 	lsl	r4, r1, #1
    12d8:	e1a05083 	lsl	r5, r3, #1
    12dc:	e1340005 	teq	r4, r5
    12e0:	01300002 	teqeq	r0, r2
    12e4:	1194c000 	orrsne	r12, r4, r0
    12e8:	1195c002 	orrsne	r12, r5, r2
    12ec:	11f0cac4 	mvnsne	r12, r4, asr #21
    12f0:	11f0cac5 	mvnsne	r12, r5, asr #21
    12f4:	0a00008c 	beq	152c <__adddf3+0x25c>
    12f8:	e1a04aa4 	lsr	r4, r4, #21
    12fc:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1300:	b2655000 	rsblt	r5, r5, #0
    1304:	da000006 	ble	1324 <__adddf3+0x54>
    1308:	e0844005 	add	r4, r4, r5
    130c:	e0202002 	eor	r2, r0, r2
    1310:	e0213003 	eor	r3, r1, r3
    1314:	e0220000 	eor	r0, r2, r0
    1318:	e0231001 	eor	r1, r3, r1
    131c:	e0202002 	eor	r2, r0, r2
    1320:	e0213003 	eor	r3, r1, r3
    1324:	e3550036 	cmp	r5, #54	; 0x36
    1328:	88bd4030 	pophi	{r4, r5, lr}
    132c:	812fff1e 	bxhi	lr
    1330:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1334:	e1a01601 	lsl	r1, r1, #12
    1338:	e3a0c601 	mov	r12, #1048576	; 0x100000
    133c:	e18c1621 	orr	r1, r12, r1, lsr #12
    1340:	0a000001 	beq	134c <__adddf3+0x7c>
    1344:	e2700000 	rsbs	r0, r0, #0
    1348:	e2e11000 	rsc	r1, r1, #0
    134c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1350:	e1a03603 	lsl	r3, r3, #12
    1354:	e18c3623 	orr	r3, r12, r3, lsr #12
    1358:	0a000001 	beq	1364 <__adddf3+0x94>
    135c:	e2722000 	rsbs	r2, r2, #0
    1360:	e2e33000 	rsc	r3, r3, #0
    1364:	e1340005 	teq	r4, r5
    1368:	0a000069 	beq	1514 <__adddf3+0x244>
    136c:	e2444001 	sub	r4, r4, #1
    1370:	e275e020 	rsbs	lr, r5, #32
    1374:	ba000005 	blt	1390 <__adddf3+0xc0>
    1378:	e1a0ce12 	lsl	r12, r2, lr
    137c:	e0900532 	adds	r0, r0, r2, lsr r5
    1380:	e2a11000 	adc	r1, r1, #0
    1384:	e0900e13 	adds	r0, r0, r3, lsl lr
    1388:	e0b11553 	adcs	r1, r1, r3, asr r5
    138c:	ea000006 	b	13ac <__adddf3+0xdc>
    1390:	e2455020 	sub	r5, r5, #32
    1394:	e28ee020 	add	lr, lr, #32
    1398:	e3520001 	cmp	r2, #1
    139c:	e1a0ce13 	lsl	r12, r3, lr
    13a0:	238cc002 	orrcs	r12, r12, #2
    13a4:	e0900553 	adds	r0, r0, r3, asr r5
    13a8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    13ac:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    13b0:	5a000002 	bpl	13c0 <__adddf3+0xf0>
    13b4:	e27cc000 	rsbs	r12, r12, #0
    13b8:	e2f00000 	rscs	r0, r0, #0
    13bc:	e2e11000 	rsc	r1, r1, #0
    13c0:	e3510601 	cmp	r1, #1048576	; 0x100000
    13c4:	3a00000f 	bcc	1408 <__adddf3+0x138>
    13c8:	e3510602 	cmp	r1, #2097152	; 0x200000
    13cc:	3a000006 	bcc	13ec <__adddf3+0x11c>
    13d0:	e1b010a1 	lsrs	r1, r1, #1
    13d4:	e1b00060 	rrxs	r0, r0
    13d8:	e1a0c06c 	rrx	r12, r12
    13dc:	e2844001 	add	r4, r4, #1
    13e0:	e1a02a84 	lsl	r2, r4, #21
    13e4:	e3720501 	cmn	r2, #4194304	; 0x400000
    13e8:	2a00006b 	bcs	159c <__adddf3+0x2cc>
    13ec:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    13f0:	01b0c0a0 	lsrseq	r12, r0, #1
    13f4:	e2b00000 	adcs	r0, r0, #0
    13f8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    13fc:	e1811005 	orr	r1, r1, r5
    1400:	e8bd4030 	pop	{r4, r5, lr}
    1404:	e12fff1e 	bx	lr
    1408:	e1b0c08c 	lsls	r12, r12, #1
    140c:	e0b00000 	adcs	r0, r0, r0
    1410:	e0a11001 	adc	r1, r1, r1
    1414:	e3110601 	tst	r1, #1048576	; 0x100000
    1418:	e2444001 	sub	r4, r4, #1
    141c:	1afffff2 	bne	13ec <__adddf3+0x11c>
    1420:	e3310000 	teq	r1, #0
    1424:	13a03014 	movne	r3, #20
    1428:	03a03034 	moveq	r3, #52	; 0x34
    142c:	01a01000 	moveq	r1, r0
    1430:	03a00000 	moveq	r0, #0
    1434:	e1a02001 	mov	r2, r1
    1438:	e3520801 	cmp	r2, #65536	; 0x10000
    143c:	21a02822 	lsrcs	r2, r2, #16
    1440:	22433010 	subcs	r3, r3, #16
    1444:	e3520c01 	cmp	r2, #256	; 0x100
    1448:	21a02422 	lsrcs	r2, r2, #8
    144c:	22433008 	subcs	r3, r3, #8
    1450:	e3520010 	cmp	r2, #16
    1454:	21a02222 	lsrcs	r2, r2, #4
    1458:	22433004 	subcs	r3, r3, #4
    145c:	e3520004 	cmp	r2, #4
    1460:	22433002 	subcs	r3, r3, #2
    1464:	304330a2 	subcc	r3, r3, r2, lsr #1
    1468:	e04331a2 	sub	r3, r3, r2, lsr #3
    146c:	e2532020 	subs	r2, r3, #32
    1470:	aa000007 	bge	1494 <__adddf3+0x1c4>
    1474:	e292200c 	adds	r2, r2, #12
    1478:	da000004 	ble	1490 <__adddf3+0x1c0>
    147c:	e282c014 	add	r12, r2, #20
    1480:	e262200c 	rsb	r2, r2, #12
    1484:	e1a00c11 	lsl	r0, r1, r12
    1488:	e1a01231 	lsr	r1, r1, r2
    148c:	ea000004 	b	14a4 <__adddf3+0x1d4>
    1490:	e2822014 	add	r2, r2, #20
    1494:	d262c020 	rsble	r12, r2, #32
    1498:	e1a01211 	lsl	r1, r1, r2
    149c:	d1811c30 	orrle	r1, r1, r0, lsr r12
    14a0:	d1a00210 	lslle	r0, r0, r2
    14a4:	e0544003 	subs	r4, r4, r3
    14a8:	a0811a04 	addge	r1, r1, r4, lsl #20
    14ac:	a1811005 	orrge	r1, r1, r5
    14b0:	a8bd4030 	popge	{r4, r5, lr}
    14b4:	a12fff1e 	bxge	lr
    14b8:	e1e04004 	mvn	r4, r4
    14bc:	e254401f 	subs	r4, r4, #31
    14c0:	aa00000f 	bge	1504 <__adddf3+0x234>
    14c4:	e294400c 	adds	r4, r4, #12
    14c8:	ca000006 	bgt	14e8 <__adddf3+0x218>
    14cc:	e2844014 	add	r4, r4, #20
    14d0:	e2642020 	rsb	r2, r4, #32
    14d4:	e1a00430 	lsr	r0, r0, r4
    14d8:	e1800211 	orr	r0, r0, r1, lsl r2
    14dc:	e1851431 	orr	r1, r5, r1, lsr r4
    14e0:	e8bd4030 	pop	{r4, r5, lr}
    14e4:	e12fff1e 	bx	lr
    14e8:	e264400c 	rsb	r4, r4, #12
    14ec:	e2642020 	rsb	r2, r4, #32
    14f0:	e1a00230 	lsr	r0, r0, r2
    14f4:	e1800411 	orr	r0, r0, r1, lsl r4
    14f8:	e1a01005 	mov	r1, r5
    14fc:	e8bd4030 	pop	{r4, r5, lr}
    1500:	e12fff1e 	bx	lr
    1504:	e1a00431 	lsr	r0, r1, r4
    1508:	e1a01005 	mov	r1, r5
    150c:	e8bd4030 	pop	{r4, r5, lr}
    1510:	e12fff1e 	bx	lr
    1514:	e3340000 	teq	r4, #0
    1518:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    151c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1520:	02844001 	addeq	r4, r4, #1
    1524:	12455001 	subne	r5, r5, #1
    1528:	eaffff8f 	b	136c <__adddf3+0x9c>
    152c:	e1f0cac4 	mvns	r12, r4, asr #21
    1530:	11f0cac5 	mvnsne	r12, r5, asr #21
    1534:	0a00001d 	beq	15b0 <__adddf3+0x2e0>
    1538:	e1340005 	teq	r4, r5
    153c:	01300002 	teqeq	r0, r2
    1540:	0a000004 	beq	1558 <__adddf3+0x288>
    1544:	e194c000 	orrs	r12, r4, r0
    1548:	01a01003 	moveq	r1, r3
    154c:	01a00002 	moveq	r0, r2
    1550:	e8bd4030 	pop	{r4, r5, lr}
    1554:	e12fff1e 	bx	lr
    1558:	e1310003 	teq	r1, r3
    155c:	13a01000 	movne	r1, #0
    1560:	13a00000 	movne	r0, #0
    1564:	18bd4030 	popne	{r4, r5, lr}
    1568:	112fff1e 	bxne	lr
    156c:	e1b0caa4 	lsrs	r12, r4, #21
    1570:	1a000004 	bne	1588 <__adddf3+0x2b8>
    1574:	e1b00080 	lsls	r0, r0, #1
    1578:	e0b11001 	adcs	r1, r1, r1
    157c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1580:	e8bd4030 	pop	{r4, r5, lr}
    1584:	e12fff1e 	bx	lr
    1588:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    158c:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1590:	38bd4030 	popcc	{r4, r5, lr}
    1594:	312fff1e 	bxcc	lr
    1598:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    159c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    15a0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    15a4:	e3a00000 	mov	r0, #0
    15a8:	e8bd4030 	pop	{r4, r5, lr}
    15ac:	e12fff1e 	bx	lr
    15b0:	e1f0cac4 	mvns	r12, r4, asr #21
    15b4:	11a01003 	movne	r1, r3
    15b8:	11a00002 	movne	r0, r2
    15bc:	01f0cac5 	mvnseq	r12, r5, asr #21
    15c0:	11a03001 	movne	r3, r1
    15c4:	11a02000 	movne	r2, r0
    15c8:	e1904601 	orrs	r4, r0, r1, lsl #12
    15cc:	01925603 	orrseq	r5, r2, r3, lsl #12
    15d0:	01310003 	teqeq	r1, r3
    15d4:	13811702 	orrne	r1, r1, #524288	; 0x80000
    15d8:	e8bd4030 	pop	{r4, r5, lr}
    15dc:	e12fff1e 	bx	lr

000015e0 <__aeabi_ui2d>:
    15e0:	e3300000 	teq	r0, #0
    15e4:	03a01000 	moveq	r1, #0
    15e8:	012fff1e 	bxeq	lr
    15ec:	e92d4030 	push	{r4, r5, lr}
    15f0:	e3a04b01 	mov	r4, #1024	; 0x400
    15f4:	e2844032 	add	r4, r4, #50	; 0x32
    15f8:	e3a05000 	mov	r5, #0
    15fc:	e3a01000 	mov	r1, #0
    1600:	eaffff86 	b	1420 <__adddf3+0x150>

00001604 <__aeabi_i2d>:
    1604:	e3300000 	teq	r0, #0
    1608:	03a01000 	moveq	r1, #0
    160c:	012fff1e 	bxeq	lr
    1610:	e92d4030 	push	{r4, r5, lr}
    1614:	e3a04b01 	mov	r4, #1024	; 0x400
    1618:	e2844032 	add	r4, r4, #50	; 0x32
    161c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1620:	42600000 	rsbmi	r0, r0, #0
    1624:	e3a01000 	mov	r1, #0
    1628:	eaffff7c 	b	1420 <__adddf3+0x150>

0000162c <__aeabi_f2d>:
    162c:	e1b02080 	lsls	r2, r0, #1
    1630:	e1a011c2 	asr	r1, r2, #3
    1634:	e1a01061 	rrx	r1, r1
    1638:	e1a00e02 	lsl	r0, r2, #28
    163c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1640:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1644:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1648:	112fff1e 	bxne	lr
    164c:	e3320000 	teq	r2, #0
    1650:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1654:	012fff1e 	bxeq	lr
    1658:	e92d4030 	push	{r4, r5, lr}
    165c:	e3a04d0e 	mov	r4, #896	; 0x380
    1660:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1664:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1668:	eaffff6c 	b	1420 <__adddf3+0x150>

0000166c <__aeabi_ul2d>:
    166c:	e1902001 	orrs	r2, r0, r1
    1670:	012fff1e 	bxeq	lr
    1674:	e92d4030 	push	{r4, r5, lr}
    1678:	e3a05000 	mov	r5, #0
    167c:	ea000006 	b	169c <__aeabi_l2d+0x1c>

00001680 <__aeabi_l2d>:
    1680:	e1902001 	orrs	r2, r0, r1
    1684:	012fff1e 	bxeq	lr
    1688:	e92d4030 	push	{r4, r5, lr}
    168c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1690:	5a000001 	bpl	169c <__aeabi_l2d+0x1c>
    1694:	e2700000 	rsbs	r0, r0, #0
    1698:	e2e11000 	rsc	r1, r1, #0
    169c:	e3a04b01 	mov	r4, #1024	; 0x400
    16a0:	e2844032 	add	r4, r4, #50	; 0x32
    16a4:	e1b0cb21 	lsrs	r12, r1, #22
    16a8:	0affff44 	beq	13c0 <__adddf3+0xf0>
    16ac:	e3a02003 	mov	r2, #3
    16b0:	e1b0c1ac 	lsrs	r12, r12, #3
    16b4:	12822003 	addne	r2, r2, #3
    16b8:	e1b0c1ac 	lsrs	r12, r12, #3
    16bc:	12822003 	addne	r2, r2, #3
    16c0:	e08221ac 	add	r2, r2, r12, lsr #3
    16c4:	e2623020 	rsb	r3, r2, #32
    16c8:	e1a0c310 	lsl	r12, r0, r3
    16cc:	e1a00230 	lsr	r0, r0, r2
    16d0:	e1800311 	orr	r0, r0, r1, lsl r3
    16d4:	e1a01231 	lsr	r1, r1, r2
    16d8:	e0844002 	add	r4, r4, r2
    16dc:	eaffff37 	b	13c0 <__adddf3+0xf0>

000016e0 <__aeabi_dmul>:
    16e0:	e92d4070 	push	{r4, r5, r6, lr}
    16e4:	e3a0c0ff 	mov	r12, #255	; 0xff
    16e8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    16ec:	e01c4a21 	ands	r4, r12, r1, lsr #20
    16f0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    16f4:	1134000c 	teqne	r4, r12
    16f8:	1135000c 	teqne	r5, r12
    16fc:	0b000075 	bleq	18d8 <__aeabi_dmul+0x1f8>
    1700:	e0844005 	add	r4, r4, r5
    1704:	e0216003 	eor	r6, r1, r3
    1708:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    170c:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    1710:	e1905601 	orrs	r5, r0, r1, lsl #12
    1714:	11925603 	orrsne	r5, r2, r3, lsl #12
    1718:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    171c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1720:	0a00001d 	beq	179c <__aeabi_dmul+0xbc>
    1724:	e08ec290 	umull	r12, lr, r0, r2
    1728:	e3a05000 	mov	r5, #0
    172c:	e0a5e291 	umlal	lr, r5, r1, r2
    1730:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1734:	e0a5e390 	umlal	lr, r5, r0, r3
    1738:	e3a06000 	mov	r6, #0
    173c:	e0a65391 	umlal	r5, r6, r1, r3
    1740:	e33c0000 	teq	r12, #0
    1744:	138ee001 	orrne	lr, lr, #1
    1748:	e24440ff 	sub	r4, r4, #255	; 0xff
    174c:	e3560c02 	cmp	r6, #512	; 0x200
    1750:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1754:	2a000002 	bcs	1764 <__aeabi_dmul+0x84>
    1758:	e1b0e08e 	lsls	lr, lr, #1
    175c:	e0b55005 	adcs	r5, r5, r5
    1760:	e0a66006 	adc	r6, r6, r6
    1764:	e1821586 	orr	r1, r2, r6, lsl #11
    1768:	e1811aa5 	orr	r1, r1, r5, lsr #21
    176c:	e1a00585 	lsl	r0, r5, #11
    1770:	e1800aae 	orr	r0, r0, lr, lsr #21
    1774:	e1a0e58e 	lsl	lr, lr, #11
    1778:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    177c:	835c0c07 	cmphi	r12, #1792	; 0x700
    1780:	8a000011 	bhi	17cc <__aeabi_dmul+0xec>
    1784:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1788:	01b0e0a0 	lsrseq	lr, r0, #1
    178c:	e2b00000 	adcs	r0, r0, #0
    1790:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1794:	e8bd4070 	pop	{r4, r5, r6, lr}
    1798:	e12fff1e 	bx	lr
    179c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    17a0:	e1861001 	orr	r1, r6, r1
    17a4:	e1800002 	orr	r0, r0, r2
    17a8:	e0211003 	eor	r1, r1, r3
    17ac:	e05440ac 	subs	r4, r4, r12, lsr #1
    17b0:	c074500c 	rsbsgt	r5, r4, r12
    17b4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    17b8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    17bc:	c12fff1e 	bxgt	lr
    17c0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    17c4:	e3a0e000 	mov	lr, #0
    17c8:	e2544001 	subs	r4, r4, #1
    17cc:	ca00005d 	bgt	1948 <__aeabi_dmul+0x268>
    17d0:	e3740036 	cmn	r4, #54	; 0x36
    17d4:	d3a00000 	movle	r0, #0
    17d8:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    17dc:	d8bd4070 	pople	{r4, r5, r6, lr}
    17e0:	d12fff1e 	bxle	lr
    17e4:	e2644000 	rsb	r4, r4, #0
    17e8:	e2544020 	subs	r4, r4, #32
    17ec:	aa00001a 	bge	185c <__aeabi_dmul+0x17c>
    17f0:	e294400c 	adds	r4, r4, #12
    17f4:	ca00000c 	bgt	182c <__aeabi_dmul+0x14c>
    17f8:	e2844014 	add	r4, r4, #20
    17fc:	e2645020 	rsb	r5, r4, #32
    1800:	e1a03510 	lsl	r3, r0, r5
    1804:	e1a00430 	lsr	r0, r0, r4
    1808:	e1800511 	orr	r0, r0, r1, lsl r5
    180c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    1810:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1814:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1818:	e0a21431 	adc	r1, r2, r1, lsr r4
    181c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1820:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1824:	e8bd4070 	pop	{r4, r5, r6, lr}
    1828:	e12fff1e 	bx	lr
    182c:	e264400c 	rsb	r4, r4, #12
    1830:	e2645020 	rsb	r5, r4, #32
    1834:	e1a03410 	lsl	r3, r0, r4
    1838:	e1a00530 	lsr	r0, r0, r5
    183c:	e1800411 	orr	r0, r0, r1, lsl r4
    1840:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1844:	e0900fa3 	adds	r0, r0, r3, lsr #31
    1848:	e2a11000 	adc	r1, r1, #0
    184c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1850:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1854:	e8bd4070 	pop	{r4, r5, r6, lr}
    1858:	e12fff1e 	bx	lr
    185c:	e2645020 	rsb	r5, r4, #32
    1860:	e18ee510 	orr	lr, lr, r0, lsl r5
    1864:	e1a03430 	lsr	r3, r0, r4
    1868:	e1833511 	orr	r3, r3, r1, lsl r5
    186c:	e1a00431 	lsr	r0, r1, r4
    1870:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    1874:	e1c00431 	bic	r0, r0, r1, lsr r4
    1878:	e0800fa3 	add	r0, r0, r3, lsr #31
    187c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    1880:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    1884:	e8bd4070 	pop	{r4, r5, r6, lr}
    1888:	e12fff1e 	bx	lr
    188c:	e3340000 	teq	r4, #0
    1890:	1a000008 	bne	18b8 <__aeabi_dmul+0x1d8>
    1894:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    1898:	e1b00080 	lsls	r0, r0, #1
    189c:	e0a11001 	adc	r1, r1, r1
    18a0:	e3110601 	tst	r1, #1048576	; 0x100000
    18a4:	02444001 	subeq	r4, r4, #1
    18a8:	0afffffa 	beq	1898 <__aeabi_dmul+0x1b8>
    18ac:	e1811006 	orr	r1, r1, r6
    18b0:	e3350000 	teq	r5, #0
    18b4:	112fff1e 	bxne	lr
    18b8:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    18bc:	e1b02082 	lsls	r2, r2, #1
    18c0:	e0a33003 	adc	r3, r3, r3
    18c4:	e3130601 	tst	r3, #1048576	; 0x100000
    18c8:	02455001 	subeq	r5, r5, #1
    18cc:	0afffffa 	beq	18bc <__aeabi_dmul+0x1dc>
    18d0:	e1833006 	orr	r3, r3, r6
    18d4:	e12fff1e 	bx	lr
    18d8:	e134000c 	teq	r4, r12
    18dc:	e00c5a23 	and	r5, r12, r3, lsr #20
    18e0:	1135000c 	teqne	r5, r12
    18e4:	0a000007 	beq	1908 <__aeabi_dmul+0x228>
    18e8:	e1906081 	orrs	r6, r0, r1, lsl #1
    18ec:	11926083 	orrsne	r6, r2, r3, lsl #1
    18f0:	1affffe5 	bne	188c <__aeabi_dmul+0x1ac>
    18f4:	e0211003 	eor	r1, r1, r3
    18f8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    18fc:	e3a00000 	mov	r0, #0
    1900:	e8bd4070 	pop	{r4, r5, r6, lr}
    1904:	e12fff1e 	bx	lr
    1908:	e1906081 	orrs	r6, r0, r1, lsl #1
    190c:	01a00002 	moveq	r0, r2
    1910:	01a01003 	moveq	r1, r3
    1914:	11926083 	orrsne	r6, r2, r3, lsl #1
    1918:	0a000010 	beq	1960 <__aeabi_dmul+0x280>
    191c:	e134000c 	teq	r4, r12
    1920:	1a000001 	bne	192c <__aeabi_dmul+0x24c>
    1924:	e1906601 	orrs	r6, r0, r1, lsl #12
    1928:	1a00000c 	bne	1960 <__aeabi_dmul+0x280>
    192c:	e135000c 	teq	r5, r12
    1930:	1a000003 	bne	1944 <__aeabi_dmul+0x264>
    1934:	e1926603 	orrs	r6, r2, r3, lsl #12
    1938:	11a00002 	movne	r0, r2
    193c:	11a01003 	movne	r1, r3
    1940:	1a000006 	bne	1960 <__aeabi_dmul+0x280>
    1944:	e0211003 	eor	r1, r1, r3
    1948:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    194c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1950:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1954:	e3a00000 	mov	r0, #0
    1958:	e8bd4070 	pop	{r4, r5, r6, lr}
    195c:	e12fff1e 	bx	lr
    1960:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    1964:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    1968:	e8bd4070 	pop	{r4, r5, r6, lr}
    196c:	e12fff1e 	bx	lr

00001970 <__aeabi_ddiv>:
    1970:	e92d4070 	push	{r4, r5, r6, lr}
    1974:	e3a0c0ff 	mov	r12, #255	; 0xff
    1978:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    197c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    1980:	101c5a23 	andsne	r5, r12, r3, lsr #20
    1984:	1134000c 	teqne	r4, r12
    1988:	1135000c 	teqne	r5, r12
    198c:	0b00005e 	bleq	1b0c <__aeabi_ddiv+0x19c>
    1990:	e0444005 	sub	r4, r4, r5
    1994:	e021e003 	eor	lr, r1, r3
    1998:	e1925603 	orrs	r5, r2, r3, lsl #12
    199c:	e1a01601 	lsl	r1, r1, #12
    19a0:	0a00004c 	beq	1ad8 <__aeabi_ddiv+0x168>
    19a4:	e1a03603 	lsl	r3, r3, #12
    19a8:	e3a05201 	mov	r5, #268435456	; 0x10000000
    19ac:	e1853223 	orr	r3, r5, r3, lsr #4
    19b0:	e1833c22 	orr	r3, r3, r2, lsr #24
    19b4:	e1a02402 	lsl	r2, r2, #8
    19b8:	e1855221 	orr	r5, r5, r1, lsr #4
    19bc:	e1855c20 	orr	r5, r5, r0, lsr #24
    19c0:	e1a06400 	lsl	r6, r0, #8
    19c4:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    19c8:	e1550003 	cmp	r5, r3
    19cc:	01560002 	cmpeq	r6, r2
    19d0:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    19d4:	e2844c03 	add	r4, r4, #768	; 0x300
    19d8:	2a000001 	bcs	19e4 <__aeabi_ddiv+0x74>
    19dc:	e1b030a3 	lsrs	r3, r3, #1
    19e0:	e1a02062 	rrx	r2, r2
    19e4:	e0566002 	subs	r6, r6, r2
    19e8:	e0c55003 	sbc	r5, r5, r3
    19ec:	e1b030a3 	lsrs	r3, r3, #1
    19f0:	e1a02062 	rrx	r2, r2
    19f4:	e3a00601 	mov	r0, #1048576	; 0x100000
    19f8:	e3a0c702 	mov	r12, #524288	; 0x80000
    19fc:	e056e002 	subs	lr, r6, r2
    1a00:	e0d5e003 	sbcs	lr, r5, r3
    1a04:	20466002 	subcs	r6, r6, r2
    1a08:	21a0500e 	movcs	r5, lr
    1a0c:	2180000c 	orrcs	r0, r0, r12
    1a10:	e1b030a3 	lsrs	r3, r3, #1
    1a14:	e1a02062 	rrx	r2, r2
    1a18:	e056e002 	subs	lr, r6, r2
    1a1c:	e0d5e003 	sbcs	lr, r5, r3
    1a20:	20466002 	subcs	r6, r6, r2
    1a24:	21a0500e 	movcs	r5, lr
    1a28:	218000ac 	orrcs	r0, r0, r12, lsr #1
    1a2c:	e1b030a3 	lsrs	r3, r3, #1
    1a30:	e1a02062 	rrx	r2, r2
    1a34:	e056e002 	subs	lr, r6, r2
    1a38:	e0d5e003 	sbcs	lr, r5, r3
    1a3c:	20466002 	subcs	r6, r6, r2
    1a40:	21a0500e 	movcs	r5, lr
    1a44:	2180012c 	orrcs	r0, r0, r12, lsr #2
    1a48:	e1b030a3 	lsrs	r3, r3, #1
    1a4c:	e1a02062 	rrx	r2, r2
    1a50:	e056e002 	subs	lr, r6, r2
    1a54:	e0d5e003 	sbcs	lr, r5, r3
    1a58:	20466002 	subcs	r6, r6, r2
    1a5c:	21a0500e 	movcs	r5, lr
    1a60:	218001ac 	orrcs	r0, r0, r12, lsr #3
    1a64:	e195e006 	orrs	lr, r5, r6
    1a68:	0a00000d 	beq	1aa4 <__aeabi_ddiv+0x134>
    1a6c:	e1a05205 	lsl	r5, r5, #4
    1a70:	e1855e26 	orr	r5, r5, r6, lsr #28
    1a74:	e1a06206 	lsl	r6, r6, #4
    1a78:	e1a03183 	lsl	r3, r3, #3
    1a7c:	e1833ea2 	orr	r3, r3, r2, lsr #29
    1a80:	e1a02182 	lsl	r2, r2, #3
    1a84:	e1b0c22c 	lsrs	r12, r12, #4
    1a88:	1affffdb 	bne	19fc <__aeabi_ddiv+0x8c>
    1a8c:	e3110601 	tst	r1, #1048576	; 0x100000
    1a90:	1a000006 	bne	1ab0 <__aeabi_ddiv+0x140>
    1a94:	e1811000 	orr	r1, r1, r0
    1a98:	e3a00000 	mov	r0, #0
    1a9c:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    1aa0:	eaffffd5 	b	19fc <__aeabi_ddiv+0x8c>
    1aa4:	e3110601 	tst	r1, #1048576	; 0x100000
    1aa8:	01811000 	orreq	r1, r1, r0
    1aac:	03a00000 	moveq	r0, #0
    1ab0:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    1ab4:	835c0c07 	cmphi	r12, #1792	; 0x700
    1ab8:	8affff43 	bhi	17cc <__aeabi_dmul+0xec>
    1abc:	e055c003 	subs	r12, r5, r3
    1ac0:	0056c002 	subseq	r12, r6, r2
    1ac4:	01b0c0a0 	lsrseq	r12, r0, #1
    1ac8:	e2b00000 	adcs	r0, r0, #0
    1acc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1ad0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1ad4:	e12fff1e 	bx	lr
    1ad8:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    1adc:	e18e1621 	orr	r1, lr, r1, lsr #12
    1ae0:	e09440ac 	adds	r4, r4, r12, lsr #1
    1ae4:	c074500c 	rsbsgt	r5, r4, r12
    1ae8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1aec:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1af0:	c12fff1e 	bxgt	lr
    1af4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1af8:	e3a0e000 	mov	lr, #0
    1afc:	e2544001 	subs	r4, r4, #1
    1b00:	eaffff31 	b	17cc <__aeabi_dmul+0xec>
    1b04:	e185e006 	orr	lr, r5, r6
    1b08:	eaffff2f 	b	17cc <__aeabi_dmul+0xec>
    1b0c:	e00c5a23 	and	r5, r12, r3, lsr #20
    1b10:	e134000c 	teq	r4, r12
    1b14:	0135000c 	teqeq	r5, r12
    1b18:	0affff90 	beq	1960 <__aeabi_dmul+0x280>
    1b1c:	e134000c 	teq	r4, r12
    1b20:	1a000006 	bne	1b40 <__aeabi_ddiv+0x1d0>
    1b24:	e1904601 	orrs	r4, r0, r1, lsl #12
    1b28:	1affff8c 	bne	1960 <__aeabi_dmul+0x280>
    1b2c:	e135000c 	teq	r5, r12
    1b30:	1affff83 	bne	1944 <__aeabi_dmul+0x264>
    1b34:	e1a00002 	mov	r0, r2
    1b38:	e1a01003 	mov	r1, r3
    1b3c:	eaffff87 	b	1960 <__aeabi_dmul+0x280>
    1b40:	e135000c 	teq	r5, r12
    1b44:	1a000004 	bne	1b5c <__aeabi_ddiv+0x1ec>
    1b48:	e1925603 	orrs	r5, r2, r3, lsl #12
    1b4c:	0affff68 	beq	18f4 <__aeabi_dmul+0x214>
    1b50:	e1a00002 	mov	r0, r2
    1b54:	e1a01003 	mov	r1, r3
    1b58:	eaffff80 	b	1960 <__aeabi_dmul+0x280>
    1b5c:	e1906081 	orrs	r6, r0, r1, lsl #1
    1b60:	11926083 	orrsne	r6, r2, r3, lsl #1
    1b64:	1affff48 	bne	188c <__aeabi_dmul+0x1ac>
    1b68:	e1904081 	orrs	r4, r0, r1, lsl #1
    1b6c:	1affff74 	bne	1944 <__aeabi_dmul+0x264>
    1b70:	e1925083 	orrs	r5, r2, r3, lsl #1
    1b74:	1affff5e 	bne	18f4 <__aeabi_dmul+0x214>
    1b78:	eaffff78 	b	1960 <__aeabi_dmul+0x280>

00001b7c <__gedf2>:
    1b7c:	e3e0c000 	mvn	r12, #0
    1b80:	ea000002 	b	1b90 <__cmpdf2+0x4>

00001b84 <__ledf2>:
    1b84:	e3a0c001 	mov	r12, #1
    1b88:	ea000000 	b	1b90 <__cmpdf2+0x4>

00001b8c <__cmpdf2>:
    1b8c:	e3a0c001 	mov	r12, #1
    1b90:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    1b94:	e1a0c081 	lsl	r12, r1, #1
    1b98:	e1f0cacc 	mvns	r12, r12, asr #21
    1b9c:	e1a0c083 	lsl	r12, r3, #1
    1ba0:	11f0cacc 	mvnsne	r12, r12, asr #21
    1ba4:	0a00000e 	beq	1be4 <__cmpdf2+0x58>
    1ba8:	e28dd004 	add	sp, sp, #4
    1bac:	e190c081 	orrs	r12, r0, r1, lsl #1
    1bb0:	0192c083 	orrseq	r12, r2, r3, lsl #1
    1bb4:	11310003 	teqne	r1, r3
    1bb8:	01300002 	teqeq	r0, r2
    1bbc:	03a00000 	moveq	r0, #0
    1bc0:	012fff1e 	bxeq	lr
    1bc4:	e3700000 	cmn	r0, #0
    1bc8:	e1310003 	teq	r1, r3
    1bcc:	51510003 	cmppl	r1, r3
    1bd0:	01500002 	cmpeq	r0, r2
    1bd4:	21a00fc3 	asrcs	r0, r3, #31
    1bd8:	31e00fc3 	mvncc	r0, r3, asr #31
    1bdc:	e3800001 	orr	r0, r0, #1
    1be0:	e12fff1e 	bx	lr
    1be4:	e1a0c081 	lsl	r12, r1, #1
    1be8:	e1f0cacc 	mvns	r12, r12, asr #21
    1bec:	1a000001 	bne	1bf8 <__cmpdf2+0x6c>
    1bf0:	e190c601 	orrs	r12, r0, r1, lsl #12
    1bf4:	1a000004 	bne	1c0c <__cmpdf2+0x80>
    1bf8:	e1a0c083 	lsl	r12, r3, #1
    1bfc:	e1f0cacc 	mvns	r12, r12, asr #21
    1c00:	1affffe8 	bne	1ba8 <__cmpdf2+0x1c>
    1c04:	e192c603 	orrs	r12, r2, r3, lsl #12
    1c08:	0affffe6 	beq	1ba8 <__cmpdf2+0x1c>
    1c0c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1c10:	e12fff1e 	bx	lr

00001c14 <__aeabi_cdrcmple>:
    1c14:	e1a0c000 	mov	r12, r0
    1c18:	e1a00002 	mov	r0, r2
    1c1c:	e1a0200c 	mov	r2, r12
    1c20:	e1a0c001 	mov	r12, r1
    1c24:	e1a01003 	mov	r1, r3
    1c28:	e1a0300c 	mov	r3, r12
    1c2c:	eaffffff 	b	1c30 <__aeabi_cdcmpeq>

00001c30 <__aeabi_cdcmpeq>:
    1c30:	e92d4001 	push	{r0, lr}
    1c34:	ebffffd4 	bl	1b8c <__cmpdf2>
    1c38:	e3500000 	cmp	r0, #0
    1c3c:	43700000 	cmnmi	r0, #0
    1c40:	e8bd4001 	pop	{r0, lr}
    1c44:	e12fff1e 	bx	lr

00001c48 <__aeabi_dcmpeq>:
    1c48:	e52de008 	str	lr, [sp, #-8]!
    1c4c:	ebfffff7 	bl	1c30 <__aeabi_cdcmpeq>
    1c50:	03a00001 	moveq	r0, #1
    1c54:	13a00000 	movne	r0, #0
    1c58:	e49de008 	ldr	lr, [sp], #8
    1c5c:	e12fff1e 	bx	lr

00001c60 <__aeabi_dcmplt>:
    1c60:	e52de008 	str	lr, [sp, #-8]!
    1c64:	ebfffff1 	bl	1c30 <__aeabi_cdcmpeq>
    1c68:	33a00001 	movcc	r0, #1
    1c6c:	23a00000 	movcs	r0, #0
    1c70:	e49de008 	ldr	lr, [sp], #8
    1c74:	e12fff1e 	bx	lr

00001c78 <__aeabi_dcmple>:
    1c78:	e52de008 	str	lr, [sp, #-8]!
    1c7c:	ebffffeb 	bl	1c30 <__aeabi_cdcmpeq>
    1c80:	93a00001 	movls	r0, #1
    1c84:	83a00000 	movhi	r0, #0
    1c88:	e49de008 	ldr	lr, [sp], #8
    1c8c:	e12fff1e 	bx	lr

00001c90 <__aeabi_dcmpge>:
    1c90:	e52de008 	str	lr, [sp, #-8]!
    1c94:	ebffffde 	bl	1c14 <__aeabi_cdrcmple>
    1c98:	93a00001 	movls	r0, #1
    1c9c:	83a00000 	movhi	r0, #0
    1ca0:	e49de008 	ldr	lr, [sp], #8
    1ca4:	e12fff1e 	bx	lr

00001ca8 <__aeabi_dcmpgt>:
    1ca8:	e52de008 	str	lr, [sp, #-8]!
    1cac:	ebffffd8 	bl	1c14 <__aeabi_cdrcmple>
    1cb0:	33a00001 	movcc	r0, #1
    1cb4:	23a00000 	movcs	r0, #0
    1cb8:	e49de008 	ldr	lr, [sp], #8
    1cbc:	e12fff1e 	bx	lr

00001cc0 <__aeabi_d2iz>:
    1cc0:	e1a02081 	lsl	r2, r1, #1
    1cc4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    1cc8:	2a00000c 	bcs	1d00 <__aeabi_d2iz+0x40>
    1ccc:	5a000009 	bpl	1cf8 <__aeabi_d2iz+0x38>
    1cd0:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    1cd4:	e0532ac2 	subs	r2, r3, r2, asr #21
    1cd8:	9a00000a 	bls	1d08 <__aeabi_d2iz+0x48>
    1cdc:	e1a03581 	lsl	r3, r1, #11
    1ce0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    1ce4:	e1833aa0 	orr	r3, r3, r0, lsr #21
    1ce8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1cec:	e1a00233 	lsr	r0, r3, r2
    1cf0:	12600000 	rsbne	r0, r0, #0
    1cf4:	e12fff1e 	bx	lr
    1cf8:	e3a00000 	mov	r0, #0
    1cfc:	e12fff1e 	bx	lr
    1d00:	e1900601 	orrs	r0, r0, r1, lsl #12
    1d04:	1a000002 	bne	1d14 <__aeabi_d2iz+0x54>
    1d08:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    1d0c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1d10:	e12fff1e 	bx	lr
    1d14:	e3a00000 	mov	r0, #0
    1d18:	e12fff1e 	bx	lr

00001d1c <atexit>:
    1d1c:	e1a01000 	mov	r1, r0
    1d20:	e3a00000 	mov	r0, #0
    1d24:	e92d4008 	push	{r3, lr}
    1d28:	e1a02000 	mov	r2, r0
    1d2c:	e1a03000 	mov	r3, r0
    1d30:	eb000091 	bl	1f7c <__register_exitproc>
    1d34:	e8bd4008 	pop	{r3, lr}
    1d38:	e12fff1e 	bx	lr

00001d3c <exit>:
    1d3c:	e92d4008 	push	{r3, lr}
    1d40:	e3a01000 	mov	r1, #0
    1d44:	e1a04000 	mov	r4, r0
    1d48:	eb0000c8 	bl	2070 <__call_exitprocs>
    1d4c:	e59f3018 	ldr	r3, [pc, #24]	; 1d6c <exit+0x30>
    1d50:	e5930000 	ldr	r0, [r3]
    1d54:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    1d58:	e3530000 	cmp	r3, #0
    1d5c:	11a0e00f 	movne	lr, pc
    1d60:	112fff13 	bxne	r3
    1d64:	e1a00004 	mov	r0, r4
    1d68:	eb00014c 	bl	22a0 <_exit>
    1d6c:	000023b0 	.word	0x000023b0

00001d70 <memcpy>:
    1d70:	e3520003 	cmp	r2, #3
    1d74:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    1d78:	8a000009 	bhi	1da4 <memcpy+0x34>
    1d7c:	e3520000 	cmp	r2, #0
    1d80:	0a000005 	beq	1d9c <memcpy+0x2c>
    1d84:	e3a03000 	mov	r3, #0
    1d88:	e7d1c003 	ldrb	r12, [r1, r3]
    1d8c:	e7c0c003 	strb	r12, [r0, r3]
    1d90:	e2833001 	add	r3, r3, #1
    1d94:	e1530002 	cmp	r3, r2
    1d98:	1afffffa 	bne	1d88 <memcpy+0x18>
    1d9c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    1da0:	e12fff1e 	bx	lr
    1da4:	e3100003 	tst	r0, #3
    1da8:	e0802002 	add	r2, r0, r2
    1dac:	0a00000b 	beq	1de0 <memcpy+0x70>
    1db0:	e280c001 	add	r12, r0, #1
    1db4:	e2814001 	add	r4, r1, #1
    1db8:	e20c3003 	and	r3, r12, #3
    1dbc:	e5545001 	ldrb	r5, [r4, #-1]
    1dc0:	e3530000 	cmp	r3, #0
    1dc4:	e1a01004 	mov	r1, r4
    1dc8:	e1a0300c 	mov	r3, r12
    1dcc:	e54c5001 	strb	r5, [r12, #-1]
    1dd0:	e2844001 	add	r4, r4, #1
    1dd4:	e28cc001 	add	r12, r12, #1
    1dd8:	1afffff6 	bne	1db8 <memcpy+0x48>
    1ddc:	ea000000 	b	1de4 <memcpy+0x74>
    1de0:	e1a03000 	mov	r3, r0
    1de4:	e211c003 	ands	r12, r1, #3
    1de8:	1a00004f 	bne	1f2c <memcpy+0x1bc>
    1dec:	e063c002 	rsb	r12, r3, r2
    1df0:	e35c003f 	cmp	r12, #63	; 0x3f
    1df4:	da000024 	ble	1e8c <memcpy+0x11c>
    1df8:	e591c000 	ldr	r12, [r1]
    1dfc:	e583c000 	str	r12, [r3]
    1e00:	e591c004 	ldr	r12, [r1, #4]
    1e04:	e583c004 	str	r12, [r3, #4]
    1e08:	e591c008 	ldr	r12, [r1, #8]
    1e0c:	e583c008 	str	r12, [r3, #8]
    1e10:	e591c00c 	ldr	r12, [r1, #12]
    1e14:	e583c00c 	str	r12, [r3, #12]
    1e18:	e591c010 	ldr	r12, [r1, #16]
    1e1c:	e583c010 	str	r12, [r3, #16]
    1e20:	e591c014 	ldr	r12, [r1, #20]
    1e24:	e583c014 	str	r12, [r3, #20]
    1e28:	e591c018 	ldr	r12, [r1, #24]
    1e2c:	e583c018 	str	r12, [r3, #24]
    1e30:	e591c01c 	ldr	r12, [r1, #28]
    1e34:	e583c01c 	str	r12, [r3, #28]
    1e38:	e591c020 	ldr	r12, [r1, #32]
    1e3c:	e583c020 	str	r12, [r3, #32]
    1e40:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    1e44:	e583c024 	str	r12, [r3, #36]	; 0x24
    1e48:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    1e4c:	e583c028 	str	r12, [r3, #40]	; 0x28
    1e50:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    1e54:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    1e58:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    1e5c:	e583c030 	str	r12, [r3, #48]	; 0x30
    1e60:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    1e64:	e583c034 	str	r12, [r3, #52]	; 0x34
    1e68:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    1e6c:	e583c038 	str	r12, [r3, #56]	; 0x38
    1e70:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    1e74:	e2833040 	add	r3, r3, #64	; 0x40
    1e78:	e503c004 	str	r12, [r3, #-4]
    1e7c:	e063c002 	rsb	r12, r3, r2
    1e80:	e35c003f 	cmp	r12, #63	; 0x3f
    1e84:	e2811040 	add	r1, r1, #64	; 0x40
    1e88:	caffffda 	bgt	1df8 <memcpy+0x88>
    1e8c:	e35c000f 	cmp	r12, #15
    1e90:	da00000c 	ble	1ec8 <memcpy+0x158>
    1e94:	e591c000 	ldr	r12, [r1]
    1e98:	e583c000 	str	r12, [r3]
    1e9c:	e591c004 	ldr	r12, [r1, #4]
    1ea0:	e583c004 	str	r12, [r3, #4]
    1ea4:	e591c008 	ldr	r12, [r1, #8]
    1ea8:	e583c008 	str	r12, [r3, #8]
    1eac:	e591c00c 	ldr	r12, [r1, #12]
    1eb0:	e2833010 	add	r3, r3, #16
    1eb4:	e503c004 	str	r12, [r3, #-4]
    1eb8:	e063c002 	rsb	r12, r3, r2
    1ebc:	e35c000f 	cmp	r12, #15
    1ec0:	e2811010 	add	r1, r1, #16
    1ec4:	cafffff2 	bgt	1e94 <memcpy+0x124>
    1ec8:	e35c0003 	cmp	r12, #3
    1ecc:	da00000a 	ble	1efc <memcpy+0x18c>
    1ed0:	e283c004 	add	r12, r3, #4
    1ed4:	e2814004 	add	r4, r1, #4
    1ed8:	e06c3002 	rsb	r3, r12, r2
    1edc:	e5145004 	ldr	r5, [r4, #-4]
    1ee0:	e3530003 	cmp	r3, #3
    1ee4:	e1a01004 	mov	r1, r4
    1ee8:	e1a0300c 	mov	r3, r12
    1eec:	e50c5004 	str	r5, [r12, #-4]
    1ef0:	e2844004 	add	r4, r4, #4
    1ef4:	e28cc004 	add	r12, r12, #4
    1ef8:	cafffff6 	bgt	1ed8 <memcpy+0x168>
    1efc:	e1520003 	cmp	r2, r3
    1f00:	82833001 	addhi	r3, r3, #1
    1f04:	82811001 	addhi	r1, r1, #1
    1f08:	82822001 	addhi	r2, r2, #1
    1f0c:	9affffa2 	bls	1d9c <memcpy+0x2c>
    1f10:	e551c001 	ldrb	r12, [r1, #-1]
    1f14:	e2833001 	add	r3, r3, #1
    1f18:	e1530002 	cmp	r3, r2
    1f1c:	e543c002 	strb	r12, [r3, #-2]
    1f20:	e2811001 	add	r1, r1, #1
    1f24:	1afffff9 	bne	1f10 <memcpy+0x1a0>
    1f28:	eaffff9b 	b	1d9c <memcpy+0x2c>
    1f2c:	e0635002 	rsb	r5, r3, r2
    1f30:	e06c4001 	rsb	r4, r12, r1
    1f34:	e3550003 	cmp	r5, #3
    1f38:	e5945000 	ldr	r5, [r4]
    1f3c:	daffffee 	ble	1efc <memcpy+0x18c>
    1f40:	e26c6004 	rsb	r6, r12, #4
    1f44:	e1a0718c 	lsl	r7, r12, #3
    1f48:	e1a06186 	lsl	r6, r6, #3
    1f4c:	e283c004 	add	r12, r3, #4
    1f50:	e1a08735 	lsr	r8, r5, r7
    1f54:	e5b45004 	ldr	r5, [r4, #4]!
    1f58:	e1888615 	orr	r8, r8, r5, lsl r6
    1f5c:	e06c3002 	rsb	r3, r12, r2
    1f60:	e3530003 	cmp	r3, #3
    1f64:	e50c8004 	str	r8, [r12, #-4]
    1f68:	e1a0300c 	mov	r3, r12
    1f6c:	e2811004 	add	r1, r1, #4
    1f70:	e28cc004 	add	r12, r12, #4
    1f74:	cafffff5 	bgt	1f50 <memcpy+0x1e0>
    1f78:	eaffffdf 	b	1efc <memcpy+0x18c>

00001f7c <__register_exitproc>:
    1f7c:	e59fc0e4 	ldr	r12, [pc, #228]	; 2068 <__register_exitproc+0xec>
    1f80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1f84:	e59c4000 	ldr	r4, [r12]
    1f88:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1f8c:	e35c0000 	cmp	r12, #0
    1f90:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1f94:	e59c5004 	ldr	r5, [r12, #4]
    1f98:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1f9c:	e355001f 	cmp	r5, #31
    1fa0:	e24dd010 	sub	sp, sp, #16
    1fa4:	e1a06000 	mov	r6, r0
    1fa8:	da000015 	ble	2004 <__register_exitproc+0x88>
    1fac:	e59f00b8 	ldr	r0, [pc, #184]	; 206c <__register_exitproc+0xf0>
    1fb0:	e3500000 	cmp	r0, #0
    1fb4:	1a000001 	bne	1fc0 <__register_exitproc+0x44>
    1fb8:	e3e00000 	mvn	r0, #0
    1fbc:	ea000018 	b	2024 <__register_exitproc+0xa8>
    1fc0:	e3a00e19 	mov	r0, #400	; 0x190
    1fc4:	e58d100c 	str	r1, [sp, #12]
    1fc8:	e58d2008 	str	r2, [sp, #8]
    1fcc:	e58d3004 	str	r3, [sp, #4]
    1fd0:	e320f000 	nop	{0}
    1fd4:	e250c000 	subs	r12, r0, #0
    1fd8:	e59d100c 	ldr	r1, [sp, #12]
    1fdc:	e59d2008 	ldr	r2, [sp, #8]
    1fe0:	e59d3004 	ldr	r3, [sp, #4]
    1fe4:	0afffff3 	beq	1fb8 <__register_exitproc+0x3c>
    1fe8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1fec:	e3a00000 	mov	r0, #0
    1ff0:	e58c0004 	str	r0, [r12, #4]
    1ff4:	e58c5000 	str	r5, [r12]
    1ff8:	e584c148 	str	r12, [r4, #328]	; 0x148
    1ffc:	e58c0188 	str	r0, [r12, #392]	; 0x188
    2000:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    2004:	e3560000 	cmp	r6, #0
    2008:	e59c4004 	ldr	r4, [r12, #4]
    200c:	1a000007 	bne	2030 <__register_exitproc+0xb4>
    2010:	e2843002 	add	r3, r4, #2
    2014:	e2844001 	add	r4, r4, #1
    2018:	e78c1103 	str	r1, [r12, r3, lsl #2]
    201c:	e58c4004 	str	r4, [r12, #4]
    2020:	e3a00000 	mov	r0, #0
    2024:	e28dd010 	add	sp, sp, #16
    2028:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    202c:	e12fff1e 	bx	lr
    2030:	e3a00001 	mov	r0, #1
    2034:	e1a00410 	lsl	r0, r0, r4
    2038:	e08c8104 	add	r8, r12, r4, lsl #2
    203c:	e3560002 	cmp	r6, #2
    2040:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    2044:	e5883108 	str	r3, [r8, #264]	; 0x108
    2048:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    204c:	e1877000 	orr	r7, r7, r0
    2050:	01830000 	orreq	r0, r3, r0
    2054:	e1a05008 	mov	r5, r8
    2058:	e5882088 	str	r2, [r8, #136]	; 0x88
    205c:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2060:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    2064:	eaffffe9 	b	2010 <__register_exitproc+0x94>
    2068:	000023b0 	.word	0x000023b0
    206c:	00000000 	.word	0x00000000

00002070 <__call_exitprocs>:
    2070:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2074:	e59f3168 	ldr	r3, [pc, #360]	; 21e4 <__call_exitprocs+0x174>
    2078:	e5933000 	ldr	r3, [r3]
    207c:	e24dd014 	sub	sp, sp, #20
    2080:	e58d3004 	str	r3, [sp, #4]
    2084:	e2833f52 	add	r3, r3, #328	; 0x148
    2088:	e58d0008 	str	r0, [sp, #8]
    208c:	e58d300c 	str	r3, [sp, #12]
    2090:	e1a07001 	mov	r7, r1
    2094:	e3a08001 	mov	r8, #1
    2098:	e59d3004 	ldr	r3, [sp, #4]
    209c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    20a0:	e3560000 	cmp	r6, #0
    20a4:	e59db00c 	ldr	r11, [sp, #12]
    20a8:	0a000033 	beq	217c <__call_exitprocs+0x10c>
    20ac:	e5965004 	ldr	r5, [r6, #4]
    20b0:	e2554001 	subs	r4, r5, #1
    20b4:	5286a088 	addpl	r10, r6, #136	; 0x88
    20b8:	5285501f 	addpl	r5, r5, #31
    20bc:	508a5105 	addpl	r5, r10, r5, lsl #2
    20c0:	5a000007 	bpl	20e4 <__call_exitprocs+0x74>
    20c4:	ea000029 	b	2170 <__call_exitprocs+0x100>
    20c8:	e5953000 	ldr	r3, [r5]
    20cc:	e1530007 	cmp	r3, r7
    20d0:	0a000005 	beq	20ec <__call_exitprocs+0x7c>
    20d4:	e2444001 	sub	r4, r4, #1
    20d8:	e3740001 	cmn	r4, #1
    20dc:	e2455004 	sub	r5, r5, #4
    20e0:	0a000022 	beq	2170 <__call_exitprocs+0x100>
    20e4:	e3570000 	cmp	r7, #0
    20e8:	1afffff6 	bne	20c8 <__call_exitprocs+0x58>
    20ec:	e5963004 	ldr	r3, [r6, #4]
    20f0:	e06a2005 	rsb	r2, r10, r5
    20f4:	e2433001 	sub	r3, r3, #1
    20f8:	e0862002 	add	r2, r6, r2
    20fc:	e1530004 	cmp	r3, r4
    2100:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    2104:	13a01000 	movne	r1, #0
    2108:	05864004 	streq	r4, [r6, #4]
    210c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2110:	e3530000 	cmp	r3, #0
    2114:	0affffee 	beq	20d4 <__call_exitprocs+0x64>
    2118:	e1a02418 	lsl	r2, r8, r4
    211c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2120:	e1120001 	tst	r2, r1
    2124:	e5969004 	ldr	r9, [r6, #4]
    2128:	0a000016 	beq	2188 <__call_exitprocs+0x118>
    212c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2130:	e1120001 	tst	r2, r1
    2134:	1a000016 	bne	2194 <__call_exitprocs+0x124>
    2138:	e59d0008 	ldr	r0, [sp, #8]
    213c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2140:	e1a0e00f 	mov	lr, pc
    2144:	e12fff13 	bx	r3
    2148:	e5963004 	ldr	r3, [r6, #4]
    214c:	e1530009 	cmp	r3, r9
    2150:	1affffd0 	bne	2098 <__call_exitprocs+0x28>
    2154:	e59b3000 	ldr	r3, [r11]
    2158:	e1530006 	cmp	r3, r6
    215c:	1affffcd 	bne	2098 <__call_exitprocs+0x28>
    2160:	e2444001 	sub	r4, r4, #1
    2164:	e3740001 	cmn	r4, #1
    2168:	e2455004 	sub	r5, r5, #4
    216c:	1affffdc 	bne	20e4 <__call_exitprocs+0x74>
    2170:	e59f1070 	ldr	r1, [pc, #112]	; 21e8 <__call_exitprocs+0x178>
    2174:	e3510000 	cmp	r1, #0
    2178:	1a000009 	bne	21a4 <__call_exitprocs+0x134>
    217c:	e28dd014 	add	sp, sp, #20
    2180:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2184:	e12fff1e 	bx	lr
    2188:	e1a0e00f 	mov	lr, pc
    218c:	e12fff13 	bx	r3
    2190:	eaffffec 	b	2148 <__call_exitprocs+0xd8>
    2194:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2198:	e1a0e00f 	mov	lr, pc
    219c:	e12fff13 	bx	r3
    21a0:	eaffffe8 	b	2148 <__call_exitprocs+0xd8>
    21a4:	e5963004 	ldr	r3, [r6, #4]
    21a8:	e3530000 	cmp	r3, #0
    21ac:	e5963000 	ldr	r3, [r6]
    21b0:	1a000008 	bne	21d8 <__call_exitprocs+0x168>
    21b4:	e3530000 	cmp	r3, #0
    21b8:	0a000006 	beq	21d8 <__call_exitprocs+0x168>
    21bc:	e1a00006 	mov	r0, r6
    21c0:	e58b3000 	str	r3, [r11]
    21c4:	e320f000 	nop	{0}
    21c8:	e59b6000 	ldr	r6, [r11]
    21cc:	e3560000 	cmp	r6, #0
    21d0:	1affffb5 	bne	20ac <__call_exitprocs+0x3c>
    21d4:	eaffffe8 	b	217c <__call_exitprocs+0x10c>
    21d8:	e1a0b006 	mov	r11, r6
    21dc:	e1a06003 	mov	r6, r3
    21e0:	eafffff9 	b	21cc <__call_exitprocs+0x15c>
    21e4:	000023b0 	.word	0x000023b0
    21e8:	00000000 	.word	0x00000000

000021ec <register_fini>:
    21ec:	e92d4008 	push	{r3, lr}
    21f0:	e59f3010 	ldr	r3, [pc, #16]	; 2208 <register_fini+0x1c>
    21f4:	e3530000 	cmp	r3, #0
    21f8:	159f000c 	ldrne	r0, [pc, #12]	; 220c <register_fini+0x20>
    21fc:	1bfffec6 	blne	1d1c <atexit>
    2200:	e8bd4008 	pop	{r3, lr}
    2204:	e12fff1e 	bx	lr
    2208:	000023d8 	.word	0x000023d8
    220c:	00002210 	.word	0x00002210

00002210 <__libc_fini_array>:
    2210:	e92d4038 	push	{r3, r4, r5, lr}
    2214:	e59f5030 	ldr	r5, [pc, #48]	; 224c <__libc_fini_array+0x3c>
    2218:	e59f4030 	ldr	r4, [pc, #48]	; 2250 <__libc_fini_array+0x40>
    221c:	e0654004 	rsb	r4, r5, r4
    2220:	e1b04144 	asrs	r4, r4, #2
    2224:	10855104 	addne	r5, r5, r4, lsl #2
    2228:	0a000004 	beq	2240 <__libc_fini_array+0x30>
    222c:	e5353004 	ldr	r3, [r5, #-4]!
    2230:	e1a0e00f 	mov	lr, pc
    2234:	e12fff13 	bx	r3
    2238:	e2544001 	subs	r4, r4, #1
    223c:	1afffffa 	bne	222c <__libc_fini_array+0x1c>
    2240:	eb000064 	bl	23d8 <__libc_fini>
    2244:	e8bd4038 	pop	{r3, r4, r5, lr}
    2248:	e12fff1e 	bx	lr
    224c:	000023f0 	.word	0x000023f0
    2250:	000023f4 	.word	0x000023f4

00002254 <__cs3_premain>:
    2254:	e92d4008 	push	{r3, lr}
    2258:	eb00001d 	bl	22d4 <__libc_init_array>
    225c:	e59f3030 	ldr	r3, [pc, #48]	; 2294 <__cs3_premain+0x40>
    2260:	e3530000 	cmp	r3, #0
    2264:	15930000 	ldrne	r0, [r3]
    2268:	01a00003 	moveq	r0, r3
    226c:	e59f3024 	ldr	r3, [pc, #36]	; 2298 <__cs3_premain+0x44>
    2270:	e3530000 	cmp	r3, #0
    2274:	15931000 	ldrne	r1, [r3]
    2278:	01a01003 	moveq	r1, r3
    227c:	e3a02000 	mov	r2, #0
    2280:	ebfffb54 	bl	fd8 <main>
    2284:	e59f3010 	ldr	r3, [pc, #16]	; 229c <__cs3_premain+0x48>
    2288:	e3530000 	cmp	r3, #0
    228c:	1bfffeaa 	blne	1d3c <exit>
    2290:	eafffffe 	b	2290 <__cs3_premain+0x3c>
	...
    229c:	00001d3c 	.word	0x00001d3c

000022a0 <_exit>:
    22a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    22a4:	e3a00018 	mov	r0, #24
    22a8:	e59f1004 	ldr	r1, [pc, #4]	; 22b4 <_exit+0x14>
    22ac:	ef123456 	svc	0x00123456
    22b0:	eafffffe 	b	22b0 <_exit+0x10>
    22b4:	00020026 	.word	0x00020026

000022b8 <__cs3_isr_interrupt>:
    22b8:	eafffffe 	b	22b8 <__cs3_isr_interrupt>

000022bc <__cs3_isr_undef>:
    22bc:	eafffffe 	b	22bc <__cs3_isr_undef>

000022c0 <__cs3_isr_swi>:
    22c0:	eafffffe 	b	22c0 <__cs3_isr_swi>

000022c4 <__cs3_isr_pabort>:
    22c4:	eafffffe 	b	22c4 <__cs3_isr_pabort>

000022c8 <__cs3_isr_dabort>:
    22c8:	eafffffe 	b	22c8 <__cs3_isr_dabort>

000022cc <__cs3_isr_irq>:
    22cc:	eafffffe 	b	22cc <__cs3_isr_irq>

000022d0 <__cs3_isr_fiq>:
    22d0:	eafffffe 	b	22d0 <__cs3_isr_fiq>

000022d4 <__libc_init_array>:
    22d4:	e92d4070 	push	{r4, r5, r6, lr}
    22d8:	e59f506c 	ldr	r5, [pc, #108]	; 234c <__libc_init_array+0x78>
    22dc:	e59f606c 	ldr	r6, [pc, #108]	; 2350 <__libc_init_array+0x7c>
    22e0:	e0656006 	rsb	r6, r5, r6
    22e4:	e1b06146 	asrs	r6, r6, #2
    22e8:	12455004 	subne	r5, r5, #4
    22ec:	13a04000 	movne	r4, #0
    22f0:	0a000005 	beq	230c <__libc_init_array+0x38>
    22f4:	e5b53004 	ldr	r3, [r5, #4]!
    22f8:	e2844001 	add	r4, r4, #1
    22fc:	e1a0e00f 	mov	lr, pc
    2300:	e12fff13 	bx	r3
    2304:	e1560004 	cmp	r6, r4
    2308:	1afffff9 	bne	22f4 <__libc_init_array+0x20>
    230c:	e59f5040 	ldr	r5, [pc, #64]	; 2354 <__libc_init_array+0x80>
    2310:	e59f6040 	ldr	r6, [pc, #64]	; 2358 <__libc_init_array+0x84>
    2314:	e0656006 	rsb	r6, r5, r6
    2318:	eb000026 	bl	23b8 <_init>
    231c:	e1b06146 	asrs	r6, r6, #2
    2320:	12455004 	subne	r5, r5, #4
    2324:	13a04000 	movne	r4, #0
    2328:	0a000005 	beq	2344 <__libc_init_array+0x70>
    232c:	e5b53004 	ldr	r3, [r5, #4]!
    2330:	e2844001 	add	r4, r4, #1
    2334:	e1a0e00f 	mov	lr, pc
    2338:	e12fff13 	bx	r3
    233c:	e1560004 	cmp	r6, r4
    2340:	1afffff9 	bne	232c <__libc_init_array+0x58>
    2344:	e8bd4070 	pop	{r4, r5, r6, lr}
    2348:	e12fff1e 	bx	lr
    234c:	000023d0 	.word	0x000023d0
    2350:	000023d0 	.word	0x000023d0
    2354:	000023d0 	.word	0x000023d0
    2358:	000023d8 	.word	0x000023d8

Disassembly of section .rodata:

00002360 <_global_impure_ptr-0x50>:
    2360:	00000000 	.word	0x00000000
    2364:	bff00000 	.word	0xbff00000
	...
    2370:	509f7b52 	.word	0x509f7b52
    2374:	3fd34413 	.word	0x3fd34413
    2378:	964fedbe 	.word	0x964fedbe
    237c:	3fde8927 	.word	0x3fde8927
    2380:	509f7b52 	.word	0x509f7b52
    2384:	3fe34413 	.word	0x3fe34413
    2388:	57b04257 	.word	0x57b04257
    238c:	3fe65df6 	.word	0x3fe65df6
    2390:	7377b488 	.word	0x7377b488
    2394:	3fe8e69d 	.word	0x3fe8e69d
    2398:	0b78c336 	.word	0x0b78c336
    239c:	3feb0b0b 	.word	0x3feb0b0b
    23a0:	f8ef38fb 	.word	0xf8ef38fb
    23a4:	3fece61c 	.word	0x3fece61c
    23a8:	964fca8f 	.word	0x964fca8f
    23ac:	3fee8927 	.word	0x3fee8927

000023b0 <_global_impure_ptr>:
    23b0:	00002418 00000043                       .$..C...

000023b8 <_init>:
    23b8:	e1a0c00d 	mov	r12, sp
    23bc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    23c0:	e24cb004 	sub	r11, r12, #4
    23c4:	e24bd028 	sub	sp, r11, #40	; 0x28
    23c8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    23cc:	e12fff1e 	bx	lr

000023d0 <__init_array_start>:
    23d0:	000021ec 	.word	0x000021ec

000023d4 <__frame_dummy_init_array_entry>:
    23d4:	00000208                                ....

000023d8 <__libc_fini>:
    23d8:	e1a0c00d 	mov	r12, sp
    23dc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    23e0:	e24cb004 	sub	r11, r12, #4
    23e4:	e24bd028 	sub	sp, r11, #40	; 0x28
    23e8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    23ec:	e12fff1e 	bx	lr

000023f0 <__fini_array_start>:
    23f0:	000001c4 	.word	0x000001c4

000023f4 <__cs3_regions>:
	...
    2400:	00002848 	.word	0x00002848
    2404:	00000020 	.word	0x00000020
